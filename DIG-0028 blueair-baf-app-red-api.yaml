openapi: 3.0.1
info:
  version: 1.0.0.SNAPSHOT
  title: Blueair Blueair Friend App Red API
  description: |
    This is the red API for the blueair friend application. It is explicitly stiched to match
    the Blueair friend application. This API is evolved by cloud and app development team and
    shall always be that aim. This API is to be used in conjuction with blue and yellow APIs
    that the cloud (blue) resp. organization (yello) is responsible for.

    ## How to read this document

    This document may be read using a  [online editor](http://editor.swagger.io/) or
    use a docker container to host the editor using `docker run -d -p 80:8080 swaggerapi/swagger-editor`
    when the container is running use a browser and point it to [localhost](http://localhost/). May
    IDEs supports plugins to render and lint OpenAPI such as visual studio code.

    ## Secuirty

    In order to invoke the APIs the client needs to be authenticated. Depending on the type of request
    and which parameters the client needs different scopes and claims inprinted in the token to successfully
    execute the API request.
  termsOfService: 'http://blueair.io/terms/todo-need-to-expose-those-anders-avergaard'
  contact:
    email: apiteam@blueair.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
externalDocs:
  description: Find out more about the Blueair Cloud
  url: 'https://blueairab.sharepoint.com/teams/Digitality2/Shared%20Documents/Forms/AllItems.aspx'
servers:
  - url: 'https://api.blueair.io/1.0.0-SNAPSHOT'
  - url: 'https://localhost:8080/1.0.0-SNAPSHOT'
tags:
  - name: red-api
    description: Blueair Friend Application red API
    externalDocs:
      description: Find out more about the red APIs
      url: 'https://todo.me'
security:
  - cloudAuth: []
x-amazon-apigateway-binary-media-types:
  - multipart/form-data
  - application/octet-stream
paths:
  '/c/{uuid}/r/initial':
    post:
      tags:
        - red-api
      summary: The initial API that gathers all states and configuration for the BAF application.
      description: |
        <p>This method gathers all static configuration along with the operational states
        in the dynamic portion. It also gets event and alarms whilist subscribes using either
        supplied filters or default generated. The number of events and alarms (if any requested)
        depends on the in parameter filter. It also supports querying the telemetry service for
        sensor data within a range for each device. In all this reduces several backend calls from
        the application to just one. The whole purpose of this call is to get-in-sync in order to
        just listen to real-time channel to get data, events, and alarms and also control using
        cloud actuator services.  As a sidenote, it is possible to just get the latest reported
        values in the telemetry service. Since those values are timestamped the application may
        choose to indicate that those values are probably incorrect and a few seconds later will
        be overwritten with current ones (if timstamp is far back in time).</p>
        <p>
        The caller should subscribe to real-time channel, event, anlarm before invoking this API
        method (if subscription is wanted). Otherwise some events, alarms or values get lost. 
        Therefore, it is essential to check the values retrieved from this call if there are any
        newer values already recieved. For example, since sensor values will be emitted immediately
        upon subscription (data channel actuator) those might be newer than the retrieved from the
        telemetry service.
        </p>
      operationId: getInitialData
      parameters:
        - $ref: '#/components/parameters/uuid'
      requestBody:
        description: An object to control which data and config gets populated. In addition which events and alarms to subscribe to (if any). It is also possible to avoid real-time (5s) and 5m sensor data subscriptions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitialDataRequest'
        required: true
      responses:
        '200':
          description: 'A initial dataset of both static, and operational data such as events, alarms sensor data, operational values of dynamic configuration.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitialDataResponse'
        '400':
          description: Malformed query
          content: {}
        '401':
          description: Missing authorization token
          content: {}
        '403':
          description: Not allowed to perform the query.
          content: {}
      security:
        - BlueairAuth: []
      x-amazon-apigateway-integration:
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InitialConfigApiFunction.Arn}/invocations'
        responses: {}
        httpMethod: POST
        type: aws_proxy
      x-amazon-apigateway-request-validators:
        params-only:
          validateRequestBody: false
          validateRequestParameters: true
  '/c/{uuid}/r/telemetry/{res}/historical':
    get:
      tags:
        - red-api
      summary: This API is using the blue SenML telemetry API to create a more compact BAF friendly response.
      description: 'This API requires the caller to specify which sensors to get historical data. It diviates from the more generic SenML format to present a fixed view for Blueair Friend Application and therefore gives the ability to compress the JSON output instead of using SenML and CBOR on the telemetry service blue SenML API (that would probably result in even smaller result-set). If the _from_ and _to_ parameters is omitted, all 5min data for each device id is returned.'
      operationId: getHistoricalTelemetryData
      parameters:
        - $ref: '#/components/parameters/uuid'
        - $ref: '#/components/parameters/res'
        - $ref: '#/components/parameters/did'
        - $ref: '#/components/parameters/s'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      responses:
        '200':
          description: The resultset depending on the query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoricalTelemetryDataResponse'
        '400':
          description: Malformed query
          content: {}
        '401':
          description: Missing authorization token
          content: {}
        '403':
          description: Not allowed to perform the query.
          content: {}
      security:
        - BlueairAuth: []
      x-amazon-apigateway-integration:
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TelemetryApiFunction.Arn}/invocations'
        responses: {}
        httpMethod: POST
        type: aws_proxy
      x-amazon-apigateway-request-validators:
        params-only:
          validateRequestBody: false
          validateRequestParameters: true
components:
  parameters:
    from:
      in: query
      name: from
      description: 'A optional from, equal or greater than, date time.'
      example: '2017-07-21T17:32:28Z'
      required: false
      schema:
        type: string
        format: date-time
    to:
      in: query
      name: to
      description: 'A optional to, equal or less, date time.'
      example: '2018-07-21T17:32:28Z'
      required: false
      schema:
        type: string
        format: date-time
    res:
      in: path
      name: res
      description: The resolution of the result
      example: 5m
      required: true
      schema:
        type: string
        enum:
          - 5m
          - 1h
          - 1d
          - 1w
          - 1m
          - 1y
    uuid:
      in: path
      name: uuid
      description: The application UUID.
      schema:
        type: string
        format: uuid
        example: aaffd52a-a4a2-42e4-ba95-bcccf068b323
      required: true
    s:
      in: query
      name: s
      description: A set of sensor id to specify which sensor values to address. This is retrieved by the device `CmConfig` object where it exposes all its supported `Sensor`(s).
      required: false
      schema:
        type: array
        example:
          - fsp
          - pm2.1
          - tvoc
        items:
          type: string
    did:
      in: query
      name: did
      description: A set of device id to specify which devices.
      required: false
      schema:
        type: array
        example:
          - 9707d52a-a4a2-42e4-ba95-bcccf068b323
        items:
          type: string
          format: uuid
  schemas:
    HwTarget:
      type: string
      description: The hardware identifier for e.g. a Wi-Fi chipset firmware.
      enum:
        - HF-LPB100-1
        - HF-LPB130-1
        - ESP32-WROOM-32
        - ESP32-WROOM-32D
        - ESP32-WROOM-32U
        - ESP32-WROOM-SOLO-1
        - STM32F412-VET6
        - STM32F030-C8
        - STM32F030-R8
        - InitialConfig
        - InitialConfig+Current
        - InitialConfigCandidate
        - CurrentConfig
        - CandidateConfig
      example: STM32F030-R8
    Signature:
      type: object
      description: 'A signature that contains a hash, algorithm, and possibly a hint of what secret key / public key to use when verifying the signature.'
      properties:
        sig:
          type: string
          example: MEQCIAbc83zqClQUz8IIjVcYsCFH1klAZGdSYnaNc9FVZjauAiBKi4NRgi/SWkyIgPXakqu7/VPSsktY1q4v698JPpN4zw==
          description: 'The signature hash. This is produced by, for example, AWS signer. This hash is encrypted by the private key. Thus, the entity needs the corresponding publik key to verify that the signature is created by a trusted source. The latter is dependant on the `salg` used, if only e.g. `SHA256` is used no private key was used to encrypt this property and thus cannot be authenticated.'
        salg:
          type: string
          enum:
            - SHA256
            - HMACSHA256
            - SHA256withECDSA
          description: 'The signatre algortihm used when creating the `sig` hash. Default (if not specified) is `SHA256`. If other algorithm it must be provided. <table> <td> <tr>Algorithm</tr> <tr>Description</tr> </td> <td> <tr>SHA256</tr> <tr> The signature is a plain SHA256 hash without any encryption and thus the authenticy of the hash cannot be verified! This can be used to determine if anything has changed etc. but not verify that the payload can be trusted or not. </tr> </td> <td> <tr>HMACSHA256</tr> <tr> Same as SHA256 but uses a pre shared key (secret key) to create a hash that may be authenticated. This algorithm is defined in [RFC4868](https://tools.ietf.org/html/rfc4868) as specified HMAC-SHA-256-128. Therefore it uses 256 bits of the pre-shared key. If the key is too short it should repeat the key until 256 bits otherwise truncate to 256 bits. </tr> </td> <td> <tr>SHA256withECDSA</tr> <tr> The signature is a plain SHA256 hash that has been encrypted using a eliptic curve certificate possibley hinted in the `hint` property. This signature can be verified and therefore the hash can be trusted to be produced by a trusted source. </tr> </td> </table>'
          example: SHA256withECDSA
        hint:
          type: string
          example: ota-cert
          description: An optional hint such a filename or id where the verifier knows which public key to use when calculating the signature.
      required:
        - sig
      xml:
        name: signature
    Version:
      type: string
      pattern: '^(\d+\.\d+\.\d+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?$'
      example: 1.0.0.SNAPSHOT
      description: 'The version specified as a [SemVer](https://semver.org/)'
    Region:
      type: string
      pattern: '^[A-Z]{2,4}-[A-Z]{2}$'
      example: EU-SE
      description: 'A region consists of a arbitary region such as EU, APAC and a country. It is on the following format Region_Country. Country is in two-digit format as specified in [ISO3166-1](https://en.wikipedia.org/wiki/ISO_3166-1). The allowed regions are EU, US, APAC, ME, CN.'''
    DateTimeTZ:
      type: string
      format: date-time
      example: '2017-07-21T17:32:28Z+02'
      description: 'The date and time including optional timezone as specified in [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).'
    DataUnit:
      type: string
      example: 1/min
      enum:
        - m
        - kg
        - g
        - s
        - A
        - K
        - cd
        - mol
        - Hz
        - rad
        - sr
        - 'N'
        - Pa
        - J
        - W
        - C
        - V
        - F
        - Ohm
        - Wb
        - T
        - H
        - Cel
        - lm
        - lx
        - Bq
        - Gy
        - Sv
        - kat
        - m2
        - m3
        - l
        - m/s
        - m/s2
        - m3/s
        - l/s
        - W/m2
        - cd/m2
        - bit
        - bit/s
        - lat
        - lon
        - pH
        - dB
        - dBW
        - dBm
        - Bspl
        - count
        - /
        - '%'
        - '%RH'
        - '%EL'
        - EL
        - 1/s
        - 1/min
        - beat/min
        - beats
        - S/m
        - ms
        - ppb
        - ppm
        - ug/m3
        - kb
      description: |
        Standard units from SenML specification, [chapter 12.1](https://tools.ietf.org/html/rfc8428#section-12.1).
        <table>
          <tr>
            <td>Symbol</td>
            <td>Description</td>
            <td>Type</td>
          </tr>
          <tr>
            <td>m</td>
            <td>meter</td>
            <td>float</td>
          </tr>
          <tr>
            <td>kg</td>
            <td>kilogram</td>
            <td>float</td>
          </tr>
          <tr>
            <td>g</td>
            <td>gram</td>
            <td>float</td>
          </tr>
          <tr>
            <td>s</td>
            <td>second</td>
            <td>float</td>
          </tr>
          <tr>
            <td>A</td>
            <td>ampere</td>
            <td>float</td>
          </tr>
          <tr>
            <td>K</td>
            <td>kelvin</td>
            <td>float</td>
          </tr>
          <tr>
            <td>cd</td>
            <td>candela</td>
            <td>float</td>
          </tr>
          <tr>
            <td>mol</td>
            <td>mole</td>
            <td>float</td>
          </tr>
          <tr>
            <td>Hz</td>
            <td>hertz</td>
            <td>float</td>
          </tr>
          <tr>
            <td>rad</td>
            <td>radian</td>
            <td>float</td>
          </tr>
          <tr>
            <td>sr</td>
            <td>steradian</td>
            <td>float</td>
          </tr>
          <tr>
            <td>N</td>
            <td>newton</td>
            <td>float</td>
          </tr>
          <tr>
            <td>Pa</td>
            <td>pascal</td>
            <td>float</td>
          </tr>
          <tr>
            <td>J</td>
            <td>joule</td>
            <td>float</td>
          </tr>
          <tr>
            <td>W</td>
            <td>watt</td>
            <td>float</td>
          </tr>
          <tr>
            <td>C</td>
            <td>coulomb</td>
            <td>float</td>
          </tr>
          <tr>
            <td>V</td>
            <td>volt</td>
            <td>float</td>
          </tr>
          <tr>
            <td>F</td>
            <td>farad</td>
            <td>float</td>
          </tr>
          <tr>
            <td>Ohm</td>
            <td>ohm</td>
            <td>float</td>
          </tr>
          <tr>
            <td>Wb</td>
            <td>weber</td>
            <td>float</td>
          </tr>
          <tr>
            <td>T</td>
            <td>tesla</td>
            <td>float</td>
          </tr>
          <tr>
            <td>H</td>
            <td>henry</td>
            <td>float</td>
          </tr>
          <tr>
            <td>Cel</td>
            <td>degrees Celsius</td>
            <td>float</td>
          </tr>
          <tr>
            <td>lm</td>
            <td>lumen</td>
            <td>float</td>
          </tr>
          <tr>
            <td>lx</td>
            <td>lux</td>
            <td>float</td>
          </tr>
          <tr>
            <td>Bq</td>
            <td>becquerel</td>
            <td>float</td>
          </tr>
          <tr>
            <td>Gy</td>
            <td>gray</td>
            <td>float</td>
          </tr>
          <tr>
            <td>Sv</td>
            <td>sievert</td>
            <td>float</td>
          </tr>
          <tr>
            <td>kat</td>
            <td>katal</td>
            <td>float</td>
          </tr>
          <tr>
            <td>m2</td>
            <td>square meter (area)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>m3</td>
            <td>cubic meter (volume)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>l</td>
            <td>liter (volume)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>m/s</td>
            <td>meter per second (velocity)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>m/s2</td>
            <td>meter per square second (acceleration)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>m3/s</td>
            <td>cubic meter per second (flow rate)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>l/s</td>
            <td>liter per second (flow rate)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>W/m2</td>
            <td>watt per square meter (irradiance)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>cd/m2</td>
            <td>candela per square meter (luminance)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>bit</td>
            <td>bit (information content)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>bit/s</td>
            <td>bit per second (data rate)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>lat</td>
            <td>degrees latitude (Note 1)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>lon</td>
            <td>degrees longitude (Note 1)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>pH</td>
            <td>pH value (acidity; logarithmic quantity)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>dB</td>
            <td>decibel (logarithmic quantity)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>dBW</td>
            <td>decibel relative to 1 W (power level)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>dBm</td>
            <td>
              Decibel-milliwatts (decibels with reference to one milliwatt).
              https://en.wikipedia.org/wiki/DBm
            </td>
            <td>float</td>
          </tr>
          <tr>
            <td>Bspl</td>
            <td>bel (sound pressure level; logarithmic quantity)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>count</td>
            <td>1 (counter value)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>/</td>
            <td>1 (ratio, e.g., value of a switch; Note 2)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>%</td>
            <td>1 (ratio, e.g., value of a switch; Note 2)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>%RH</td>
            <td>percentage (relative humidity)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>%EL</td>
            <td>percentage (remaining batter energy level)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>EL</td>
            <td>seconds (remaining battery energy level)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>1/s</td>
            <td>1 per second (event rate)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>1/min</td>
            <td>1 per minute (event rate, "rpm")</td>
            <td>float</td>
          </tr>
          <tr>
            <td>beat/min</td>
            <td>1 per minute (heart rate in beats per minute)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>beats</td>
            <td>1 (cumulative number of heart beats)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>S/m</td>
            <td>siemens per meter (conductivity)</td>
            <td>float</td>
          </tr>
          <tr>
            <td>[extended] ms</td>
            <td>Milliseconds, usually a 64 or 32 bit unix timestamp.</td>
            <td>int64</td>
          </tr>
          <tr>
            <td>[extended] ppb</td>
            <td>Parts per billion, usually voc or tvoc measurement.</td>
            <td>float</td>
          </tr>
          <tr>
            <td>[extended] ppm</td>
            <td>Parts per million, usually co2 measurement.</td>
            <td>float</td>
          </tr>
          <tr>
            <td>[extended] ug/m3</td>
            <td>the amount of particles per qubic meter. Usually PM (particle) measurements.</td>
            <td>float</td>
          </tr>
          <tr>
            <td>[extended] kb</td>
            <td>Number of kilo bytes, e.g. free memory.</td>
            <td>float</td>
          </tr>
        </table>
        <ol>
          <li>
            Note 1 - Assumed to be in World Geodetic System 1984 (WGS84), unless another reference frame is known for the sensor
          </li>
          <li>
            Note 2 - A value of 0.0 indicates the switch is off, 1.0 indicates
            on, and 0.5 indicates half on.  The preferred name of this unit is
            "/".  For historical reasons, the name "%" is also provided for
            the same unit, but note that while that name strongly suggests a
            percentage (0..100), it is NOT a percentage but the absolute
            ratio!
          </li>
        </ol>

        CBOR Label is 1 (u field)
    Coordinate:
      type: object
      description: 'A coordinate where 0,0 is left-bottom. It also has an optional shape for e.g. detection range.'
      properties:
        x:
          type: number
          format: float
          example: 1
          description: The x point
        'y':
          type: number
          format: float
          example: 1
          description: The y point
        shape:
          type: string
          enum:
            - Rectangle
            - Elipsis
            - Circle
        sx:
          type: number
          format: float
          example: 10.2
          description: Either radius if circle or x size of the shape
        sy:
          type: number
          format: float
          example: 1.2
          description: The y size of the shape
      required:
        - x
        - 'y'
    ResourceIdentifier:
      type: string
      format: uri
      example: 'r://018b1067-37bb-47e8-b837-e1d6c61b6fbd/fans/0/speed-actuator'
      description: |-
        This is a complete identifier for a resource. The resource identifier is on the following format. r://uuid/sub1/sub2 where sub stands for resource specific sub identifiers. This is used to determine which exact resource in a global perspective. The resource identifiers may be used in app, client, device, or service.
        For example to identify a fan speed actuator in a purifier the following scheme is realised. r://018b1067-37bb-47e8-b837-e1d6c61b6fbd/fans/0/speed-actuator.
    MQTTTopic:
      type: string
      pattern: '([\w\.\-\$]+(\/[\w\.\-\$]+)*)'
      example: /my/topic/+/sensors/fan0
      description: Describes a valid MQTT topic.
    Serial:
      type: string
      pattern: '^[0-9]{6}-[0-9]{3}-[0-9]{3}-[0-9]{1}-[0-9]{2}-[0-9]{1}-[0-9]{7}$'
      example: 012345-012-012-0-01-0-0123456
      description: This is Johan and Joakim serial number format as a OpenAPI type. It is based on. 1) Item Number (3) 2) Revision (3) 3) Manufacturer (3) 4) Manufacturer Plant (1) 5) Production Line (2) 6) Station (1) 4) Running Number (7)
    SKU:
      type: string
      pattern: '^[0-9]{6}$'
      example: '012345'
      description: This is Johan SKU definition.
    SSID:
      type: string
      maxLength: 31
      minLength: 1
      example: MYHOMENETWORK
      description: The connecting to / using SSID for the application or device.
    BSSID:
      type: string
      pattern: '^([[:xdigit:]]{2}[:.-]?){5}[[:xdigit:]]{2}$'
      example: '3D:F2:C9:A6:B3:4F'
      description: The mac address of the Wi-Fi router
    RSSI:
      type: integer
      format: int32
      example: -67
      maximum: -30
      minimum: -100
      description: dBm - The power level in mW (milli watts).
    WiFiAuth:
      type: string
      enum:
        - Open
        - WPA
        - WPA+AES
        - WPA+TKIP
        - WPA+TKIP/AES
        - WPA2
        - WPA3
      example: WPA2
      description: The authentication mode supported by the network
    IPV4Config:
      type: object
      properties:
        ip:
          type: string
          format: ipv4
          example: 192.168.1.17
        gw:
          type: string
          format: ipv4
          example: 192.168.1.17
        dns:
          type: array
          items:
            type: string
            format: ipv4
            example: 192.168.1.17
      required:
        - ip
    IPV6Config:
      type: object
      properties:
        ip:
          type: string
          format: ipv6
          example: '2001:0db8:85a3:0000:0000:8a2e:0370:7334'
        gw:
          type: string
          format: ipv6
          example: '2001:0db8:85a3:0000:0000:8a2e:0370:7334'
        dns:
          type: array
          items:
            type: string
            format: ipv6
            example: '2001:0db8:85a3:0000:0000:8a2e:0370:7334'
      required:
        - ip
    UUIDItem:
      type: object
      description: A device UUID and its IP. It may be either ipv4 or ipv6 (or both).
      properties:
        uuid:
          type: string
          format: uuid
          example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
        ssid:
          type: string
          maxLength: 31
          minLength: 1
          example: MYHOMENETWORK
          description: The SSID that the device is using when bound to corresponding IP.
        bssid:
          type: string
          pattern: '^([[:xdigit:]]{2}[:.-]?){5}[[:xdigit:]]{2}$'
          example: '3D:F2:C9:A6:B3:4F'
          description: The mac address of the Wi-Fi router ssid
        ipv4:
          $ref: '#/components/schemas/IPV4Config'
        ipv6:
          $ref: '#/components/schemas/IPV6Config'
      required:
        - uuid
      xml:
        name: uuid-comm-config
    SoftAP:
      type: object
      description: A soft ap metadata used for query and setting of properties. When set only non readonly properties may be included. In addition only specify the properties to be set. The non existant ones are ignored. In a get operation the access-point should return all properties.
      properties:
        ssid:
          type: string
          maxLength: 31
          minLength: 1
          example: MYHOMENETWORK
          description: The SSID currently beaconed or to be set on the AP.
        bands:
          description: A comma separated MHz values for supported frequencies `Read-Only`.
          type: array
          items:
            type: string
            pattern: '^\d+(,\d+)*$'
            example: 2412
        password:
          type: string
          example: MyWiFiPassword8!
          description: 'The password for binding to the _SSID_, `Write-Only`.'
        channel:
          type: integer
          format: int32
          example: 6
          maximum: 196
          minimum: 0
          description: 'The [channel](https://en.wikipedia.org/wiki/List_of_WLAN_channels) used or should bind to. The most common in the world is channel 6. When 2.4Gz 1 - 14 is only valid. Zero means `auto-mode`.'
        bssid:
          type: string
          pattern: '^([[:xdigit:]]{2}[:.-]?){5}[[:xdigit:]]{2}$'
          example: '3D:F2:C9:A6:B3:4F'
          description: The mac address of the Wi-Fi access point `Read-Only`.
        auth:
          type: string
          enum:
            - Open
            - WPA
            - WPA+AES
            - WPA+TKIP
            - WPA+TKIP/AES
            - WPA2
            - WPA3
          example: WPA2
          description: The authentication mode currently set or to be set in the acess-point.
        enabled:
          type: boolean
          example: true
          description: Determines or sets the access point on or off.
    SSIDNetwork:
      type: object
      description: A SSID and optional RSSI entry
      properties:
        ssid:
          $ref: '#/components/schemas/SSID'
        bssid:
          $ref: '#/components/schemas/BSSID'
        rssi:
          $ref: '#/components/schemas/RSSI'
        auth:
          $ref: '#/components/schemas/WiFiAuth'
        r:
          $ref: '#/components/schemas/Region'
      required:
        - ssid
    IpV4IpV6Config:
      type: object
      properties:
        ipv4:
          $ref: '#/components/schemas/IPV4Config'
        ipv6:
          $ref: '#/components/schemas/IPV6Config'
    SenMLBaseName:
      type: string
      description: |-
        This is a prefix on Name (`n` field) in a payload. This is used to shorten the name field and thus take less space.
        CBOR Label is -2
      example: 'urn:dev:ow:10e2073a01080063:'
    SenMLBaseTime:
      type: number
      format: double
      example: 1320078429
      description: |-
        The Base Time and Time values are added together to get a value representing the time of measurement.
        CBOR Label is -3
    SenMLBaseValue:
      type: number
      format: double
      example: '77.16'
      description: |-
        If the Base Value or Value is not present, the missing field(s) is considered to have a value of zero.  The Base Value and Value are added together to get the value of the measurement.
        CBOR Label is -5
    SenMLBaseSum:
      type: number
      format: double
      example: 77.12
      description: 'A base sum is added to the sum found in an entry, similar to Base Time. CBOR Label is -6'
    SenMLBaseVersion:
      type: integer
      format: int32
      example: 5
      description: |-
        Version number of the media type format.  This field is an optional positive integer and defaults to 10 if not present.
        CBOR Label is -1
    SenMLName:
      type: string
      example: fanspeed
      description: |
        <p>
        Name of the sensor / actuator or actuator parameter.
        The Name value is concatenated to the Base Name value to yield the
        name of the sensor.  The resulting concatenated name needs to
        uniquely identify and differentiate the sensor from all others.  The
        concatenated name MUST consist only of characters out of the set "A"
        to "Z", "a" to "z", and "0" to "9", as well as "-", ":", ".", "/",
        and "_"; furthermore, it MUST start with a character out of the set
        "A" to "Z", "a" to "z", or "0" to "9".  This restricted character set
        was chosen so that concatenated names can be used directly within
        various URI schemes (including segments of an HTTP path with no
        special encoding; note that a name that contains "/" characters maps
        into multiple URI path segments) and can be used directly in many
        databases and analytic systems.  [RFC5952](https://tools.ietf.org/html/rfc5952) 
        contains advice on encoding an IPv6 address in a name.  See 
        [Section 14](https://tools.ietf.org/html/rfc8428#section-14) for 
        privacy considerations that apply to the use of long-term stable unique
        identifiers.</p>
        <p>
        Although it is RECOMMENDED that concatenated names be represented as
        URIs [RFC3986](https://tools.ietf.org/html/rfc3986) or URNs 
        [RFC8141](https://tools.ietf.org/html/rfc8141), the restricted character set
        specified above puts strict limits on the URI schemes and URN
        namespaces that can be used.  As a result, implementers need to take
        care in choosing the naming scheme for concatenated names, because
        such names both need to be unique and need to conform to the
        restricted character set.  One approach is to include a bit string
        that has guaranteed uniqueness (such as a 1-wire address 
        [AN1796](https://tools.ietf.org/html/rfc8428#ref-AN1796)).
        Some of the examples within this document use the device URN
        namespace as specified in [DEVICE-URN](https://tools.ietf.org/html/rfc8428#ref-DEVICE-URN).  
        niversally Unique Identifiers (UUIDs) [RFC4122](https://tools.ietf.org/html/rfc4122) 
        are another way to generate a unique name.  However, the restricted 
        character set does not allow the use of many URI schemes, such as 
        the "tag" scheme [RFC4151](https://tools.ietf.org/html/rfc4151) and 
        the "ni" scheme [RFC6920](https://tools.ietf.org/html/rfc6920), in 
        names as such.  The use of URIs with characters incompatible with 
        this set and possible mapping rules between the two are outside 
        the scope of the present document.</p>

        <p><em>CBOR Label is 0</em></p>   
    SenMLValue:
      type: number
      format: double
      example: 10
      description: |
        <p>
        If only one of the Base Sum or Sum value is present, the missing
        field is considered to have a value of zero.  The Base Sum and Sum
        values are added together to get the sum of measurement.  If neither
        the Base Sum nor the Sum is present, then the measurement does not
        have a Sum value.</p>
        <p>
        If the Base Value or Value is not present, the missing field(s) is
        considered to have a value of zero.  The Base Value and Value are
        added together to get the value of the measurement.</p>
        <p>
        Representing the statistical characteristics of measurements, such as
        accuracy, can be very complex.  Future specification may add new
        fields to provide better information about the statistical properties
        of the measurement.</p>
        <p>
        In summary, the structure of a SenML Record is laid out to support a
        single measurement per Record.  If multiple data values are measured
        at the same time (e.g., air pressure and altitude), they are best
        kept as separate Records linked through their Time value; this is
        even true when one of the data values is more "meta" than others
        (e.g., describes a condition that influences other measurements at
        the same time).</p>

        <p><em>CBOR Label is 2</em></p>
    SenMLStringValue:
      type: string
      example: my string
      description: |
        <p>
        If only one of the Base Sum or Sum value is present, the missing
        field is considered to have a value of zero.  The Base Sum and Sum
        values are added together to get the sum of measurement.  If neither
        the Base Sum nor the Sum is present, then the measurement does not
        have a Sum value.</p>
        <p>
        If the Base Value or Value is not present, the missing field(s) is
        considered to have a value of zero.  The Base Value and Value are
        added together to get the value of the measurement.</p>
        <p>
        Representing the statistical characteristics of measurements, such as
        accuracy, can be very complex.  Future specification may add new
        fields to provide better information about the statistical properties
        of the measurement.</p>
        <p>
        In summary, the structure of a SenML Record is laid out to support a
        single measurement per Record.  If multiple data values are measured
        at the same time (e.g., air pressure and altitude), they are best
        kept as separate Records linked through their Time value; this is
        even true when one of the data values is more "meta" than others
        (e.g., describes a condition that influences other measurements at
        the same time).</p>

        <p><em>CBOR Label is 3</em></p>
    SenMLBoolValue:
      type: boolean
      example: true
      description: |
        <p>
        If only one of the Base Sum or Sum value is present, the missing
        field is considered to have a value of zero.  The Base Sum and Sum
        values are added together to get the sum of measurement.  If neither
        the Base Sum nor the Sum is present, then the measurement does not
        have a Sum value.</p>
        <p>
        If the Base Value or Value is not present, the missing field(s) is
        considered to have a value of zero.  The Base Value and Value are
        added together to get the value of the measurement.</p>
        <p>
        Representing the statistical characteristics of measurements, such as
        accuracy, can be very complex.  Future specification may add new
        fields to provide better information about the statistical properties
        of the measurement.</p>§
        <p>
        In summary, the structure of a SenML Record is laid out to support a
        single measurement per Record.  If multiple data values are measured
        at the same time (e.g., air pressure and altitude), they are best
        kept as separate Records linked through their Time value; this is
        even true when one of the data values is more "meta" than others
        (e.g., describes a condition that influences other measurements at
        the same time).</p>
        <p><em>CBOR Label is 3</em></p>
    SenMLDataValue:
      type: string
      example: aGVqIHDDpSBkaWc=
      description: |
        <p>
        If only one of the Base Sum or Sum value is present, the missing
        field is considered to have a value of zero.  The Base Sum and Sum
        values are added together to get the sum of measurement.  If neither
        the Base Sum nor the Sum is present, then the measurement does not
        have a Sum value.</p>
        <p>
        If the Base Value or Value is not present, the missing field(s) is
        considered to have a value of zero.  The Base Value and Value are
        added together to get the value of the measurement.</p>
        <p>
        Representing the statistical characteristics of measurements, such as
        accuracy, can be very complex.  Future specification may add new
        fields to provide better information about the statistical properties
        of the measurement.</p>
        <p>
        In summary, the structure of a SenML Record is laid out to support a
        single measurement per Record.  If multiple data values are measured
        at the same time (e.g., air pressure and altitude), they are best
        kept as separate Records linked through their Time value; this is
        even true when one of the data values is more "meta" than others
        (e.g., describes a condition that influences other measurements at
        the same time).</p>
        <p>
        Data Value is a base64-encoded string with the URL-safe alphabet
        as defined in Section 5 of [RFC4648](https://tools.ietf.org/html/rfc4648#section-5), 
        with padding omitted.  (In CBOR, the octets in the Data Value are 
        encoded using a definite-length byte string, major type 2.)</p>
        <p><em>CBOR Label is 8</em></p>
    SenMLSum:
      type: number
      format: double
      example: 177.92
      description: |-
        Integrated sum of the values over time.  Optional.  This field is in the unit specified in the Unit value multiplied by seconds. For historical reasons, it is named "sum" instead of "integral".
        CBOR Label is 5
    SenMLTime:
      type: number
      format: double
      example: 1320078429
      description: |
        <p>
        If either the Base Time or Time value is missing, the missing field
        is considered to have a value of zero.  The Base Time and Time values
        are added together to get a value representing the time of
        measurement.</p>
        <p>
        Values less than 268,435,456 (2**28) represent time relative to the
        current time.  That is, a time of zero indicates that the sensor does
        not know the absolute time and the measurement was made roughly
        "now".  A negative value indicates seconds in the past from roughly
        "now".  Positive values up to 2**28 indicate seconds in the future
        from "now".  An example for employing positive values would be
        actuation use, when the desired change should happen in the future,
        but the sender or the receiver does not have accurate time available.</p>
        <p>
        Values greater than or equal to 2**28 represent an absolute time
        relative to the Unix epoch (1970-01-01T00:00Z in UTC time), and the
        time is counted the same way as the Portable Operating System
        Interface (POSIX) "seconds since the epoch" [TIME_T].  Therefore, the
        smallest absolute Time value that can be expressed (2**28) is
        1978-07-04 21:24:16 UTC.</p>
        <p>
        Because Time values up to 2**28 are used for representing time
        relative to "now" and Time and Base Time are added together, care
        must be taken to ensure that the sum does not inadvertently reach
        2**28 (i.e., absolute time) when relative time was intended to be
        used.</p>
        <p>
        Obviously, SenML Records referenced to "now" are only useful within a
        specific communication context (e.g., based on information on when
        the SenML Pack, or a specific Record in a SenSML Stream, was sent) or
        together with some other context information that can be used for
        deriving a meaning of "now"; the expectation for any archival use is
        that they will be processed into UTC-referenced records before that
        context would cease to be available.  This specification deliberately
        leaves the accuracy of "now" very vague as it is determined by the
        overall systems that use SenML.  In a system where a sensor without
        wall-clock time sends a SenML Record with a time referenced to "now"
        over a high-speed RS-485 link to an embedded system with accurate
        time that resolves "now" based on the time of reception, the
        resulting time uncertainty could be within 1 ms.  At the other
        extreme, a deployment that sends SenML wind-speed readings over a
        Low-Earth Orbit (LEO) satellite link from a mountain valley might
        have resulting reception Time values that are easily a dozen minutes
        off the actual time of the sensor reading, with the time uncertainty
        depending on satellite locations and conditions.</p>

        <p><em>CBOR Label is 6</em><p>
    SenMLUpdateTime:
      type: number
      format: double
      example: 11
      description: |-
        Period of time in seconds that represents the maximum time before this sensor will provide an updated reading for a measurement.  Optional.  This can be used to detect the failure of sensors or the communications path from the sensor.
        CBOR Label is 7
    SenMLActuationResponseEntry:
      type: object
      description: |-
        A response entry for a SenML actuation. It responds using SenML syntax. Where each sensor or SenML parameter entry is reflected back with a [HTTP status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes).
        The client may check each individual to get the result of the actuation. The optional `t`ime can be used to determin when the actuation did occur. It may have one or more virtual sensors if e.g. client cookie is provided then it is returned as a value under the name `urn:senml:cc` and the property `vs` is set as the input provided client cookie.
        This is for asynchrnonous APIs where responses are either polled or recieved asynchrnously e.g. via `MQTT` or `WebSocket`. Other means of providing this is allowed such as a `HTTP` header or alike.
      properties:
        'n':
          $ref: '#/components/schemas/SenMLName'
        v:
          $ref: '#/components/schemas/SenMLValue'
        bn:
          $ref: '#/components/schemas/SenMLBaseName'
        bver:
          $ref: '#/components/schemas/SenMLBaseVersion'
        t:
          $ref: '#/components/schemas/SenMLTime'
      required:
        - 'n'
        - v
      xml:
        name: senml
    SenMLRequestEntry:
      type: object
      description: |-
        A single entry to adress one sensor or data element in a request or subscription. It follows the SenML semantics so a `bn` may be provided to prefix the `n` element and so on. Since this is a request entry all parameters are criterion to enable sensor readings and narrow the resultset. All are optional except for the `n` element. It is also possible to use this request to query historical data using a time reference acting as from time.
        This request should use the SenML defined mimetypes such as `application/senml+json`.
      properties:
        bn:
          $ref: '#/components/schemas/SenMLBaseName'
        bt:
          $ref: '#/components/schemas/SenMLBaseTime'
        bver:
          $ref: '#/components/schemas/SenMLBaseVersion'
        'n':
          $ref: '#/components/schemas/SenMLName'
        t:
          $ref: '#/components/schemas/SenMLTime'
        ut:
          $ref: '#/components/schemas/SenMLUpdateTime'
      required:
        - 'n'
      xml:
        name: senml
    SenMLEntry:
      type: object
      description: 'A entry of [SenML](https://tools.ietf.org/html/rfc8428) data. <p> Connecting sensors to the Internet is not new, and there have been many protocols designed to facilitate it.  This specification defines a format and media types for carrying simple sensor information in protocols such as HTTP [RFC7230](https://tools.ietf.org/html/rfc7230) or CoAP [RFC7252](https://tools.ietf.org/html/rfc7252).  The SenML format is designed so that processors with very limited capabilities could easily encode a sensor measurement into the media type, while at the same time, a server parsing the data could collect a large number of sensor measurements in a relatively efficient manner.  SenML can be used for a variety of data flow models, most notably data feeds pushed from a sensor to a collector, and for the web resource model where the sensor data is requested as a resource representation (e.g., "GET /sensor/temperature").</p> <p> There are many types of more complex measurements and measurements that this media type would not be suitable for.  SenML strikes a balance between having some information about the sensor carried with the sensor data so that the data is self-describing, but it also tries to make that a fairly minimal set of auxiliary information for efficiency reasons.  Other information about the sensor can be discovered by other methods such as using the Constrained RESTful Environments (CoRE) Link Format [RFC6690](https://tools.ietf.org/html/rfc6690). </p><p> SenML is defined by a data model for measurements and simple metadata about measurements and devices.  The data is structured as a single array that contains a series of SenML Records that can each contain fields such as a unique identifier for the sensor, the time the measurement was made, the unit the measurement is in, and the current value of the sensor.  Serializations for this data model are defined for JSON [RFC8259](https://tools.ietf.org/html/rfc8259), CBOR [RFC7049](https://tools.ietf.org/html/rfc7049), XML [W3C.REC-xml-20081126](https://tools.ietf.org/html/rfc8428#ref-W3C.REC-xml-20081126), and Efficient XML Interchange (EXI) [W3C.REC-exi-20140211](https://tools.ietf.org/html/rfc8428#ref-W3C.REC-exi-20140211). </p><p> For example, the following shows a measurement from a temperature gauge encoded in the JSON syntax.</p> <p><ul style="list-style-type:none"><li> [ {"n":"urn:dev:ow:10e2073a01080063","u":"Cel","v":23.1} ]</li></ul></p> <p> In the example above, the array has a single SenML Record with a measurement for a sensor named "urn:dev:ow:10e2073a01080063" with a current value of 23.1 degrees Celsius.</p> <p> The design goal is to be able to send simple sensor measurements in small packets from large numbers of constrained devices.  Keeping the total size of the payload small makes it easy to also use SenML in constrained networks, e.g., in an IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) [RFC4944].  It is always difficult to define what small code is, but there is a desire to be able to implement this in roughly 1 KB of flash on an 8-bit microprocessor. Experience with power meters and other large-scale deployments has indicated that the solution needs to support allowing multiple measurements to be batched into a single HTTP or CoAP request.  This "batch" upload capability allows the server side to efficiently support a large number of devices.  It also conveniently supports batch transfers from proxies and storage devices, even in situations where the sensor itself sends just a single data item at a time.  The multiple measurements could be from multiple related sensors or from the same sensor but at different times.</p> <p> The basic design is an array with a series of measurements.  The following example shows two measurements made at different times. The value of a measurement is given by the "v" field, the time of a measurement is in the "t" field, the "n" field has a unique sensor name, and the unit of the measurement is carried in the "u" field.</p> <p><ul style="list-style-type:none"><li> [ {"n":"urn:dev:ow:10e2073a01080063","u":"Cel","t":1.276020076e+09, "v":23.5}, {"n":"urn:dev:ow:10e2073a01080063","u":"Cel","t":1.276020091e+09, "v":23.6} ]</li></ul></p> <p> To keep the messages small, it does not make sense to repeat the "n" field in each SenML Record, so there is a concept of a Base Name, which is simply a string that is prepended to the Name field of all elements in that Record and any Records that follow it.  So, a more compact form of the example above is the following.</p> <p><ul style="list-style-type:none"><li> [ {"bn":"urn:dev:ow:10e2073a01080063","u":"Cel","t":1.276020076e+09, "v":23.5}, {"u":"Cel","t":1.276020091e+09, "v":23.6} ]</li></ul></p> <p> In the above example, the Base Name is in the "bn" field, and the "n" fields in each Record are empty strings, so they are omitted.</p> <p> Some devices have accurate time while others do not, so SenML supports absolute and relative times.  Time is represented in floating point as seconds.  Values greater than or equal to 2**28 represent an absolute time relative to the Unix epoch.  Values less than 2**28 represent time relative to the current time.</p> <p> A simple sensor with no absolute wall-clock time might take a measurement every second, batch up 60 of them, and then send the batch to a server.  It would include the relative time each measurement was made compared to the time the batch was sent in each SenML Record.  If the server has accurate time based on, e.g., the Network Time Protocol (NTP), it may use the time it received the data and the relative offset to replace the times in the SenML with absolute times before saving the SenML information in a document database.</p> <p> Virtual SenML values is provided under the base name `urn:senml:cc`. Recievers may choose to ignore or have other transport mechanism for those SenML value. For example HTTP the AT is transported in the `Authorization` HTTP header instead. <ul style="list-style-type:none"> <li> cc - where the client cookie is either provided or returned in a request operation. It transported in the `vs` property. </li> <li> at - This is a OAuth 2 access token or Open Id Connect token that authorizes the request. This is common in protocols that cannot bear a header. When it is a OIDC token, the request is authorized and authenticated at the same time where as the standard OAuth 2 AT is just for authorization. It transported in the `vs` property. </li> </ul> </p>'
      properties:
        bn:
          $ref: '#/components/schemas/SenMLBaseName'
        bt:
          $ref: '#/components/schemas/SenMLBaseTime'
        bu:
          $ref: '#/components/schemas/DataUnit'
          description: 'If the Record has no Unit, the Base Unit is used as the Unit. CBOR Label is -4'
        bv:
          $ref: '#/components/schemas/SenMLBaseValue'
        bs:
          $ref: '#/components/schemas/SenMLBaseSum'
        bver:
          $ref: '#/components/schemas/SenMLBaseVersion'
        'n':
          $ref: '#/components/schemas/SenMLName'
        u:
          $ref: '#/components/schemas/DataUnit'
        v:
          $ref: '#/components/schemas/SenMLValue'
        vs:
          $ref: '#/components/schemas/SenMLStringValue'
        vb:
          $ref: '#/components/schemas/SenMLBoolValue'
        vd:
          $ref: '#/components/schemas/SenMLDataValue'
        s:
          $ref: '#/components/schemas/SenMLSum'
        t:
          $ref: '#/components/schemas/SenMLTime'
        ut:
          $ref: '#/components/schemas/SenMLUpdateTime'
      xml:
        name: senml
    SenMLRequest:
      type: array
      items:
        $ref: '#/components/schemas/SenMLRequestEntry'
    SenMLActuationResponse:
      type: array
      items:
        $ref: '#/components/schemas/SenMLActuationResponseEntry'
    SenML:
      type: array
      items:
        $ref: '#/components/schemas/SenMLEntry'
    ImageMetaData:
      type: object
      description: A set of metadata associated with an image. Custom additional properties can be added after the mandatory properties.
      properties:
        image:
          type: string
          format: uri
          description: The URI of the image. It has a scheme or come without (just the resource). The former may be used to e.g. point out a HTTPS address where the image may be downloaded. Note that the path may include QUERY parameters such as a access token and shall be included in the HTTPS request.
          example: firmware.1.0.0.SNAPSHOT.tgz
        tp:
          type: string
          description: An optional target path on the `targetHandler` where the file component in `image` should be written.
        eid:
          type: string
          format: uuid
          description: 'A ephemeral uuid of the image. This is to uniquely refer to this image during e.g. a provision request. Therefore it is not persistent a subsquent image provision request, with same image, may have different id but shall be treated as a ephemeral id. Therefore, this is not set in the document itself. It is only used by the handler when it emits ImageProvision Events.'
          example: 06d4c900-075f-4f91-a1b6-cbfe309c427e
        sid:
          type: string
          pattern: '^(\d+(,\d+)*)?$'
          description: |-
            An optional Id of the stream that is carrying the image. If multiple streams a comma separated string with the stream ids are passed. The id is a positive integer starting from zero. No other ASCII characters than 0 - 9 and , is allowed (not even space). If not part of a stream this porperty shall either be omitted or zero length string.
            If the `ImageMetadata` object is put into the `images` array in a `ImageMetadataStreams` object they must be ordered with ascending ordinal. Thus, it is not possible to have a `sid` of two and then have a `sid` with one as next item in the array.
            There are three types of streams <ul> <li>AWS Stream where it provides the binary data through IoT Core (MQTT) using AWS OTA Job.</li> <li>Multipart binary files where first file is stream 1. This is only accessable locally on the device.</li> <li> Device downloads via HTTPS. In this case the files are constructed on the following format <i>s(stream id)-(filename).(version).(extension)</i> </li> </ul>
            For example when download-able streams and property is set to 20,21 and the image URI is set to https://images.bluair.io/g4/firmware.1.0.0.SNAPSHOT.tgz there will be two URI to use when downloading the firmware image. The first is https://images.bluair.io/g4/s20-firmware.1.0.0.SNAPSHOT.tgz and the second is https://images.bluair.io/g4/s21-firmware.1.0.0.SNAPSHOT.tgz.
          example: '1,2,6,19'
        targetHandler:
          $ref: '#/components/schemas/HwTarget'
          description: 'The target hardware to cope with the image. Thus, the one to process and do the actual storing / flashing of the image. It may be tunneled using protocol over a bus or other but the driver of the process is the handler. Such as Wi-Fi chipset may flash the MCU directly or indirectly.'
        version:
          $ref: '#/components/schemas/Version'
        target:
          $ref: '#/components/schemas/HwTarget'
          description: The target to use the image such as Wi-Fi chipset firmware.
        size:
          type: integer
          format: int64
          example: 10000000
          description: 'The number of octets that the image compromize of. If unknown, no property or below zero.'
        usize:
          type: integer
          format: int64
          example: 99900000
          description: 'The amount of octets the image will take when uncompressed or otherwise expanded. If image consists of multiple files. All files are counted for. If unknown, no property or below zero.'
        chunks:
          type: integer
          format: int32
          example: 107
          description: The number of chunks that this image is splitted into.
        csize:
          type: integer
          format: int32
          example: 4096
          description: The size of each `chunk`. Note that last chunk may be smaller in size.
        language:
          type: string
          pattern: '(([a-z]{2}|[A-Z]{2})(?:-([a-z]{2}|[A-Z]{2})){0,2})(?:,([a-z]{2}|[A-Z]{2})(?:-([a-z]{2}|[A-Z]{2})){0,2})*'
          example: 'se,en-us,zh-cn'
          description: 'Language is in two-digit format as specified in [ISO 639-1 standard language codes](https://www.andiamo.co.uk/resources/iso-language-codes/). If multiple countries, use comma without space to specify a set.'
        signature:
          $ref: '#/components/schemas/Signature'
      required:
        - image
        - eid
        - target
    ImageMetaDataStreams:
      type: object
      description: 'This is a representation of a collection of images. The images are partitioned into one or more streams. Stream zero is reserved for this metadata. It may be realized into AWS streams or plain HTTPS binary file data array (in e.g. multipart HTTP). The latter means that the first file is stream id 1 and not zero when separate metadata parameter is part of the multipart HTTP. If not, the first file will be stream id 0 and contain this metadata document.'
      properties:
        eid:
          type: string
          format: uuid
          description: A ephemeral uuid of the collection of images.
          example: ffd4c900-075f-4f91-a1b6-cbfe309c427a
        signature:
          $ref: '#/components/schemas/Signature'
          description: Optional signature of the whole metadata file in order to verify its integrity. Note that this property must come before `images` propery in order to allow the device to parse the JSON payload sequentially.
        images:
          type: array
          description: One or more images.
          items:
            $ref: '#/components/schemas/ImageMetaData'
      required:
        - eid
        - images
    OnboardData:
      type: object
      properties:
        ssid:
          type: string
          minLength: 1
          maxLength: 32
          example: MYWIFI
          description: The SSID of the Wi-Fi that the password corresponds to.
        bssid:
          type: string
          pattern: '^([[:xdigit:]]{2}[:.-]?){5}[[:xdigit:]]{2}$'
          example: '3D:F2:C9:A6:B3:4F'
          description: The mac address of the Wi-Fi router for the ssid (optional)
        password:
          type: string
          format: password
          description: The password matching a SSID
          example: mysecretssidpassword
        auth:
          type: string
          format: uri
          description: The URL to the IdP where the device shall use to authenticate and get authorization ad refresh tokens. The device should use client credentials OAuth 2.0 flow
          example: 'https://de-fr.idp.blueair.io/oauth/v2/oauth-token'
        broker:
          type: string
          format: uri
          description: The URL to the broker where the device shall connect to
          example: 'https://de-fr.broker.blueair.io'
        api:
          type: string
          format: uri
          description: The URL to the API Gateway where the device shall connect to
          example: 'https://de-fr.api.blueair.io'
        sntp:
          type: string
          format: uri
          description: The SNTP URL to synchronize timn from.
        region:
          $ref: '#/components/schemas/Region'
        rand:
          type: string
          minLength: 64
          maxLength: 512
          description: 'A Secure random, base64, string to use when hashing the `text` provided. Thus this, along with the text, is sent to the cloud by the onboarder (client). The onboarder then send this random and text to the device. The device will register itself (along with it''s, uisng implicit OIDC token, UUID) using this random and text. If a match is made in the cloud the subject that is logged into the onboarder, when invoking the registration in the cloud, is paired with the device UUID. Therefore, the device is owned by the master account of the onboarder subject.'
          example: aGVsbG8gd29ybGQgZnJvbSBtYXJpby50b2ZmaWFAZGF0YWR1Y3R1cy5zZQ==
        text:
          type: string
          minLength: 128
          maxLength: 512
          description: A random generated text of which the application has used when regstered in the cloud. This is used to match device registrationin cloud (see `rand` for more information).
          example: 12978!ajfji9JIas!!9_sdkjdfjkdfjk834sdTWGREI9GJIOGDIOJF9834WRHFESNJOJINjndlmkkljdfhj839rr3hu89!
        onboardid:
          type: string
          format: uuid
          example: 06d4c900-075f-4f91-a1b6-cbfe309c427e
          description: 'The onboarding identity, e.g. the app uuid. This will be included in the onboard events to detect whom (client) is onboarding in addition to the identity.'
        dt:
          $ref: '#/components/schemas/DateTimeTZ'
      required:
        - password
        - auth
        - broker
        - api
        - region
        - rand
        - text
        - onboardid
      xml:
        name: onboard-data
    ProcessInfo:
      type: object
      description: Outlines a single process and it's status. All properties are optional since different entities supports varous elements.
      properties:
        pid:
          type: integer
          format: int32
          example: 128287
          description: The unique process id.
        name:
          type: string
          example: SNTP-Service
          description: A free form text (may not be unique) of the process name.
        cpu:
          type: integer
          format: int32
          minimum: 0
          maximum: 100
          example: 3
          description: The CPU utilitization in percent.
        heap:
          type: integer
          format: int32
          minimum: 0
          example: 19283
          description: The amount of heap memory the process currently using.
        status:
          type: string
          enum:
            - Idle
            - Active
            - Seleep
            - Zombie
            - Unknown
          example: Active
          description: In what state the process is in.
    Schedule:
      type: object
      description: A schedule consists of a trigger and a set of actions / functions when this trigger occurs.
      properties:
        ot:
          type: string
          example: Schedule
          default: Schedule
          description: 'The type of schedule, all derived types must specify it''s specific (`ot`) object type.'
      required:
        - ot
    DWTSchedule:
      allOf:
        - $ref: '#/components/schemas/Schedule'
        - type: object
          description: |-
            A schedule consists of triggers and a set of actions / functions when a trigger occurs. The trigger is based on Day of Week and a Time range (DWT). The configuration is not allowed to overlap and therefore the cloud system shall ensure that no overlaps is present when configuring the device. The trigger is formed with property `td` along with `ts` and `te`.
            The trigger exit may not only be when trigger is out of scope / range. It may also be exited using e.g. HMI buttons or other forced exit. Then the trigger is not be triggered again after it has first been out of scope and then triggered again since triggers is always evaluated at entry of the scope not during.
          properties:
            td:
              type: string
              description: The day of week trigger
              enum:
                - Mon
                - Tue
                - Wed
                - Thu
                - Fri
                - Sat
                - Sun
            ts:
              type: string
              pattern: '^[0-9][0-9]:[0-9][0-9]$'
              description: 'A range start time specified as HH:MM.'
            te:
              type: string
              pattern: '^[0-9][0-9]:[0-9][0-9]$'
              description: 'A range end time specified as HH:MM. End must be at least one minute greater than `ts`.'
            ta:
              type: array
              description: 'The actions to execute when the trigger has triggered. When the trigger is exiting, the actions may be automatically undone.'
              items:
                $ref: '#/components/schemas/OneOfTriggerAction'
            ot:
              type: string
              example: dwt
              default: dwt
              description: 'The type of schedule, all derived types must specify it''s specific (`ot`) object type.'
      required:
        - td
        - ts
        - te
        - ta
        - ot
    TriggerAction:
      type: object
      description: Root type of a action to be performed when a trigger has occured.
      properties:
        emit:
          type: boolean
          default: false
          example: false
          description: If a ActionEvent is to be emitted when this action is executing or not. The action also emits a event when the action has finished.
        ot:
          type: string
          example: TriggerAction
          default: TriggerAction
          description: 'The type of trigger action, all derived types must specify it''s specific (`ot`) object type.'
      required:
        - emit
        - ot
    ActuatorAction:
      allOf:
        - $ref: '#/components/schemas/TriggerAction'
        - type: object
          description: Action to set a certain value on a actuator.
          properties:
            actuator:
              type: string
              description: The actuator to adress such as `am` or `fsp`.
            value:
              type: object
              description: A value to be set on the actuator. It must match the actuator type `t`.
            ot:
              type: string
              example: aa
              default: aa
              description: This is the actuator action.
          required:
            - actuator
            - value
            - ot
    FanSpeedAction:
      allOf:
        - $ref: '#/components/schemas/TriggerAction'
        - type: object
          description: Action to set a fanspeed step on main fanspeed actuator.
          properties:
            speed:
              type: integer
              format: int32
              minimum: 0
              maximum: 3
            ot:
              type: string
              example: fspa
              default: fspa
              description: This is the fanspeed action.
          required:
            - speed
            - ot
    OneOfTriggerAction:
      type: object
      oneOf:
        - $ref: '#/components/schemas/ActuatorAction'
        - $ref: '#/components/schemas/FanSpeedAction'
      discriminator:
        propertyName: ot
    CmVersion:
      type: integer
      format: int64
      example: 1566475292
      description: 'The version of the configuration. Each time a change is made in the configuration it is timestamped using a, UTC 64 bit Unix, NTP time. If such source is not available it shall use old ts + 1 in order to get a new version of the configuraiton. This property may never be negative or zero.'
    CmType:
      type: string
      enum:
        - Full
        - Diff
        - State
        - Structural
        - Partial
        - Partial-Diff
      example: Diff
      description: 'The type of configuration. Default is `Full` if omitted. Whenm full, the recieving entity is REQUIRED to completely replace the configuration. If `Diff` only changed or added entries are supplied as normal. Deleted entries are set in the `_d` property. Default is `Full`. <p> When `Diff` it is possible to supply only one object for a list of objects. The reciever needs to determine which object that is to be updated or if it is a new object. For example, a list of Wi-Fi list contains objects with _ssid_, _bssid_, and _psk_. If a object with _ssid_ _MYWIFI_ exit and a object with _ssid_ MYWIFI_ is submitted, it is a _update_ operation. If no such object with the _ssid_ of _MYWIFI_ is found, it is a _new_ object operation. </p> <p> If type is `State` only, optionally, signature and mandatory version is provided to denote which state the configuration is in. This is used in Check-Sync where CM wants to check device or app configuration. The response of such operation is configuration object(s) with type set to `State`. This is to reduce the bandwith needed to do a check sync. For example the `CMSyncEvent` in `Report` action exposes a `Configuration` object with `State`. This is e.g. used when a device connects.</p> <p> If `Structural` only metadata for a certain `Configuration` object is returned. Especially the `_sm` property is wanted when `Structural` is returned. This has to be explicitly requested in order to get the security / structural metadata.</p> <p> By `Partial` the Configuration object do not contain all properties by purpose. This may be either a request that only specified a certain amount of objects / properties or the requestor do not have sufficient claims and scopes to be able to se the complete `Configuration`.</p> <p> This is the same as `Partial` except that a `Full` was requested but could for above reason not be completely fulfilled.</p>'
    ConfigScope:
      type: string
      example: Instance
      enum:
        - CloudWideMulti
        - CloudWide
        - RegionalMulti
        - Regional
        - InstanceMulti
        - Instance
      description: |
        This  describes the scope of the config. The ordinal
        of the column specifies the level of which configuration
        may be override. For example a configuration defined at ordinal 1
        may be overridden in e.g. ordinal 3 since higher number than 1.
        Default scope if not provided is `Instance`.
        <p>
        Some properties may not be overridden since in locked state at any
        point in the configuration. The propagation of the confiugration is
        always one way, this means that the `CloudWideMulti` and `CloudWide`
        always originates from central AWS EU cloud. Whereas each region do
        have it's primary CM Service. Therefore, no conflict management may
        occur since always one way replicated.</p>
            
        <table>
          <tr>
            <td>Scope</td>
            <td>Range</td>
            <td>Ordinal</td>
            <td>Description</td>
          </tr>
          <tr>
            <td>CloudWideMulti</td>
            <td>Multi-cloud, all regions scope.</td>
            <td>0</td>
            <td>
              This scope is a root scope where all root configuration properties are defined. Since
              it is a multi-cloud scope it will also be replicated to other cloud than the primary
              cloud provider.
            </td>
          </tr>
          <tr>
            <td>CloudWide</td>
            <td>All regions for current cloud provider.</td>
            <td>1</td>
            <td>
              The scope is for all regions in same cloud provider. The configuration is replicated to all
              regions within the same cloud provider. Regions may override properties (if allowed) 
            </td>
          </tr>
          <tr>
            <td>RegionalMulti</td>
            <td>All cloud providers within a region.</td>
            <td>2</td>
            <td>
              The scope is for a single region where it may have multiple cloud providers. If such is the
              case; the configuration applies for all cloud providers in that region.
            </td>
          </tr>
          <tr>
            <td>Regional</td>
            <td>Single region for a single cloud provider.</td>
            <td>3</td>
            <td>This scope applies only for one cloud provider for a single region.</td>
          </tr>
          <tr>
            <td>InstanceMulti</td>
            <td>Only configuration for a certain instance of a device, service or client (application) within all regions, all clouds.</td>
            <td>4</td>
            <td>
              This is explcit configuration if instance based such as a device with a certain UUID have user settings that may be set
              on that particular device. This is often user settings but may be provided by e.g. Blueair (in B2B scenarios). This configuration
              is replicated all regions on all clouds.
            </td>
          </tr>
          <tr>
            <td>Instance</td>
            <td>Only configuration for a certain instance of a device, service or client (application) within a single region.</td>
            <td>5</td>
            <td>
              Same as `InstanceMulti` but is not replicated, instead it is regional bound. This means that the settings is lost if e.g. a
              device is connecting to a new region and therefore needs to be re-configured there.
            </td>
          </tr>
        </table>
    CmPropertyScope:
      type: string
      enum:
        - Bidirectional
        - MasterCM
        - MaterEntity
        - Opaque
      example: Bidirectional
      description: |
        How the property propagates to and from the CM. The default is `Bidirectional`.
        <table>
          <tr>
            <td>Property Scope</td>
            <td>Description</td>
          </tr>
          <tr>
            <td>Bidirectional</td>
            <td>
              The property is check-synced as multi master property. That means that the
              property may be overwritten both ways.
            </td>
          </tr>
          <tr>
            <td>MasterCM</td>
            <td>
              The property may only be written to entities and never altered or propagated
              back to the CM. This is a one way synchronization. If the CM detects that a
              property has changed it will overwrite this in subsquent check-sync.
            </td>
          </tr>
          <tr>
            <td>MaterEntity</td>
            <td>
              The property may only be written to CM and never altered or propagated
              back to the entity. This is a one way synchronization. This is where
              CM always gets updated in a check-sync and never writes changes to the entity.
            </td>
          </tr>
          <tr>
            <td>Opaque</td>
            <td>
              A opaque configuration is stored in the CM but never part of a version change or
              repository hash change. This can be information retrieved from items on a device
              such as a filter RFID chip of which contains information that is only to be read
              in the cloud. The device will never emit a CM event, this discoverable in a check
              sync if the retirev option is to include opaque configuration.
            </td>
          </tr>
        </table>
    CmProperty:
      type: object
      description: This object addresses a property in the `Configration` object. It is also possible to denote a object type to resolve any ambiguities (same property name for several types of objects). This is used in the structural meta entry object to reference which property or properties that is part of the authorization or structural defintion. This is a separate object since array in `CMStructuralMetaEntry` object.
      properties:
        p:
          type: string
          example: maxSpeed
          description: Optionally specify which property in the `Configuration` object this authorization applies to. If omitted it applies to whole `Configuration` object instead. If the property is embedded in a object or an array use dot notation to denote property navigation. The <p> To address a single property in e.g. `FanSensor` this property is set to sensors.maxspeed and `ot` is set to `FanSensor`. If address root `Sensor` or any object type with a certain property name just omit the `ot` property.</p>
        ot:
          type: string
          example: FanSensor
          description: 'This is set when it is neccesary to check the `ot` (_Object Type_) property on the object that the `p` property refers to. For example when having a array of sensors, thus multiple types of sensors do exist and might have the same property name. In order to explicity, and avoid ambiguity, specify the object type. If omitted, the `p` property in that case will address all object types on the array. <p> However, it does not only apply to arrays, it applies as a pre condition to when evaluating the property name or path for a certain object. For example if a single object may be of different types it also needs to be explicitly addressed.</p>'
        l:
          $ref: '#/components/schemas/CmPropertyOverride'
    CmStructuralMeta:
      type: object
      description: Contains the structural metadata for the configuration document.
      properties:
        sm:
          type: array
          description: All structural metadata entires.
          items:
            $ref: '#/components/schemas/CmStructuralMetaEntry'
        c:
          type: array
          description: 'All global defined inheritance chains (down to `ConfigScope` of Regional). The `Instance` and `InstanceMulti` are visible in the `ic` property object. Changes in this chain will not be automatically applied on existing instances, unless `force` flag is set to  `true`. This is due to the fact that it would be a really expensive operation to update all instance configuration (property `ic`). The instance id is based on the configuraiton `_id` and the `InstanceMulti` is the same as the `_id` except for the first byte specifies that this _UUID_ is a InstanceMulti identifier. Therefore, it is always possible to automatically infer the `InstanceMulti` _id_ from the `Configuration` objects `_id`.'
          items:
            $ref: '#/components/schemas/CmInstanceType'
        s:
          type: string
          format: uri
          example: 'urn:blueair:schema:openapi:version:g4d:1.0.0'
          description: 'This is the schema for the current `Configuration` object. This schema must handle all properties and structures in the inheritance chain. The schema is on the form name and version following the [OSGi Semantic Versioning](https://www.osgi.org/wp-content/uploads/SemanticVersioning.pdf).'
    CmStructuralMetaEntry:
      type: object
      description: 'This object describes the structural relationship between Configuration and property overriding. It contains the ability to lock or override `Configuration` object as a whole or a specific property in the `Configuration` object. This applies to ordinal in `ConfigurationScope` in such way that only ordinal higher may override if property or `Configuration` is not denoted as `Locked`. It also support configuration for the property / configuration read and write authorization. <p> Since this object both handles inheritance and property overrides and claims, everything is optional. If the `p` array is omitted, thus no properties are addressed, this clause is adressing the `Configuration` object as a whole instead.</p>'
      properties:
        s:
          $ref: '#/components/schemas/ConfigScope'
          description: Which configuration scope this structural / authentication configuration applies to.
        l:
          $ref: '#/components/schemas/CmPropertyOverride'
        cr:
          type: string
          example: devices
          description: 'The name of the claim that the (`r`)ead value is mached on. When multiple claim values are residing in a claim name it may be a bag type instead of scalar. This is the name for read rights. It is possible to use macro that can fetch it''s information in the configuration object root property. For example, owner_{did} looks for the claim name owner and the device id specified in the configuration object. If no value is specified in property `r`; the presense of this claim, independant on its value(s), gives read authorization.'
        r:
          type: array
          description: 'The value of the `cr` to match to be authorized for read. It is possible to use macro that can fetch it''s information in the configuration object root property. For example, owner_{did} looks for the claim name owner and the device id specified in the configuration object.'
          items:
            type: string
            example: 'device-{did}'
        cw:
          type: string
          example: devices
          description: 'The name of the claim that the (`w`)rite value is mached on. When multiple claim values are residing in a claim name it may be a bag type instead of scalar. This is the name for write rights. Same macro support as `cr` is supported for this property. If no value is specified in property `w`; the presense of this claim, independant on its value(s), gives write authorization.'
        w:
          type: array
          description: The value of the `cw` to match to be authorized for write. Same macro support as `r` is supported for this property.
          items:
            type: string
            example: 'device-{did}'
        pbn:
          type: string
          example: baseline
          description: A prefix that applies to all properties specified in `p` and `qp`. This is useful when many properties exists in a object and therefore a more shorthand version of those may be specified since all of them will be prefixed with this property content.
        p:
          type: array
          description: 'An array of properties that specifies which properties are subject for the read / write authorization and overried (`l`) property configuraiton. If property name cannot be unambigiously qualified, use the `qp`array and specify which object type (`ot`) the property belongs to.'
          items:
            type: string
            example: childLockTimeout
        ps:
          $ref: '#/components/schemas/CmPropertyScope'
        qp:
          type: array
          description: 'An array of qualified properties, instead of the plain property array. This array contains objects that may specify the property name, object type and override the root `l` property.'
          items:
            $ref: '#/components/schemas/CmProperty'
      xml:
        name: sm-entry
    CmInstanceType:
      type: object
      description: The instance type (name) and the inheritance chain down to this type.
      properties:
        'n':
          type: string
          description: 'The instance type is a discriminator so it is possible for device, app, or other entity to have their own configuration document structure and schema. Each types do have their own inheritance to root such as `CloudWideMulti` ConfigScope. The inheritance chain is specified in the structural metadata for the config object (thus is global). This type must be unique amongst the schemas, otherwise unpredicted result is to be expected.'
          example: BAFApp
        c:
          type: array
          description: 'The inheritance chain viewed from the `ConfigScope` of this configuration document. This is a complete inheritance chain in order to pin each configuration document. All configurations do have the same UUID even if they are e.g. regional bound. This means that a particular configuration document that is replicated to several regions will have the same UUID for every region. This is true even for instance based configuration. Therefore, it is possible to define globally for each `n` the inheritance chain down to ConfigScope `Regional`. However, then since each app, device etc. has their own instance, that will be encoded into the `Configuration` object metadata for that `Instance` or `InstanceMulti`. <table> <tr> <td>Instance Type (Name)</td> <td>ConfigScope</td> <td>Example Id</td> <td>Defined</td> </tr> <tr> <td>BAFApp</td> <td>CloudWideMulti</td> <td>119111e8-378f-4203-92d2-7420ac780ebb</td> <td>Globally</td> </tr> <tr> <td></td> <td>CloudWide</td> <td>229111e8-378f-4203-92d2-7420ac780ebb</td> <td>Globally</td> </tr> <tr> <td></td> <td>RegionalMulti</td> <td>339111e8-378f-4203-92d2-7420ac780ebb</td> <td>Globally</td> </tr> <tr> <td></td> <td>Regional</td> <td>449111e8-378f-4203-92d2-7420ac780ebb</td> <td>Globally</td> </tr> <tr> <td></td> <td>InstanceMulti</td> <td>559111e8-378f-4203-92d2-7420ac780ebb</td> <td><em>Configuration</em> object property <em>ic</em></td> </tr> <tr> <td></td> <td>Instance</td> <td>669111e8-378f-4203-92d2-7420ac780ebb</td> <td><em>Configuration</em> object property <em>ic</em></td> </tr> </table> <p></p> The above table is an example of _BAFApp_ is has a defined hiearchy. Where the _Instance_ and `InstanceMulti` is defined in the `ic` property of the `StructuralMeta` object and the rest is globally defined in the `_sm` object. The instance id is based on the configuraiton `_id` and the `InstanceMulti` is the same as the `_id` except for the first byte specifies that this _UUID_ is a InstanceMulti identifier. Therefore, it is always possible to automatically infer the `InstanceMulti` _id_ from the `Configuration` objects `_id`'
          items:
            type: string
            format: uuid
            example: ca9111e8-378f-4203-92d2-7420ac780ebb
    CmPropertyOverride:
      type: string
      description: Describes if the property or properties are `Locked` for overrides. If `Locked` it is not possible in a ordinally higher `Configuration` object to override values there. Default is `Open`. It is not possible to _Open_ a attribe or `Configuration` object once it has been declared as _Locked_. It is not possible to override authentication in a `Locked` property
      example: Locked
      enum:
        - Locked
        - Open
    CmConfig:
      type: object
      additionalProperties: true
      description: 'This `CmConfig` object encapsulates the configuration and provides metadata around the configuration. This is not neccesarily the way configuration is stored, instead this is an encapsulation with both CM metadata and the configuration itself. Note that CM may have additional metadata that is not revealed in this structure and should be considered as internal, such as variables used for Global indexing in DynamoDB etc. <p> Configuration object property names must never start with an underscore since that is reserved for the CM to use as metadata.</p> <p> This object is used to expose configuration towards clients, services and devices and exposes some internal CM metadata and allows for transportation, verification, splitting. Internally app, client, device, and CM may store the configuration in any shape.</p> <p> When the configuration is split up into several chunks (specified in `_cz`) it may also split a single property. If subsquent `CmConfig` object with same `_eid` have the same property it shall be concatinated with the previous one. This only applies to string properties. For example if transporting a PEM certificate chain, it may be split up into several `CmConfig` objects since it may be too large for e.g. the device to recieve.</p> <p> CmConfig may also have different scopes where it is possible to define configuration on a global scope that may be overridden down the scope chain (see `ConfigScope` for more info)</p>'
      properties:
        _eid:
          type: string
          format: uuid
          nullable: false
          example: 33769d94-bb56-4ab6-b102-d21f4295eec6
          description: 'A temporary id that referes to an operation. For example when `CMReadRequest` is issued, it will respond with the same id as the read request in order to correlate on such. It is also used to to correlate splitted configuration objects so the reciever may do gather configuration objects in same session (`_eid`).'
        _id:
          type: string
          format: uuid
          example: 9e88402a-a10a-4c67-bd53-f2a041247296
          description: 'The UUID of the application, service, device gotten from the persistent UUID service that this `CmConfig` object belongs to.'
        _s:
          $ref: '#/components/schemas/Signature'
          description: |-
            A signature that contains a hash, algorithm, and possibly a hint of what secret key / public key to use when verifying the signature. This is a optional property. When a configuration is signed, the recieving entity may authenticate the configuration1 so assure that it is from a trusted source.
            The signature applies to the configuration object. If splitted up into chunks, all chunks are calculated before sending one signature in `_sid` zero. It must first exclude `_sid` and `_cz` when calculating multi part `CmConfig` object.
        _v:
          $ref: '#/components/schemas/CmVersion'
        _r:
          type: string
          pattern: '^[A-Z]{2,4}-[A-Z]{2}$'
          example: EU-SE
          description: |
            'Which region the `CmConfig` object is bound to. This only applies to regional bound `Configration` objectsa (thus optional). It is on the following format  [Region]-[Country]. Country is in two-digit format as specified in  ISO3166-1. The regions are: EU, US, APAC, ME, CN.'. If multi part `CmConfig` object; only the first part `_sid` = 0 needs to have this property set for regional bound documents. <p> This is used by the CM to replace configuration on enties, such as a device, when changing region. Therefore it is possible to have different settings depending on which region the device is connected to. It is also the basis why the e.g. `Instance` base congfiguration needs to be redone in a new region.</p>
        _cas:
          type: integer
          format: int64
          example: 1566475291
          description: 'This is only present in a configuration provision request. The configuration is always updated using CAS (Check and Set). The changer needs to read this version field. When it sends its update to either CM, device or other entity that the configuration change will apply it will provide with this stored version (timestamp) and a new timestamp (greater than the old). The recieving entity will check its repository if the version matches it will change the configuration and update with the new timestamp provided. The last operation needs to be atomic on the entity.'
        _t:
          $ref: '#/components/schemas/CmType'
        _it:
          type: string
          example: BAFApp
          description: The type of the configuration object. See the `CMInstanceType` for more information (stored in the `c` and `ic`  property of in the `_sm` property). This type is not dictating the object type (`ot`) of the `CmConfig` object. Instead it is a distinguisher of which type of configuration it carries whereas the `ot` property dictates the actual configuration container type.
        _sc:
          $ref: '#/components/schemas/ConfigScope'
        _sm:
          $ref: '#/components/schemas/CmStructuralMeta'
          description: This is structural metadata for a `CmConfig` object. This has to be explicitly requested from the CM and thus is not part of a normal request or check-sync operation. Current specification requires this entry to be globally configurable. This means that all `CmConfig` object share the same `_sm` metadata. Be careful when designing root nodes in the configuration so no clashes in the property override or authorization occurs. This is to easen the burden for the CM Service to enforce overrides and authorization.
        _d:
          type: array
          description: 'An optional array of entries deleted. This property can only contain elements when the (`_t`)ype is `Diff`. It uses the same property navigation syntax as declared in the `Property` object. The exception is that is cannot distinguish between object types (`ot`). Thus, the navigation can support a single JSON property or a path of properties. The path separator is dot. When dotted it will navigate to sub JSON object. It uses the name after the dot to access the property in the sub JSON object. For example, if the config object contains a property called kalle. That property in its turn is a JSON object with a property called nisse. If the property expression is kalle.nisse. The sub JSON object property nisse will be removed.'
          items:
            type: string
            example: baseline.fssid
        _sid:
          type: integer
          format: int32
          example: 1
          description: 'If configuration split up into multiple documents, e.g. for transporting to device not capable of large objects. This denotes the sequence id. When this property is missing, the configuration is provided in fully. Otherwise the id starts at zero and increments for each segment. If `_s`, the first document (_sid = 0) shall only contain those values and the subsquent ones only the `_sid` and `_cz` properties are neccesary (along with the configuraiton items). The reciever MUST recieve all before doing the replacement of the configuration since that operation is atomic (see `_v`).'
        _cz:
          type: integer
          format: int32
          example: 2
          description: 'The number of chunks to expect if configuration is splitted. This is required to be included in each object if `_sid` property is used. The recieving end stops when the `_sid` = `_cz` - 1. Thus, the configuration object is complete.'
        _f:
          type: boolean
          example: false
          description: An optional parameter when writing configuration (default `false`) that allows for forcing values even if they are declared as one way or opaque. This may require additional claims since overriding the configured setup (see `_sm` for more information). This is useful when e.g. cloud need to update a device uuid and it is declared as `Opaque`. This can also be used to e.g. set a configuration version of zero (or other arbitary version) and thereby bypass the established convention.
        _ot:
          type: string
          example: CmConfig
          description: 'The object type of this configuration. If omitted it default to `CmConfig`. If specified object type, the configuration object has the supported properties specified.'
      required:
        - _id
        - _eid
      xml:
        name: cm-config
    CMReadRequest:
      type: object
      description: 'This is a request to read configuration from a remote entity. Based on which claims and scopes current requesting identity has the returning data will be filtered (partially), rejected or in fully supplied. The error respone are provided in `CMReadResponse` where error codes describe what did go wrong.'
      properties:
        id:
          type: string
          format: uuid
          description: An optional id to use to correlate the response. The confiugration object `_eid` will contain this `id`.
        s:
          $ref: '#/components/schemas/Signature'
          description: 'The signature of a certain `Diff` on the remote entity. If the remote entity supports `Diff` `Configuration` object reeads it stores the last n `Diff` object and may be retrieved. This is used in the check-sync process where the CM service wishes to read the changes only (to perserve bandwith and not expose sensitive material). If omitted, the current, full, entity configuration is wanted. Only the `sig` part of this object is required.'
        v:
          $ref: '#/components/schemas/CmVersion'
          description: 'The version of a certain `Diff` condfiguration object to be read (see `s` for more details). If omitted, the current, full, entity configuration is wanted.'
        r:
          type: array
          description: Optional filter in only root objects matching the names in this array. In this way it is possible to filter out certain configuration elements. This is most useful when doing `Full` and just wants parts of the configuration. If the configuration is truncated it will denote that in the `_t` parameter as `Partial`.
          items:
            type: string
            example: sensors
        t:
          $ref: '#/components/schemas/CmType'
          description: Which type of `Configuration` object is requested. Note when `Diff` it is neccesary to provide with `s` and `v`. The `r` property should not be provided in this case.
        opaque:
          type: boolean
          example: false
          description: A optional boolean if it should include the opaque configuration in the request. This will render all opaque configuration (reachable) in current scope and claims to be rendered (eve in a `Diff` document). Default is `false`.
      required:
        - t
      xml:
        name: cm-read
    CMWriteResponseCodes:
      type: object
      description: This object is used for either _ack_ or _error_ communication within the `CMWriteResponse` object.
      properties:
        c:
          type: integer
          format: int32
          example: 413
          description: The HTTP error code for the ack package
        b:
          type: array
          description: 'The array of recieved `Configuration` objects identified by the `_sid` property. For example 0, 1, 2.'
          items:
            type: integer
            format: int32
            example: 1
        m:
          type: string
          example: 'Payload Too Large, max size is 2kb'
          description: An optional messsage (usually on error codes).
      required:
        - c
    CMWriteResponse:
      type: object
      description: This is a response on a write `Full` or `Diff` (partial) to a entity. It shall respond with this object for all items (if e.g.) split up onto several `Configuration` objects. The `ack` and `err`response codes are mutual exclusive. Either configuration is committed or it fails.
      properties:
        ack:
          $ref: '#/components/schemas/CMWriteResponseCodes'
          description: The configuration was successfully recieved and committed. The `c` and `b` property is populated.
        err:
          $ref: '#/components/schemas/CMWriteResponseCodes'
          description: 'A error has occured, thus the `c` and optionally `m` is returned. Since configuration is all or nothing, no partial success is allowed'
    Threshold:
      type: array
      description: 'A set of thresholds to indicate the frequency the sensor may emit data onto the device shadow. The thresholds are ored together, i.e. the first one that triggers will make the data to be emitted by the sensor to the device shadow. See `Sensor` object property `th` for more information.'
      example:
        - 3s
      items:
        type: string
        pattern: '([0-9]+(|.[0-9]+)(mb|kb|s|h|d|w))'
        description: The actual threshold that needs to be met until it will trigger an operation. For example before sending data to remote peer.
    HysteresisThreshold:
      type: object
      description: 'This object describes a threshold comparison and hysteresis including a action when threshold is breached and when it goes from breached to not breached. For example it is possible do express _when PM2_5 >= 66 set fanspeed = {fanspeed} + 1_. However the action option is optional and the device do expose HysteresisThreshold-Action capability in its device caps if it supports such.'
      properties:
        s:
          type: string
          description: The sensor to include in the threshold config. Only one sensor may participate in a single threshold.
          example: fsp0
        e:
          type: integer
          format: int64
          example: 5000
          description: The evaluation interval expressed as a 64 bit Unix timestamp. This will affect how often the sensor is polled (or subscribed) to get a value from to at a best effort to meet this evaluation interval. This is measured in milliseconds.
        o:
          type: string
          enum:
            - GTE
            - LTE
          description: 'The operation, only greater or equal or less than or equal are supported.'
        t:
          type: number
          format: float
          description: The threshold value to run the operation and sensor data on. If binary 1.0 represents true and 0.0 as false.
          example: 68
        h:
          type: number
          format: float
          description: 'The [hysteresis](https://en.wikipedia.org/wiki/Hysteresis) acompaning the `t`hreshold.'
          example: 44
        c:
          type: integer
          format: int32
          example: 10
          description: The number of times the value has been breach or got from breach to non breach. This will avoid spikes to be triggered. The amount of time is madated in the `e`.
        a:
          type: string
          example: 'fsp0 = {fsp0} + 10'
          description: 'An optional expression to get sensor data and do +, - arithmetic and set a actutator. Only simple expression is allowed on form ''actuatorId = {sensorId} operand value''.'
        evt:
          type: boolean
          example: true
          description: 'If it shall emit a `ThresholdEvent` with the sensor id, value, this threshold when breached or when from breached to not breached.'
      required:
        - s
        - e
        - o
        - t
        - h
        - c
    TransportFormat:
      type: string
      example: senml+json
      default: senml+json
      description: |-
        What format the communication shall or uses. If configurable and mismatch in configuration, the transport sender and reciever shall use a sensible default format. Default is `senml+json`. <table> <tr> <td>Type</td> <td>Description</td> </tr> <tr> <td>senml+json</td> <td><p> Mimetype for this format is `application/senml+json`.</p> <p> Encoding considerations - Must be encoded as using a subset of the encoding allowed in [RFC8259](https://tools.ietf.org/html/rfc8259). See [RFC 8428](https://tools.ietf.org/html/rfc8428) for details. This simplifies implementation of a very simple system and does not impose any significant limitations as all this data is meant for machine-to- machine communications and is not meant to be human readable.</p> <p> Security considerations - See [Section 13 of RFC 8428](https://tools.ietf.org/html/rfc8428#section-13).</p> <p> Interoperability considerations - Applications MUST ignore any JSON key-value pairs that they do not understand unless the key ends with the "_" character, in which case an error MUST be generated.  This allows backwards-compatible extensions to this specification.  The "bver" field can be used to ensure the receiver supports a minimal level of functionality needed by the creator of the JSON object.</p> <p> Published specification - [RFC 8428](https://tools.ietf.org/html/rfc8428)</p> <p> Applications that use this media type - The type is used by systems that report, e.g., electrical power usage and environmental information such as temperature and humidity.  It can be used for a wide range of sensor reporting systems.</p> <p> Fragment identifier considerations - Fragment identification for application/senml+json is supported by using fragment identifiers as specified by RFC 8428.</p> /td> </tr> <tr> <td>senml+cbor</td> <td><p> Mimetype for this format is `application/senml+cbor`.</p> <p> Encoding considerations - Must be encoded as using [RFC7049](https://tools.ietf.org/html/rfc7049). See [RFC 8428](https://tools.ietf.org/html/rfc8428) for details.</p> <p> Security considerations - See [Section 13 of RFC 8428](https://tools.ietf.org/html/rfc8428#section-13).
        Interoperability considerations - Applications MUST ignore any key- value pairs that they do not understand unless the key ends with the "_" character, in which case an error MUST be generated.  This allows backwards-compatible extensions to this specification.  The "bver" field can be used to ensure the receiver supports a minimal level of functionality needed by the creator of the CBOR object.
        Published specification - [RFC 8428](https://tools.ietf.org/html/rfc8428)
        Applications that use this media type - The type is used by systems that report, e.g., electrical power usage and environmental information such as temperature and humidity.  It can be used for a wide range of sensor reporting systems.
        Fragment identifier considerations - Fragment identification for application/senml+cbor is supported by using fragment identifiers as specified by RFC 8428. </td> </tr> <tr> <td>senml+blueair</td> <td><p> This format is a Blueair Propritary format for text transport using mimetype of `application/senml+blueair`.</p> <p> :bn=urn:dev:ow:06d4c900-075f-4f91-a1b6-cbfe309c427e:,<br> :bt=1276020076.001<br> +4,1,80,2,12.6,3,12.6,4,12.6,5,-62,6,10,7,40,8,80,9,18<br> +3,1,80,2,12.6,3,12.6,4,12.6,5,-62,6,10,7,40,8,80,9,18<br> +2,1,80,2,12.6,3,12.6,4,12.6,5,-62,6,10,7,40,8,80,9,18<br> +1,1,80,2,12.6,3,12.6,4,12.6,5,-62,6,10,7,40,8,80,9,18<br> +0,1,80,2,12.6,3,12.6,4,12.6,5,-62,6,10,7,40,8,80,9,18</p> <p> The above sample sets the base name and a base time. Entries for four seconds before the base time until the base time itself are emitted. Sensors do have id ranging from one to nine. In order to determine wich sensor/actuator is what the sensor/actuator configuration of the source must be consulted.</p> <p> When a line starts with a colon it can hold a single assignment such as `bn` or `t` or all other SenML standard and non standard elements.</p> <p> When row starts with +, it is a single entry in a list where a comma separated string is passed one for each id that are part of the notification. It always begins with the offset (omitting the minus sign) on the "bt". It is possible to have a single id an value on a row or all for the given timeframe</p> <p> When a row starts with a . it is a plain id value pair line with one or more data points.</p> <p> It is possible to set new `bt`, `bn` etc assignments (lines starting with colon) anywhere in the payload to alter the context as with standard SenML encoding.</p> </td> </tr> <tr> <td>text</td> <td>Unspecified text format where mimetype is `text/plain`</td> </tr> <tr> <td>json</td> <td>Unspecified JSON format where mimetype is `applcation/json`</td> </tr> </table>
      enum:
        - senml+json
        - senml+cbor
        - senml+blueair
        - text
        - json
    DynamicConfig:
      type: object
      description: 'This describes the device dynamic configuration. It is ususally rendered as device shadow / twin. The dynamic configuration do often consist of a actuator and sensor bundeled together into a single property. This property is then controlled using e.g. device shadow protocol for that particular vendor. This transport mapping is usually other than the sensor / actuator protocol, [SenML](https://tools.ietf.org/html/rfc8428), of which is blueair standar sensor and actuator protocol. It is also possible to express a device update only configuration where the device e.g. from static configuration reflects a property in the dynamic configuration. A good usecase for this is to let AWS fleet indexer, index the property and thus makes it possible to resolve devices on this property value.'
      properties:
        'n':
          type: string
          example: fanspeed
          description: The name of the dynamic property name. If nested use dot to separate for example _fan.fanspeed_ translates to json object on property _fan_ and it contains one property called _fanspeed_.
        t:
          type: string
          enum:
            - boolean
            - integer
            - string
            - float
          example: integer
          description: 'Specifies what type the property is. Usually when actuator and sensor, it is of that particluar type.'
        v:
          type: string
          example: 50
          description: 'If any default value, it is set here.'
        s:
          type: string
          example: fsp
          description: The sensor that delivers the value to the cloud. It must exist in the sensor configuration on the device.
        a:
          type: string
          example: fsp
          description: The actuator that makes it possible to set a value from the cloud. It must exist in the actuator configuration on the device.
        d:
          type: string
          example: firmware-version
          description: 'A directed property (from device to cloud, thus readonly) where the device updates the cloud with changes and can never be set. This property is usually something from the static configuration.'
        th:
          $ref: '#/components/schemas/Threshold'
          description: When this property is set it will delay the sensor notification to e.g. device shadow until any of the thresholds has been met.
      required:
        - 'n'
        - t
      xml:
        name: dynamic-config
    AirQualityIndex:
      type: string
      enum:
        - Excellent
        - Good
        - Moderate
        - Bad
        - Very-Bad
      example: Moderate
      description: 'Specifies what levels of PM1, PM2.5, and PM10 are harmful and the appropriate precautions needed. The AQI is measured in ug/m3.'
    Event:
      type: object
      description: |
        This is the base event object. Note that custom additional properties after the specified ones are allowed.
      properties:
        id:
          type: string
          format: uuid
          example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
          description: A unique UUID for the event.
        ts:
          type: integer
          format: int64
          example: 1552917252
          description: 'The Unix timestamp when event was generated. When the timestamp is zero or less, the time was indetermineable during the event (for example device do not got a hold on NTP server). If relaying party it shall fill in the timestamp if it can determine the time. As last resort the event service in the cloud will populate this when recieved the event. This may have events out of sequence in corner cases.'
        o:
          type: string
          format: uuid
          example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
          description: 'A 128 bits persistent UUID for the origin. For example, each device has a UUID that is persisted. This includes applications and each µService. Therefore it is possible to track all events emitted by a certain device, application or µService.'
        m:
          type: string
          example: (1) Conecting to Wi-Fi MY_SSID
          maxLength: 256
          description: 'A message that, in plain text, represents this event. When the text starts with `(number)`, the number represents a string id that e.g. clients may present a text from.'
        ec:
          type: integer
          format: int32
          example: 0
          description: 'Zero and above is success, negative are errors. This is the error code of the event. Where the event `et` is the scope of the event and the error code within the event is this property.'
        et:
          type: string
          enum:
            - NotConnected
            - DeviceUnbound
            - LinkConnect
            - LinkReconnect
            - LinkConnected
            - ObtainingIPAddress
            - IPAddressObtained
            - Authenticating
            - Authenticated
            - BrokerConnecting
            - BrokerConnected
            - DeviceBound
            - RegisterDevice
            - SettingPassword
            - ImageProvisionStart
            - ImageProvision
            - ImageProvisionEnd
            - CM-Configure
            - HW-Configure
            - NW-Configure
            - Generic-Management
            - Generic-Debug
            - CM-Synchronization
            - HMIEvent
          description: |
            The event type specifies the actual event. This is to distiguish from object
            type where it dictates the amount of properties in the event. This enumeration
            contains all events possible in the system.

            <table>
              <tr>
                <td>Event Type</td>
                <td>Object Type</td>
                <td>Description</td>
              </tr>
              <tr>
                <td>NotConnected</td>
                <td>Connection</td>
                <td>The device is not connected to any SSID. In this state the device may be already bound</td>
              </tr>
              <tr>
                <td>DeviceUnbound</td>
                <td>Onboard</td>
                <td>The device is not owned by any Identity in the cloud (i.e. the device **not onboarded**)</td>
              </tr>
              <tr>
                <td>LinkConnect</td>
                <td>Connection</td>
                <td>Connecting to a certain Wi-Fi SSID with specified credentials</td>
              </tr>
              <tr>
                <td>LinkReconnect</td>
                <td>Connection</td>
                <td>Reconnecting to a certain Wi-Fi SSID with specified credentials</td>
              </tr>
              <tr>
                <td>ObtainingIPAddress</td>
                <td>Connection</td>
                <td>Device is in progress of doing a DHCP request to obtain IP and Gateway IP.</td>
              </tr>
              <tr>
                <td>IPAddressObtained</td>
                <td>Connection</td>
                <td>A valid IP and default gateway IP have been obtained.</td>
              </tr>
              <tr>
                <td>Authenticating</td>
                <td>Security</td>
                <td>Authenticating to an IdP</td>
              </tr>
              <tr>
                <td>Authenticated</td>
                <td>Security</td>
                <td>The application or device is authenticated</td>
              </tr>
              <tr>
                <td>BrokerConnecting</td>
                <td>Connection</td>
                <td>Device is connecting to IoT broker</td>
              </tr>
              <tr>
                <td>BrokerConnected</td>
                <td>Connection</td>
                <td>Connection established to broker. It does not mean that the device has any publishing capabilities. This state is regarded as the device connected. It is also visible from the Blueair cloud at this stage.</td>
              </tr>
              <tr>
                <td>DeviceBound</td>
                <td>Onboard</td>
                <td>The device has been **successfully onboarded.** The device has connected to the cloud and the registration service has set the current identity as the master owner of the device.</td>
              </tr>
              <tr>
                <td>RegisterDevice</td>
                <td>Onboard</td>
                <td>The device is part of an onboarding scenario and it has connected and does the registration of the device in the cloud by pairing a identity with the UUID of the device.</td>
              </tr>
              <tr>
                <td>SettingPassword</td>
                <td>Security</td>
                <td>The device or application is setting the password on the remote IdP.</td>
              </tr>
              <tr>
                <td>ImageProvisionStart</td>
                <td>ImageProvision</td>
                <td>A image provision transaction has been started. This is emitted on each new image to be
                  provisioned.</td>
              </tr>
              <tr>
                <td>ImageProvision</td>
                <td>ImageProvision</td>
                <td>A image provision is in progress, the stage and completeion will determine status.</td>
              </tr>
              <tr>
                <td>ImageProvisionEnd</td>
                <td>ImageProvision</td>
                <td>A image provision transaction has ended. If error code is negative this is a failure, otherwise success</td>
              </tr>
              <tr>
                <td>CM-Configure</td>
                <td>ManagementEvent</td>
                <td>The entity has done a configuration change in CM repository (such as JSON file or database).</td>
              </tr>
              <tr>
                <td>HW-Configure</td>
                <td>ManagementEvent</td>
                <td>The entity has done a configuration change that affected the hardware (or firmware) such as switching on a fan or rebooting MCU.</td>
              </tr>
              <tr>
                <td>NW-Configure</td>
                <td>ManagementEvent</td>
                <td>The entity has done a configuration change in terms of network or network connectivity.</td>
              </tr>
              <tr>
                <td>Generic-Management</td>
                <td>ManagementEvent</td>
                <td>Unspecified event type for a management event.</td>
              </tr>
              <tr>
                <td>Generic-Debug</td>
                <td>DebugEvent/td>
                <td>Unspecified debug event.</td>
              </tr>
              <tr>
                <td>CM-Synchronization</td>
                <td>CMSyncEvent</td>
                <td>Configuration Manager synchronization event. This may be emitted by the CM service or its clients such as app, device or service.</td>
              </tr>
              <tr>
                <td>HMIEvent</td>
                <td>HMIEvent</td>
                <td>
                  Emitted when a button is pressed or released. It also may be emitted when any interaction with the HMI has been detected, such as
                  a touch on the touch-screen.
                </td>
              </tr>
            </table>
          example: LinkConnect
        r:
          type: string
          pattern: '^[A-Z]{2,4}-[A-Z]{2}$'
          example: EU-SE
          description: |
            'Which region the device, application or service is currently  set as. For devices it is done by the application and the device cannot switch region by itself. It is on the following format  [Region]-[Country]. Country is in two-digit format as specified in  ISO3166-1. The regions are: EU, US, APAC, ME, CN.'
        rp:
          type: string
          format: uuid
          example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
          description: When the event is relayed by other entity than the origion of the event. The realying party UUID is set to this property. Otherwise it is _null_.
        ot:
          type: string
          description: All events must implement this property since it is used by APIs to discriminate which event it really is. It is a implicit mapping thus this ojbect would either _Event_ and _DevicConnectionEvent_ would be rendered if the event where such.
          example: Event
      required:
        - id
        - ts
        - o
        - m
        - ec
        - et
        - ot
      xml:
        name: event
    ActionEvewnt:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          description: Inherits from Event and is emitted when a triggered action has occured.
          properties:
            action:
              type: string
              description: The Action name specified in the `ot` property of `TriggerAction` derived object.
              example: NightMode
            execute:
              type: boolean
              description: 'This property is set to `true` when the action is currently executing. If the action has stopped executing, this property is ´false`.'
            ot:
              type: string
              description: ActionEvent
              example: ActionEvent
          required:
            - ot
    ConnectionEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          description: |
            Inherits from Event and is used when application or device is connecting using Wi-Fi. The property n(etwork) is optional porperty that should be included but in some cicumstances impossible.
          properties:
            ot:
              type: string
              description: ConnectionEvent
              example: ConnectionEvent
            'n':
              $ref: '#/components/schemas/SSIDNetwork'
            a:
              $ref: '#/components/schemas/IpV4IpV6Config'
          required:
            - ot
    SecurityEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          description: Inherits from Event and is used for security related events such as authentication policy management etc.
          properties:
            sub:
              type: string
              description: 'The subject that relates to this event. For example if authorization error the sub in the open id connect token is copied into this event. This may be any subject such as Gigya UUID, email, or phone (with coutry prefix to make it unique!).'
              example: mario.toffia@blueair.se
            auth:
              type: string
              format: uri
              description: The URL to the IdP where the event refers (or uses) to (if applicable).
              example: 'https://de-fr.idp.blueair.io/oauth/v2/oauth-token'
            ot:
              type: string
              description: SecurityEvent
              example: SecurityEvent
          required:
            - ot
    OnboardEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          description: Inherits from Event and is used for security related events such as authentication policy management etc.
          properties:
            sub:
              type: string
              description: 'The subject that relates to this event. For example if authorization error the sub in the open id connect token is copied into this event. This may be any subject such as Gigya UUID, email, or phone (with coutry prefix to make it unique!).'
              example: mario.toffia@blueair.se
            client:
              type: string
              description: The client uuid that is used to onboard the identity (sub)ject.
              example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
            ot:
              type: string
              description: OnboardEvent
              example: OnboardEvent
          required:
            - ot
            - client
    ImageProvisionEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          description: Inherits from Event and is used when a image provision is occuring. The image property is optional and may only be populated with the mandatory imageName even if the original metadata had much more fields populated when provision request was issued. This is to reduce the amount of data transferred from the provisioned entity and the listening clients. The id if the image meta-data is always provided with the event. A good behaved entity will emit the complete image meta-data at the provision start event and then use only the id on subsquent. The n(etwork) property is optional but should be provided if the entity can.
          properties:
            image:
              $ref: '#/components/schemas/ImageMetaData'
            imageId:
              type: string
              format: uuid
              description: The image id as specified in the ImageMetaData.
              example: 06d4c900-075f-4f91-a1b6-cbfe309c427e
            stage:
              type: string
              enum:
                - Ready
                - Receiving
                - Validating
                - Writing
              description: |
                A enum describing in which stage a certain image provision is in. Note that a entity may do both receieve, validate and write at the same time thus emitting three subsquent events directly or it may receieve, then validate, then write it into persistence. This is up to the device. When completeion is set to 100% the stage is done. <table>
                  <tr>
                    <td>Stage</td>
                    <td>Description</td>
                  </tr>
                  <tr>
                    <td>Ready</td>
                    <td>In a ready state to handle or has handeled a image provision request.</td>
                  </tr>
                  <tr>
                    <td>Receiving</td>
                    <td>In progress of receiving a image</td>
                  </tr>
                  <tr>
                    <td>Validating</td>
                    <td>In progress of validating a received image</td>
                  </tr>
                  <tr>
                    <td>Writing</td>
                    <td>In progress of writing the received and validated image.</td>
                  </tr>
                </table>
            'n':
              $ref: '#/components/schemas/SSIDNetwork'
            c:
              type: integer
              format: int32
              maximum: 100
              minimum: 0
              example: 80
              description: The completeion of a specific stage. If this is set to other than zero a stage must be submitted.
            ot:
              type: string
              description: ImageProvisionEvent
              example: ImageProvisionEvent
          required:
            - imageId
            - stage
            - c
            - ot
    ManagementEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          description: 'Inherits from Event and is used for generic management events such as rollback configuration, enable / disable access point, forget WiFi networks etc.'
          properties:
            action:
              type: string
              example: Reboot
              enum:
                - No-Action
                - Manage-AP
                - Reboot
                - Rollback-Config
                - Forget-Network
              description: |-
                Describes the management action that is about to take place or has been done (success or error). Depending on the action type some actions come with additional parameters to describe more about the action. This is docuemnted in each action type.
                <table> <tr> <td>Action</td> <td>Description</td> </tr> <tr> <td>No-Action</td> <td>This is not a event that corresponds to a certain management action.</td> </tr> <tr> <td>Manage-AP</td> <td>A accesspoint management operation has occured.</td> </tr> <tr> <td>Reboot</td> <td>A reboot of whole device, service, or single firmware is about or has been done.</td> </tr> <tr> <td>Rollback-Config</td> <td>A configuration rollback e.g. switch to candidate or initial factory configuration.</td> </tr> <tr> <td>Forget-Network</td> <td> A forget operation to remove a network (usually a SSID along with the password) has been or is about to be commenced. </td> </tr> </table>
            ot:
              type: string
              description: ManagementEvent
              example: ManagementEvent
    DebugEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          description: 'Inherits from Event and is used for generic debug from device, app, or cloud. The debug event do not provide with any additional required properties. An optional level property exist to denote the grade of the event. Since event Inherits allowed to be extended up to 100 properties may be present.'
          properties:
            level:
              type: string
              enum:
                - Info
                - Debug
                - Trace
                - Verbose
              description: |
                Specifies the level of the event. A debug even may never emit any critical or warning.
                Such shall always be *real* events. The default value if missing is `Debug`.
                <table>
                  <tr>
                    <td>Level</td>
                    <td>Description</td>
                  </tr>
                  <tr>
                    <td>Info</td>
                    <td>This is a informational event. Such that this has not been implemented yet.</td>
                  </tr>
                  <tr>
                    <td>Debug</td>
                    <td>This is a debug event. For example decrypting configuration playload (read from e2).</td>
                  </tr>
                  <tr>
                    <td>Trace</td>
                    <td>This is a informational event. Such that a it needed to do a resend on SPI bus.</td>
                  </tr>
                  <tr>
                    <td>Verbose</td>
                    <td>This is a informational event. For example a hardware register dump.</td>
                  </tr>
                </table>
              example: Debug
            proces-info:
              description: An optional array of processes and their status.
              type: array
              items:
                $ref: '#/components/schemas/ProcessInfo'
            ot:
              type: string
              description: DebugEvent
              example: DebugEvent
          xml:
            name: debug-event
    CMSyncEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          description: Inherits from Event and is used for configuration management synchronization and reporting.
          properties:
            action:
              type: string
              example: Report
              enum:
                - Report
                - Check-Sync
                - Config-Change
                - Opqaue-Change
              description: 'Describes the CM action that this event carries <table> <tr> <td>Action</td> <td>Description</td> </tr> <tr> <td>Report</td> <td>Reports a configuration state.</td> </tr> <tr> <td>Check-Sync</td> <td>Events related to CM check sync process.</td> </tr> <tr> <td>Config-Change</td> <td> The configuration has changed and the new state is included in the `c` property. This is either sent from a entity such as a device, application, service or from the CM service to subscribing clients (device, app, service). The (`o`)rigin property determines the source of the configuration change. </td> </tr> <tr> <td>Opqaue-Change</td> <td> This evcent is only emitted when the remote entity is configured to do so. The CM may then choose to do a check-sync with the include opaque option to read the, possibly new, opaque configuration (such as sensor box configuration). </td> </tr> </table>'
            c:
              type: array
              description: The _Configuration_ objects if part of the event.
              items:
                $ref: '#/components/schemas/CmConfig'
            ot:
              type: string
              description: CMSyncEvent
              example: CMSyncEvent
    HMIEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          description: 'The HMI event is emitted when the device detects HMI input from its sensors. The event is emitted as button pressed and button released. Where the actual invocation of function is determined by the `exec` property set to `true`. If touch display, the logical coordinate base on lef, bottom as 0.0 and the geometric detection shape is also provided. The state or stage is reflected in `st` property.'
          properties:
            bt:
              type: string
              enum:
                - NotApplicable
                - Power
                - AutoMode
                - Wifi
                - Fanspeed
                - SilentAutoMode
              example: Fanspeed
              description: |
                <table>
                  <tr>
                    <td>Button</td>
                    <td>Description</td>
                  </tr>
                  <tr>
                    <td>NotApplicable</td>
                    <td>When no mapping to a certain function could be made.</td>            
                  </tr>
                  <tr>
                    <td>Power</td>
                    <td>
                      When the power button has been pressed/released. It may have three different states.
                      (0) Illegal, Off (1), On (2), ConnectedStandby (3). This is reflected in the <em>st</em> property.
                    </td>            
                  </tr>
                  <tr>
                    <td>AutoMode</td>
                    <td>When auto mode button is pressed/released.</td>            
                  </tr>
                  <tr>
                    <td>Wifi</td>
                    <td>When wifi mode button is pressed/released.</td>
                  </tr>
                  <tr>
                    <td>Fanspeed</td>
                    <td>
                      When fanspeed button is pressed or released. This is a multi-stage button where 
                      (0) Illegal, (1) Off, (2) Stage 1, (2) Stage 2, (3) Stage 3.
                    </td>            
                  </tr>
                  <tr>
                    <td>SilentAutoMode</td>
                    <td>When silent automode button is pressed or released.</td>            
                  </tr>
                </table>
            st:
              type: integer
              format: int32
              example: 3
              description: 'In which state / stage the button is in. If boolean, _zero_ is false and one is _true_. If multi staged like _Fanspeed_ it will show in which of tha available stages it is in such as 3. When multi staged, it is possible to get out of stage and therefore in such situations zero is _always_ **Illegal**.'
            exec:
              type: boolean
              example: true
              description: When the associated function is about or has been executed in the device. For example when _Wifi_ button is pressed and this property is `true` the Access point is enabled on the device.
            coord:
              $ref: '#/components/schemas/Coordinate'
              description: 'An _optional_ coordinate, if touch display.'
            dir:
              type: string
              enum:
                - Up
                - Down
                - Drag
              description: 'What direction of the press. First a button is pressed, thus the value of this property is _Down_. When the button is released a new event with same `bt` is emitted with this property set to _Up_. If the direction is _Drag_, it is part of a drag operation on a touch display. This is useful if the device wishes to update with a new coordinate within a _Drag_ operation.'
            lp:
              type: boolean
              example: false
              description: A long-press has been detected if this property is set to true.
            ot:
              type: string
              description: This is a HMI event
              example: HMIEvent
          required:
            - bt
            - st
            - dir
    EventFilter:
      type: object
      description: |
        A event filter is a object that is used to include or exclude event(s). This is used in the
        cloud event ingestion dispatcher as well as device. This is the generic filter and is embedded
        into inclusion filter and exclusion filters.
      properties:
        ts:
          type: string
          pattern: '^[<|>] [0-9]*'
          example: '> 1557396370'
          description: Filter events larger or less than a certain unx epoch time for the event timestamp (ts).
        o:
          type: string
          pattern: '^[=] (?:(?:[0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12})(?:,|$))+$'
          example: '= a05cf2ba-518e-48a8-92ce-0b0cca54efbc, ff5cf2ba-518e-48a8-92ce-0b0cca54efff'
          description: Filter events based on a certain orgin(s).
        m:
          type: string
          pattern: '^[=] .*'
          example: = Your device is connected.
          description: Filter events that matches a string exactly.
        ec:
          type: string
          pattern: '^[<|>|=] (?:(?:[-]?[0-9]*)(?:,|$))+$'
          example: '= -1,-6'
          description: 'Filter events larger, less or equal to a certain error code. If multiple use comma to separate the errorcodes (only valid when equal operator is used).'
        et:
          type: string
          pattern: '^[=] (?:(?:.*)(?:,|$))+$'
          example: '= LinkConnect, Authenticated'
          description: Filter events that matches one or more event types.
        r:
          type: string
          pattern: '^[=] (?:(?:[A-Z]{2,4}-[A-Z]{2})(?:,|$))+$'
          example: '= EU-SE, CN_CN'
          description: Filters event based on one or more regiona and country.
        ot:
          type: string
          pattern: '^[=] (?:(?:.*)(?:,|$))+$'
          example: '= SecurityEvent, ConnectionEvent'
          description: Filter events that matches one or more event object types.
      xml:
        name: event-filter
    EventFilters:
      type: object
      description: |
        A set of include and exclude event filters. The exclude filters are applied *before* incude filtering
        is done.
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FullEventFilter'
      xml:
        name: event-filters
    IncludeEventFilter:
      type: object
      description: |
        Incliude event filter is a `EventFilter` with one or more targets.
      properties:
        filter:
          $ref: '#/components/schemas/EventFilter'
        target:
          type: string
          pattern: '(?:(?:.*)(?:,|$))+$'
          example: 'cloudwatch, db'
          description: Specifies which target the filter will be feed to when included. This is a free text string and each service *must* define the allowed targets.
      xml:
        name: include-event-filter
    FullEventFilter:
      type: object
      description: |
        This object contains both the include and exclude filters. The exclude filters are applied *before* incude filtering.
      properties:
        include:
          type: array
          items:
            $ref: '#/components/schemas/IncludeEventFilter'
        exclude:
          type: array
          items:
            $ref: '#/components/schemas/EventFilter'
      xml:
        name: full-event-filters
    EventSubscription:
      type: object
      description: A subscription for one or more events. One subscription per connection. If polling use the UUID set in the subscription eid as paramter in the poll to get the result for that particular subscription. A implemntation may only support one subscription at the time. When subscribing to websocket or mqtt based event system the `eid` and `ttl` property is ignored since the event publisher will know when the client disconnects and assign it's internal `eid`. This is mainly for REST based event subscription.
      properties:
        eid:
          type: string
          format: uuid
          example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
          description: 'A ephemeral id that identified this subscription for current connection. This is a UUID generatd by the client. If conflicts occur, it will be rejected. When disconnected this subscription is removed automatically. If updates of filters during listening for events, use the same id and the subscription will change. If other id for same connection, it should be rejected.'
        ttl:
          type: integer
          format: int32
          example: 30000
          description: 'The amount of milliseconds the subscription is active before a new needs to be set with same eid. The default value is 10.000 milliseconds. When persistent connection the ttl is not used since a disconnect with remove the subscription. The ttl is only use when polling of event is done. When a poll within the ttl is done, the counter is reseted and the client has the ttl amount of milliseconds to do a subsquent poll.'
        filter:
          $ref: '#/components/schemas/FullEventFilter'
      required:
        - eid
      xml:
        name: event-subscription
    OneOfEvent:
      type: object
      oneOf:
        - $ref: '#/components/schemas/Event'
        - $ref: '#/components/schemas/ConnectionEvent'
        - $ref: '#/components/schemas/SecurityEvent'
        - $ref: '#/components/schemas/OnboardEvent'
        - $ref: '#/components/schemas/ImageProvisionEvent'
        - $ref: '#/components/schemas/ManagementEvent'
        - $ref: '#/components/schemas/DebugEvent'
        - $ref: '#/components/schemas/CMSyncEvent'
        - $ref: '#/components/schemas/HMIEvent'
        - $ref: '#/components/schemas/ActionEvewnt'
      discriminator:
        propertyName: ot
    AlarmLastChanged:
      type: string
      format: date-time
      example: '2017-07-21T17:32:28Z'
      description: When the alarm was last changed for any reason.
    AlarmResource:
      description: |-
        This is an identification of the alarming resource, such as an interface.  It should be as fine-grained as possible both to guide the operator and to guarantee uniqueness of the alarms.
        + The resource identifier is on the following format. r://uuid/sub1/sub2 where sub stands for resource specific sub identifiers. This is used to determine which exact resource in a global perspective. The resource identifiers may be used in app, client, device, or service.
        + For example to identify a fan speed actuator in a purifier the following scheme is realised. r://018b1067-37bb-47e8-b837-e1d6c61b6fbd/fans/0/speed-actuator.
      type: string
      format: uri
      example: 'r://018b1067-37bb-47e8-b837-e1d6c61b6fbd/fans/0/speed-actuator'
    AlarmSeverity:
      type: string
      enum:
        - clear
        - indeterminate
        - warning
        - minor
        - major
        - critical
      example: warning
      description: 'The severity level of the alarm.  Note well that value ''clear'' is not included.  If an alarm is cleared or not is a separate boolean flag. It follows the ITU X.733 standard. <table> <tr> <td>Severity</td> <td>Description</td> </tr> <tr> <td>clear</td> <td>The alarm is cleared by the instrumentation.</td> </tr> <tr> <td>indeterminate</td> <td>Indicates that the severity level could not be determined.  This level SHOULD be avoided.</td> </tr> <tr> <td>warning</td> <td> The ''warning'' severity level indicates the detection of a potential or impending service affecting fault, before any significant effects have been felt.  Action should be taken to further diagnose (if necessary) and correct the problem in order to prevent it from becoming a more serious service affecting fault.</td> </tr> <tr> <td>minor</td> <td> The ''minor'' severity level indicates the existence of a non-service affecting fault condition and that corrective action should be taken in order to prevent a more serious (for example, service affecting) fault.  Such a severity can be reported, for example, when the detected alarm condition is not currently degrading the capacity of the resource. </td> </tr> <tr> <td>major</td> <td> The ''major'' severity level indicates that a service affecting condition has developed and an urgent corrective action is required.  Such a severity can be reported, for example, when there is a severe degradation in the capability of the resource and its full capability must be restored. </td> </tr> <tr> <td>critical</td> <td> The ''critical'' severity level indicates that a service affecting condition has occurred and an immediate corrective action is required.  Such a severity can be reported, for example, when a resource becomes totally out of service and its capability must be restored. </td> </tr> </table>'
    AlamText:
      type: string
      maxLength: 4096
      example: 'The WiFi, MY-HOME-NETWORK, link is up'
      description: 'The string used to inform operators about the alarm. This _MUST_ contain enough information for an operator to be able to understand the problem and how to resolve it.  If this string contains structure, this format should be clearly documented for programs to be able to parse that information.'
    AlarmTypeId:
      example: 'alarm://link/WiFi/linkDown'
      description: 'This is an identification of the alarming resource for the alarm type id. it is on the format. alarm://alarm-category/sub1/sub2 where alarm-category is the category of the alarm such as communication, link, resource etc. The sub1..subN are more specific identifiers.'
      type: string
      format: uri
    AlarmTypeQualifier:
      type: string
      description: |-
        If an alarm type can not be fully specified at design time by alarm-type-id, this string qualifier is used in addition to fully define a unique alarm type.
        This is a optional property or may be null or empty string to denote that no additional identification than the `type-id` is required to uniquely identify the alarm type.
    AlarmState:
      type: string
      enum:
        - none
        - ack
        - closed
        - shelved
        - un-shelved
      example: ack
      description: 'Operator states on an alarm.  The ''closed'' state indicates that an operator considers the alarm being resolved. <table> <tr> <td>State</td> <td>Description</td> </tr> <tr> <td>none</td> <td>The alarm is not being taken care of.</td> </tr> <tr> <td>ack</td> <td> The alarm is being taken care of. Corrective action not taken yet, or failed. </td> </tr> <tr> <td>closed</td> <td>Corrective action taken successfully.</td> </tr> <tr> <td>shelved</td> <td> The alarm is shelved.  Alarms in /alarms/shelved-alarms/ MUST be assigned this operator state by the server as the last entry in the operator-state-change list.  The text for that entry SHOULD include the shelf name. </td> </tr> <tr> <td>un-shelved</td> <td> The alarm is moved back to ''alarm-list'' from a shelf. Alarms that are moved from /alarms/shelved-alarms/ to /alarms/alarm-list MUST be assigned this state by the server as the last entry in the ''operator-state-change'' list.  The text for that entry SHOULD include the shelf </td> </tr> </table>'
    Alarm:
      type: object
      description: |
        ## General

        An alarm signifies an undesirable state in a resource that requires
        corrective action. There are two main things to remember from this definition.

        1 the definition focuses on leaving out events and logging
          information in general.  Alarms should only be used for undesired
          states that require action. 
        2 the definition also focuses on alarms as a state on a resource,
          not the notifications that report the state changes.

        The standard alarm as specificed in 
        [draft-ietf-ccamp-alarm-module-08](https://datatracker.ietf.org/doc/draft-ietf-ccamp-alarm-module/).

        The alarm resource reference must be as fine-grained as possible in order to determine if a correlating
        action may take place. For example if a fan is malfunctioning in a purifier. The resource reference shall
        include both the purifier UUID, and the Fan Id so it can be globally identified.

        This type is the base-type and is meant to be inherited.

        ## Alarm Type

        This definition, defines an alarm type with an alarm type id and an
        alarm type qualifier.

        The alarm type id is modeled as a resource-identifier.  With resource
        identities, new alarm types can be defined in a distributed fashion.
        YANG identities are hierarchical, which means that a hierarchy of
        alarm types can be defined.

        Standards and vendors should define their own alarm type identities
        based on this definition.

        The use of resource identities means that all possible alarms are
        identified at design time.  This explicit declaration of alarm types
        makes it easier to allow for alarm qualification reviews and
        preparation of alarm actions and documentation.

        There are occasions where the alarm types are not known at design
        time.  An example is a system with digital inputs that allows users
        to connect detectors, such as smoke detectors, to the inputs.  In
        this case it is a configuration action that says that certain
        connectors are fire alarms for example.

        In order to allow for dynamic addition of alarm types the alarm
        module allows for further qualification of the identity-based alarm
        type using a string.  A potential drawback of this is that there is a
        significant risk that alarm operators will receive alarm types as a
        surprise.  They do not know how to resolve the problem since a
        defined alarm procedure does not necessarily exist.  To avoid this
        risk the system MUST publish all possible alarm types in the alarm
        inventory.

        A vendor or standards organization can define their own alarm type
        hierarchy.  The example below shows a hierarchy based on X.733 event
        types.

        ## Identifying Alarm Instances

        A primary goal of this alarm module is to remove any ambiguity in how
        alarm notifications are mapped to an update of an alarm instance.
        The X.733 and 3GPP documents were not clear on this point.  This
        alarm definition states that the tuple (resource, alarm type identifier,
        alarm type qualifier) corresponds to a single alarm instance.  This
        means that alarm notifications for the same resource and same alarm
        type are matched to update the same alarm instance.  These three
        leafs are therefore used as the key in the alarm list

        It is important to note that the `perceived-severity` in the alarm
        (and not in the status change list) cannot contain clear! A separate
        boolean flag called `is-cleared` is for this purpose only!
      properties:
        type-id:
          type: string
          format: uri
          example: 'alarm://link/WiFi/linkDown'
          description: 'This is an identification of the alarming resource for the alarm type id. it is on the format. alarm://alarm-category/sub1/sub2 where alarm-category is the category of the alarm such as communication, link, resource etc. The sub1..subN are more specific identifiers.'
        type-qualifier:
          type: string
          format: uri
          example: 'r://018b1067-37bb-47e8-b837-e1d6c61b6fbd/fans/0/speed-actuator'
          description: |-
            If an alarm type can not be fully specified at design time by alarm-type-id, this string qualifier is used in addition to fully define a unique alarm type.
            This is a optional property or may be null or empty string to denote that no additional identification than the `type-id` is required to uniquely identify the alarm type.
        resource:
          $ref: '#/components/schemas/AlarmResource'
        is-cleared:
          type: boolean
          example: false
          description: If the alarm is cleared or not.
        last-changed:
          $ref: '#/components/schemas/AlarmLastChanged'
        perceived-severity:
          $ref: '#/components/schemas/AlarmSeverity'
        alarm-text:
          $ref: '#/components/schemas/AlamText'
        status-change:
          $ref: '#/components/schemas/AlarmStatusChange'
        operator-status-change:
          $ref: '#/components/schemas/AlarmOperatorStatusChange'
        rp:
          type: string
          format: uuid
          example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
          description: When the alarm is relayed by other entity than the origion of the event. The realying party UUID is set to this property. Otherwise it is _null_.
        ot:
          type: string
          example: Alarm
          description: The is the object type that allows for distinguish different alarm implementation types. It has nothing to do with the alarm type qualification.
      required:
        - type-id
        - resource
        - alarm-text
        - perceived-severity
        - ot
    AlarmStatusChange:
      type: array
      description: A list of status changes. The last entry `time` is reflected in the alarm `last-changed`. For every status change from the resource perspective a row is added to the status change list.
      items:
        type: object
        properties:
          time:
            type: string
            format: date-time
            example: '2017-07-21T17:32:28Z'
            description: The date and time the change occured.
          perceived-severity:
            $ref: '#/components/schemas/AlarmSeverity'
          alarm-text:
            $ref: '#/components/schemas/AlamText'
        required:
          - time
          - perceived-severity
          - alarm-text
    AlarmOperatorStatusChange:
      type: array
      description: A list of status changes from the operator. The operator may change operator states on a alarm and optionally add a note.
      items:
        type: object
        properties:
          time:
            type: string
            format: date-time
            example: '2017-07-21T17:32:28Z'
            description: The date and time the change occured.
          operator:
            type: string
            example: mario.toffia@blueair.se
            description: The identity of the operator that has added a state to the alarm.
          state:
            $ref: '#/components/schemas/AlarmState'
          text:
            $ref: '#/components/schemas/AlamText'
        required:
          - time
          - operator
          - state
    Actuator:
      type: object
      description: |2-
         A self sufficient configuration for a single actuator. Actuators may have additional properties so this object is extendable using the `ot` property. To adress a actuator using e.g. [SenML](https://tools.ietf.org/html/rfc8428) the `n` property of the SenML can refer explicitly the actuator property `a`. Additionally it is possible to omit the `a` property. This also is true for the (`a`)rgument  part of the actuator (may be implemented by derived actuator). If multi argumented  actuator, it will search the _a_ property for a name matching the `n` reference. 
        ### Single Line Argument
        If single argument, therefore the schema is bound to the (`a`)rgument property directly and thus no reference to the property `a` is neede. For example is `led0` do have a _string_ property for _RGB_ it may be addressed as `led0` and thus expects a _string_ to be set. 
        ### Multi Line Argument
        If multi-argument property with three settings. 1) r 2) b 3) g
        Assuming the actuator name is _led0_ the _n_for r component is _led0:r_ for implicit _a_ reference and _led0:a:r_ for explicity accessing the (_a_)rgument. A actuator do always  have sensible defaults and therefore it is not neccessary to over the wire transport all  properties. Note, when multiple arugment, each argument must explicitly be addressed with its name.
        ### Derived Types
        Each derived type, specified by `ot` property may override existing property.The derived  actuator property `a` specifies one or more argument, in the sub-types. The derived type  specifies the type and the argument names. 
      properties:
        'n':
          type: string
          example: fan0
          description: A device actuator unique name or UUID.
        e:
          type: boolean
          example: true
          default: true
          description: If the actuator is enabled or not. Default is `true`
        fe:
          type: boolean
          example: true
          default: true
          description: If the service code is enabled or not. The service may exist in code but may not be usable unless e.g. a subscription is made or otherwise configured to be used. This is in contrast to the (e)nabled property where it is allowed to run but may be disabled temporary. Default is `true`
        st:
          type: string
          example: 'Samsung, CN-v2-Rev3'
          description: A optional qualifier that more narrowly specify the actuator type.
        tn:
          $ref: '#/components/schemas/MQTTTopic'
          example: d/9707d52a-a4a2-42e4-ba95-bcccf068b323/a/fanspeed
          default: 'd/${did}/a/{n}'
          description: 'A topic where the actuator will listen for actuation. The response topic is always this topic and `-r`. Defaults exists both for device and cloud where device is d/${did}/a/{`n`}. The only difference in cloud is that it is prefixed with `c` instead of `d`.'
        tf:
          $ref: '#/components/schemas/TransportFormat'
        u:
          $ref: '#/components/schemas/DataUnit'
          description: By default actuators do not have units. Specific actuators will denote the unit in this property based on the `Unit` enum. Default is to omit this property (or null).
        p:
          type: boolean
          default: true
          example: true
          description: If the actuator will persist it's state or not. Default is `true`.
        ot:
          type: string
          example: Actuator
          description: The object type to use as distinguisher of whch type of actuator it is.
      required:
        - 'n'
        - ot
    Sensor:
      type: object
      description: |-
        A self sufficient configuration for a single sensor. Sensors may have additional properties so this object is extendable using the `ot` property.
        Since sensors, except composite, do have a single value the [SenML](https://tools.ietf.org/html/rfc8428) transport mapping uses the device UUID as the base name and each sensor `n` value as the name. Thus, it is possible to address all non composite sensors using a single `bn` of the device UUID. Derived types specify the `t` type of sensor, such as `float`, `integer` or `boolean`.
      properties:
        'n':
          type: string
          example: fan0
          description: A device unique name or UUID.
        e:
          type: boolean
          example: false
          default: false
          description: 'If the sensor is enabled or not. Default is `false`. If it is enabled, it will emit values when it has new value to be emitted (or if one of the `th`resholds are breached).'
        fe:
          type: boolean
          example: true
          default: true
          description: If the service code is enabled or not. The service may exist in code but may not be usable unless e.g. a subscription is made or otherwise configured to be used. This is in contrast to the (e)nabled property where it is allowed to run but may be disabled temporary. Default is `true`.
        st:
          type: string
          description: A optional qualifier that more narrowly specify the sensor type.
        tn:
          $ref: '#/components/schemas/MQTTTopic'
          example: d/9707d52a-a4a2-42e4-ba95-bcccf068b323/s/fan0
          default: 'd/${did}/s/{n}'
          description: 'A topic where the sensor may post its data to. The default for device is d/${did}/s/{`n`} and cloud is the UUID of the service and prefixed with `c` instead. The _$did_ is the device _UUID_.'
        tf:
          $ref: '#/components/schemas/TransportFormat'
        th:
          type: array
          description: 'A set of thresholds to indicate the frequency the sensor may emit data onto the topic. The thresholds are ored together, i.e. the first one that triggers will make the data to be emitted by the sensor.'
          items:
            type: string
            pattern: '([0-9]+(|.[0-9]+)(mb|kb|s|h|d|w))'
            description: A trigger threshold when data may be emitted. It is possible for the sensor to emit at any time anyway but shall strive to keep until trigger expression is satisfied. It allows for match in MQTT packet size or as a time window.
        sn:
          type: array
          description: 'The sensor name(s) that is emitted onto this topic. If non composite sensor this list _MUST_ only contain a single element, that is the name of the sensor. If composite sensor it is possible to have several sensor names that it''s values will be emitted onto the current topic. Thus it is possible to publish aggregate data onto this topic `n`. If this property is omitted or do not contain any names the sensor that has this configuration is the default value to be emitted. Default is sensor `n`.'
          default:
            - '{n}'
          minItems: 0
          maxItems: 1
          items:
            type: string
            description: A discriminator of the object of which sensor this topic provides data from.
        i:
          type: integer
          format: int64
          default: 0
          example: 0
          description: 'A 64 bit [Unix time](https://en.wikipedia.org/wiki/Unix_time) specified in milliseconds of how often the sensor shall emit a value even if the value has not changed. If a sensor value has changed it is _REQUIRED_ to emit the value even if in between this interval. When the interval is set to 0 it will only emit values on value change in the sensor.'
        ttl:
          type: integer
          format: int64
          default: 3600
          description: 'A 64 bit [Unix time](https://en.wikipedia.org/wiki/Unix_time) when the sensor shall automatically stop emitting from it was enabled. It is measured in seconds. Enablement of a sensor is doe through a actuator or internal device function. It is connected to thresholds (property `t`). This is used to conserve resources so a sensor will eventually stop after a period of time speified in this property. Default is `3600` (1h).'
        ot:
          type: string
          example: Sensor
          description: The object type to use as distinguisher of whch type of sensor it is.
      required:
        - 'n'
        - ot
    CompositeSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: |-
            A composite sensor of which is composed by one or more sensors in the `c` property. The composed sensors can be accessed individually or via this composed sensor. If reference only the `c` property is not used. Instead the `tp.sn` property references other already existing sensors witin a composite sensor or outside.
            A rule of thumb is to model the sensor inside this composite instance when a sensor may act (calculated or otherwise) as several sensors or the composition of the sensor is physically modeled. However, it is not possible to model several layers of composition.
          properties:
            sn:
              type: array
              description: It is possible to have several sensor names that it's values will  be emitted onto the current topic. Thus it is possible to publish aggregate data  onto this topic `n`. If this property is omitted or do not contain any names the  sensor that has this configuration is the default value to be emitted. Default is  sensor `n`.
              default:
                - '{n}'
              minItems: 0
              maxItems: 100
              items:
                type: string
                description: A discriminator of the object of which sensor this topic provides data from.
            ot:
              type: string
              example: Composite
              description: Denotes that this sensor is a composite sensor and all real sensors is in the `c` array.
    Factory:
      type: object
      description: 'This object contains information about the factory environment such as the factory _SSID_, _BSSID_ and _PSK_ etc.'
      properties:
        ssid:
          $ref: '#/components/schemas/SSID'
          description: The _BSSID_ of the factory Wi-Fi network.
        bssid:
          $ref: '#/components/schemas/BSSID'
          description: The _BSSID_ of the factory Wi-Fi network.
        pwd:
          type: string
          format: password
          description: The password matching a SSID
          example: mysecretssidpassword
        url:
          type: string
          format: uri
          description: The URL to the device connects to the factory server.
          example: 'https://factory.local/connect'
      required:
        - ssid
        - pwd
        - url
    FanspeedByPmTvocEntry:
      type: object
      description: This is a single entry in a table of entires that dictates the main fanspeed in % based on PM and tVOC. It is also aggregate-classifies a AirQualityIndex for all PM and tVOC in contrast to the AQIThresholdConfig is only specifying a single PM value. All PM values are specified as ug/m3 and tVOC is ppb. The document G4-0017 Auto mode.docx outlines the table for this entry. Since the `FanspeedStep` already contains the displayed fanspeed on device it is redundant and therefore not part of this table. In order to resolve the fanspeed step use the `FanSpeedStep` `s` property matching within `ps` and `pe`.
      properties:
        ps:
          type: integer
          format: int32
          example: 12
          description: The start percentage of the 0 - 100% range. Same as the property `p` in `FanSpeedStep` object.
          minimum: 0
          maximum: 100
        pe:
          type: integer
          format: int32
          example: 49
          description: The end percentage of the 0 - 100% range. Same as the property `p` in `FanSpeedStep` object. This must be greater than the `ps` property.
          minimum: 0
          maximum: 100
        ext:
          type: boolean
          default: true
          example: true
          description: If this range of fanspeed `ps` and `pe` can be settable externally e.g. from the mobile app or not.
        pm1s:
          type: integer
          format: int32
          example: 9
          description: The PM1 start value at `ps`.
          minimum: 0
        pm1e:
          type: integer
          format: int32
          example: 19
          minimum: 0
          description: 'The PM1 end value at `pe`. If the `ps` == `pe` and this value is higher than `pm1s`, it means that PM1 may be in any of the range set in `pm1s` to and equal to `pm1e`. If the `pe` is higher than `ps` the scale from `pm1s` to `pm1e` is linear. Pleas refer to Haddings table in specification mentioned in the object description. If this value is omitted it is assumed that the `pm1e` value is the same as `pm1s`.'
        pm2_5s:
          type: integer
          format: int32
          example: 11
          description: The PM2.5 start value at `ps`.
          minimum: 0
        pm2_5e:
          type: integer
          format: int32
          example: 24
          minimum: 0
          description: The PM2.5 end value. See description in `pm1e` for more details about range and interpolation.
        pm10s:
          type: integer
          format: int32
          example: 21
          description: The PM10 start value at `ps`.
          minimum: 0
        pm10e:
          type: integer
          format: int32
          example: 49
          minimum: 0
          description: The PM10 end value. See description in `pm1e` for more details about range and interpolation.
        tvs:
          type: integer
          format: int32
          example: 221
          description: The tVOC start value at `ps`.
          minimum: 0
        tve:
          type: integer
          format: int32
          example: 499
          minimum: 0
          description: The tVOC end value at `pe`. This follows the same convention as described in the `pm1e` description.
        aqi:
          $ref: '#/components/schemas/AirQualityIndex'
      required:
        - ps
        - pe
        - pm1s
        - pm2_5s
        - pm10s
        - tvs
    FanSpeedStep:
      type: object
      description: This object defines a fixed step that matches a certain fan speed (in %) and a RPM. In order to set a percentage in between `FanSpeedStep` use interpolation between this step and the step above or below.
      properties:
        p:
          type: integer
          format: int32
          description: The percentage of the 0 - 100% range this step describes
        r:
          type: integer
          format: int32
          description: The RPM of the fan when `p` is in current value
        s:
          type: integer
          format: int32
          description: The fixed step this `p` represents.
      required:
        - p
        - r
        - s
    AutoModeActuator:
      allOf:
        - $ref: '#/components/schemas/Actuator'
        - type: object
          description: The auto-mode actuator sets fans-peed automatically based on pollution levels (sensors `pm25` and `tvoc`).
          properties:
            'n':
              type: string
              example: am
              default: am
              description: The name of auto-mode actuator is am.
            a:
              type: boolean
              example: false
              default: false
              description: If auto-mode is on or off.
            amt:
              type: string
              enum:
                - PM
                - PMtVOC
              default: PM
              description: 'Determines if only PM (1, 2.5 and 10) shall contorl the `fsp0` or if it also shall include the tVOC specified in the table `fspth`.'
            maxfsp:
              type: integer
              format: int32
              example: 100
              default: 100
              description: The amount of % that all actuators of fsp shall accept from the auto-mode algorithm. This means that when auto-mode the fanspeed may never exceed this value.
            fspth:
              type: array
              description: 'A table containing PM1,PM2.5, PM10 Tvoc, that translates to a  fan speed in %. The fanspeed is then used to set on all `fsp` actuators in the system (such as `fsp0`).'
              example:
                - ps: 11
                  pm1s: 0
                  pm1e: 8
                  pm2_5s: 0
                  pm2_5e: 10
                  pm10s: 0
                  pm10e: 20
                  tvs: 0
                  tve: 220
                  aqi: Excellent
                - ps: 12
                  pe: 50
                  pm1s: 9
                  pm1e: 20
                  pm2_5s: 11
                  pm2_5e: 25
                  pm10s: 21
                  pm10e: 50
                  tvs: 221
                  tve: 500
                  aqi: Good
                - ps: 51
                  pe: 70
                  pm1s: 21
                  pm1e: 28
                  pm2_5s: 26
                  pm2_5e: 35
                  pm10s: 51
                  pm10e: 70
                  tvs: 501
                  tve: 1000
                  aqi: Moderate
                - ps: 71
                  pe: 90
                  pm1s: 29
                  pm1e: 40
                  pm2_5s: 36
                  pm2_5e: 50
                  pm10s: 71
                  pm10e: 100
                  tvs: 1001
                  tve: 2200
                  aqi: Bad
                - ps: 91
                  pe: 100
                  pm1s: 41
                  pm1e: 999
                  pm2_5s: 51
                  pm2_5e: 999
                  pm10s: 101
                  pm10e: 999
                  tvs: 2201
                  tve: 5500
                  aqi: Very-Bad
              default:
                - ps: 11
                  pm1s: 0
                  pm1e: 8
                  pm2_5s: 0
                  pm2_5e: 10
                  pm10s: 0
                  pm10e: 20
                  tvs: 0
                  tve: 220
                  aqi: Excellent
                - ps: 12
                  pe: 50
                  pm1s: 9
                  pm1e: 20
                  pm2_5s: 11
                  pm2_5e: 25
                  pm10s: 21
                  pm10e: 50
                  tvs: 221
                  tve: 500
                  aqi: Good
                - ps: 51
                  pe: 70
                  pm1s: 21
                  pm1e: 28
                  pm2_5s: 26
                  pm2_5e: 35
                  pm10s: 51
                  pm10e: 70
                  tvs: 501
                  tve: 1000
                  aqi: Moderate
                - ps: 71
                  pe: 90
                  pm1s: 29
                  pm1e: 40
                  pm2_5s: 36
                  pm2_5e: 50
                  pm10s: 71
                  pm10e: 100
                  tvs: 1001
                  tve: 2200
                  aqi: Bad
                - ps: 91
                  pe: 100
                  pm1s: 41
                  pm1e: 999
                  pm2_5s: 51
                  pm2_5e: 999
                  pm10s: 101
                  pm10e: 999
                  tvs: 2201
                  tve: 5500
                  aqi: Very-Bad
              items:
                $ref: '#/components/schemas/FanspeedByPmTvocEntry'
            pmh:
              type: integer
              format: int32
              description: 'The hysteresis for PM1, PM2.5, and PM10 as described in G4-0017. Hysteresis is always expressed as +- this value.'
              default: 5
              example: 5
            tvh:
              type: integer
              format: int32
              description: The hysteresis for tVOC as described in G4-0017. Hysteresis is always expressed as +- this value.
              default: 50
              example: 50
            ot:
              type: string
              example: AutoMode
              default: AutoMode
              description: This is a auto-mode actuator
          required:
            - fspth
            - maxfsp
    ChildLockActuator:
      allOf:
        - $ref: '#/components/schemas/Actuator'
        - type: object
          description: The child-lock actuator allows for control of the child-lock mechanism of the device.
          properties:
            'n':
              type: string
              example: chl
              default: chl
              description: The name of child-lock actuator is chl.
            a:
              type: boolean
              example: false
              default: false
              description: If child-lock is on or off.
            ot:
              type: string
              example: ChildLock
              default: ChildLock
              description: This is a child-lock actuator
    Fans0SpeedActuator:
      allOf:
        - $ref: '#/components/schemas/Actuator'
        - type: object
          description: This actuator controls the fanspeed for fan zero.
          properties:
            'n':
              type: string
              example: fsp0
              default: fsp0
              description: The name is fsp0.
            a:
              type: integer
              format: int32
              example: 40
              default: 20
              description: The % of max speed for fan zero. Default is 20%.
            steps:
              type: array
              description: The pre-set-steps of a fan that is may take when using HMI on device to control it. Steps are from zero (off) to n where each step specifies the amount of % on `a`. The RPM in between stpes are interpolated between the steps. There may be entries with a other rpm between the steps. Thus it indicates that different interpolation values are exisitng within the same (`s`)tep.
              example:
                - s: 0
                  p: 0
                  r: 0
                - s: 0
                  p: 1
                  r: 250
                - s: 1
                  p: 11
                  r: 300
                - s: 2
                  p: 41
                  r: 450
                - s: 3
                  p: 71
                  r: 700
                - s: 3
                  p: 100
                  r: 900
              default:
                - s: 0
                  p: 0
                  r: 0
                - s: 0
                  p: 1
                  r: 250
                - s: 1
                  p: 11
                  r: 300
                - s: 2
                  p: 41
                  r: 450
                - s: 3
                  p: 71
                  r: 700
                - s: 3
                  p: 100
                  r: 900
              items:
                $ref: '#/components/schemas/FanSpeedStep'
            u:
              type: string
              example: '%'
              default: '%'
              enum:
                - '%'
              description: The control is between 0 - 100%.
            ot:
              type: string
              example: Fanspeed
              default: Fanspeed
              description: This is a fanspeed actuator
          required:
            - steps
    IonizerActuator:
      allOf:
        - $ref: '#/components/schemas/Actuator'
        - type: object
          description: The ionizer state actuator allows for control the ionizer on the device.
          properties:
            'n':
              type: string
              example: is
              default: is
              description: The name of ionizer state actuator is is.
            a:
              type: boolean
              example: false
              default: false
              description: If ionizer state is on (true) or off (true).
            ot:
              type: string
              example: IonizerState
              default: IonizerState
              description: This is a ionizer state actuator
    ResetParicleCountActuator:
      allOf:
        - $ref: '#/components/schemas/Actuator'
        - type: object
          description: The reset particle count actuator resets the `pmc` sensor.
          properties:
            'n':
              type: string
              example: pmc
              default: pmc
              description: The name of reset particle count actuator is pmc.
            a:
              type: boolean
              example: false
              description: This is a one off operation and the result is seen in the `pmc` sensor.
            p:
              default: false
            ot:
              type: string
              example: ParticleCountReset
              default: ParticleCountReset
              description: This is a resent particle count actuator
    Fan0RpmSpeedActuator:
      allOf:
        - $ref: '#/components/schemas/Actuator'
        - type: object
          description: Tis actuator sets the explicit RPM on the fan 0.
          properties:
            'n':
              type: string
              example: rpm0
              default: rpm0
              description: The name of the fanspeed 0 rpm actuator.
            a:
              type: integer
              format: int32
              description: The fanspeed for fan 0 is expressend in RPM.
            ot:
              type: string
              example: FanspeedRpm
              default: FanspeedRpm
              description: This is a fan speed (RPM) actuator
    LedBrightnessActuator:
      allOf:
        - $ref: '#/components/schemas/Actuator'
        - type: object
          description: A led brighness actuator.
          properties:
            'n':
              type: string
              example: ledb
              default: ledb
              description: The name of this sensor.
            a:
              type: integer
              format: int32
              example: 0
              default: 0
              description: The brightness i % 0 - 100.
            u:
              type: string
              example: '%'
              default: '%'
              enum:
                - '%'
              description: The control is between 0 - 100%.
            ot:
              type: string
              example: LedBrightness
              default: LedBrightness
              description: This is a led brighness actuator.
    Led0Actuator:
      allOf:
        - $ref: '#/components/schemas/Actuator'
        - type: object
          description: 'A led actuator can control the color and it''s RGB colors. If the led is not RGB it is indicated in the property `is-rgb` and the RGB value are latched to 0,0,0 and 255,255,255.'
          properties:
            'n':
              type: string
              example: led0
              default: led0
              description: The name of this sensor.
            a:
              type: string
              pattern: '(?:#)([a-fA-F0-9]{6})'
              example: '#FF03A26A'
              default: '#00000000'
              description: 'RGB is constituted by 6 characters is hex encoded [RGB](https://www.rapidtables.com/web/color/RGB_Color.html) values. Default is off.'
            is-rgb:
              type: boolean
              example: true
              default: true
              description: If it is a RGB color or not. When non RGB it can only take the two RGB values 000000 or FFFFFF.
            ot:
              type: string
              example: Led
              default: Led
              description: This is a led actuator.
    Led1Actuator:
      allOf:
        - $ref: '#/components/schemas/Actuator'
        - type: object
          description: 'A led actuator can control the led brightness and it''s RGB colors. If the led is not RGB it is indicated in the property `is-rgb` and the RGB value are latched to 0,0,0 and 255,255,255.'
          properties:
            'n':
              type: string
              example: led1
              default: led1
              description: The name of this sensor.
            a:
              type: string
              pattern: '(?:#)([a-fA-F0-9]{6})'
              example: '#FF03A26A'
              default: '#00000000'
              description: 'RGB is constituted by 6 characters is hex encoded [RGB](https://www.rapidtables.com/web/color/RGB_Color.html) values. Default is off.'
            is-rgb:
              type: boolean
              example: true
              default: true
              description: If it is a RGB color or not. When non RGB it can only take the two RGB values 000000 or FFFFFF.
            ot:
              type: string
              example: Led
              default: Led
              description: This is a led actuator.
    Led2Actuator:
      allOf:
        - $ref: '#/components/schemas/Actuator'
        - type: object
          description: 'A led actuator can control the color and it''s RGB colors. If the led is not RGB it is indicated in the property `is-rgb` and the RGB value are latched to 0,0,0 and 255,255,255.'
          properties:
            'n':
              type: string
              example: led2
              default: led2
              description: The name of this sensor.
            a:
              type: string
              pattern: '(?:#)([a-fA-F0-9]{6})'
              example: '#FF03A26A'
              default: '#00000000'
              description: 'RGB is constituted by 6 characters is hex encoded [RGB](https://www.rapidtables.com/web/color/RGB_Color.html) values. Default is off.'
            is-rgb:
              type: boolean
              example: true
              default: true
              description: If it is a RGB color or not. When non RGB it can only take the two RGB values 000000 or FFFFFF.
            ot:
              type: string
              example: Led
              default: Led
              description: This is a led actuator.
    Led3Actuator:
      allOf:
        - $ref: '#/components/schemas/Actuator'
        - type: object
          description: 'A led actuator can control the color and it''s RGB colors. If the led is not RGB it is indicated in the property `is-rgb` and the RGB value are latched to 0,0,0 and 255,255,255.'
          properties:
            'n':
              type: string
              example: led3
              default: led3
              description: The name of this sensor.
            a:
              type: string
              pattern: '(?:#)([a-fA-F0-9]{6})'
              example: '#FF03A26A'
              default: '#00000000'
              description: 'RGB is constituted by 6 characters is hex encoded [RGB](https://www.rapidtables.com/web/color/RGB_Color.html) values. Default is off.'
            is-rgb:
              type: boolean
              example: true
              default: true
              description: If it is a RGB color or not. When non RGB it can only take the two RGB values 000000 or FFFFFF.
            ot:
              type: string
              example: Led
              default: Led
              description: This is a led actuator.
    Led4Actuator:
      allOf:
        - $ref: '#/components/schemas/Actuator'
        - type: object
          description: 'A led actuator can control the color and it''s RGB colors. If the led is not RGB it is indicated in the property `is-rgb` and the RGB value are latched to 0,0,0 and 255,255,255.'
          properties:
            'n':
              type: string
              example: led4
              default: led4
              description: The name of this sensor.
            a:
              type: string
              pattern: '(?:#)([a-fA-F0-9]{6})'
              example: '#FF03A26A'
              default: '#00000000'
              description: 'RGB is constituted by 6 characters is hex encoded [RGB](https://www.rapidtables.com/web/color/RGB_Color.html) values. Default is off.'
            is-rgb:
              type: boolean
              example: true
              default: true
              description: If it is a RGB color or not. When non RGB it can only take the two RGB values 000000 or FFFFFF.
            ot:
              type: string
              example: Led
              default: Led
              description: This is a led actuator.
    Led5Actuator:
      allOf:
        - $ref: '#/components/schemas/Actuator'
        - type: object
          description: 'A led actuator can control the color and it''s RGB colors. If the led is not RGB it is indicated in the property `is-rgb` and the RGB value are latched to 0,0,0 and 255,255,255.'
          properties:
            'n':
              type: string
              example: led5
              default: led5
              description: The name of this sensor.
            a:
              type: string
              pattern: '(?:#)([a-fA-F0-9]{6})'
              example: '#FF03A26A'
              default: '#00000000'
              description: 'RGB is constituted by 6 characters is hex encoded [RGB](https://www.rapidtables.com/web/color/RGB_Color.html) values. Default is off.'
            is-rgb:
              type: boolean
              example: true
              default: true
              description: If it is a RGB color or not. When non RGB it can only take the two RGB values 000000 or FFFFFF.
            ot:
              type: string
              example: Led
              default: Led
              description: This is a led actuator.
    Led6Actuator:
      allOf:
        - $ref: '#/components/schemas/Actuator'
        - type: object
          description: 'A led actuator can control the color and it''s RGB colors. If the led is not RGB it is indicated in the property `is-rgb` and the RGB value are latched to 0,0,0 and 255,255,255.'
          properties:
            'n':
              type: string
              example: led6
              default: led6
              description: The name of this sensor.
            a:
              type: string
              pattern: '(?:#)([a-fA-F0-9]{6})'
              example: '#FF03A26A'
              default: '#00000000'
              description: 'RGB is constituted by 6 characters is hex encoded [RGB](https://www.rapidtables.com/web/color/RGB_Color.html) values. Default is off.'
            is-rgb:
              type: boolean
              example: true
              default: true
              description: If it is a RGB color or not. When non RGB it can only take the two RGB values 000000 or FFFFFF.
            ot:
              type: string
              example: Led
              default: Led
              description: This is a led actuator.
    Led7Actuator:
      allOf:
        - $ref: '#/components/schemas/Actuator'
        - type: object
          description: 'A led actuator can control the color and it''s RGB colors. If the led is not RGB it is indicated in the property `is-rgb` and the RGB value are latched to 0,0,0 and 255,255,255.'
          properties:
            'n':
              type: string
              example: led7
              default: led7
              description: The name of this sensor.
            a:
              type: string
              pattern: '(?:#)([a-fA-F0-9]{6})'
              example: '#FF03A26A'
              default: '#00000000'
              description: 'RGB is constituted by 6 characters is hex encoded [RGB](https://www.rapidtables.com/web/color/RGB_Color.html) values. Default is off.'
            is-rgb:
              type: boolean
              example: true
              default: true
              description: If it is a RGB color or not. When non RGB it can only take the two RGB values 000000 or FFFFFF.
            ot:
              type: string
              example: Led
              default: Led
              description: This is a led actuator.
    Led8Actuator:
      allOf:
        - $ref: '#/components/schemas/Actuator'
        - type: object
          description: 'A led actuator can control the color and it''s RGB colors. If the led is not RGB it is indicated in the property `is-rgb` and the RGB value are latched to 0,0,0 and 255,255,255.'
          properties:
            'n':
              type: string
              example: led8
              default: led8
              description: The name of this sensor.
            a:
              type: string
              pattern: '(?:#)([a-fA-F0-9]{6})'
              example: '#FF03A26A'
              default: '#00000000'
              description: 'RGB is constituted by 6 characters is hex encoded [RGB](https://www.rapidtables.com/web/color/RGB_Color.html) values. Default is off.'
            is-rgb:
              type: boolean
              example: true
              default: true
              description: If it is a RGB color or not. When non RGB it can only take the two RGB values 000000 or FFFFFF.
            ot:
              type: string
              example: Led
              default: Led
              description: This is a led actuator.
    AutoModeSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: The auto-mode sensor of which reports the status on the auto-mode on the device (enabled / disabled).
          properties:
            'n':
              type: string
              example: am
              default: am
              description: Name of this auto-mode sensor object.
            t:
              type: boolean
              description: This is a boolean sensor type
            ot:
              type: string
              example: AutoMode
              default: AutoMode
              description: Denotes that this sensor is a auto-mode sensor
    ChildLockSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: The child lock sensor of which reports the status on the child lock on the device.
          properties:
            'n':
              type: string
              example: chl
              default: chl
              description: Name of this child lock object.
            t:
              type: boolean
              description: This is a boolean sensor type
            ot:
              type: string
              example: ChildLock
              default: ChildLock
              description: Denotes that this sensor is a child-lock sensor
    AmbientLightSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: A sensor that measures the ambient light in %
          properties:
            'n':
              type: string
              example: aml
              default: aml
              description: Name of this ambient light sensor object.
            t:
              type: integer
              format: int32
              description: The light is expressed as in %.
            u:
              type: string
              example: '%'
              default: '%'
              enum:
                - '%'
              description: The % of *full* light
            ot:
              type: string
              example: AmbientLight
              default: AmbientLight
    Batch5MinSensor:
      allOf:
        - $ref: '#/components/schemas/CompositeSensor'
        - type: object
          description: Aggregated sensor data that is aggregated every 5 minutes but uploads several measurements in a batch set by the threshold. This sensor is soley to reduce the amount of packages sent to the cloud and thereby reduce the cost.
          properties:
            'n':
              type: string
              example: b5m
              default: b5m
              description: This sensor name is b5m.
            sn:
              example:
                - pm1
                - pm2_5
                - pm10
                - t
                - h
                - tVOC
              default:
                - pm1
                - pm2_5
                - pm10
                - t
                - h
                - tVOC
            tn:
              example: d/9707d52a-a4a2-42e4-ba95-bcccf068b323/s/batch/5m
              default: 'd/${did}/s/batch/5m'
            th:
              description: This sensor will emit a package when either 4 hours has passed (48 elements * all sensor data points in `c`) or if it calculates it will exceed 5kb (message cost unit on AWS).
              example:
                - 5kb
                - 4h
              default:
                - 5kb
                - 4h
            ot:
              type: string
              example: Batch5m
              default: Batch5m
              description: Denotes that this sensor a 5 minute aggregated batch sensor
    CurrentSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: This sensor is the main current sensor.
          properties:
            'n':
              type: string
              example: c
              default: c
              description: Name of this current sensor
            t:
              type: number
              format: float
              description: The A is measured as floating point number.
            u:
              type: string
              example: A
              default: A
              enum:
                - A
              description: The current is measured in Ampere
            ot:
              type: string
              example: Current
              default: Current
              description: This is a main current sensor
    Co2Sensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: This sensor reports the co2 concentration in ppm.
          properties:
            'n':
              type: string
              example: co2
              default: co2
              description: Name of this co2 sensor
            t:
              type: integer
              format: int32
              minimum: 0
              maximum: 1000
              description: The value is 0 - 1000 ppm of co2
            u:
              type: string
              example: ppm
              default: ppm
              enum:
                - ppm
              description: The co2 concentration is reported in ppm.
            ot:
              type: string
              example: Co2
              default: Co2
              description: This is a co2 sensor
    Cpu0Sensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: The cpu 0 utilization sensor
          properties:
            'n':
              type: string
              example: cpu0
              default: cpu0
              description: Name of this cpu 0 utilization sensor object.
            t:
              type: number
              format: float
              minimum: 0
              maximum: 100
              description: The cpu utilization in %.
            u:
              type: string
              example: '%'
              default: '%'
              enum:
                - '%'
              description: The the cpu utilization is reported in %
            ot:
              type: string
              example: CpuUtilization
              default: CpuUtilization
              description: Denotes that this sensor is a cpu utilization sensor
    Cpu1Sensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: The cpu 1 utilization sensor
          properties:
            'n':
              type: string
              example: cpu1
              default: cpu1
              description: Name of this cpu 1 utilization sensor object.
            t:
              type: number
              format: float
              minimum: 0
              maximum: 100
              description: The cpu utilization in %.
            u:
              type: string
              example: '%'
              default: '%'
              enum:
                - '%'
              description: The the cpu utilization is reported in %
            ot:
              type: string
              example: CpuUtilization
              default: CpuUtilization
              description: Denotes that this sensor is a cpu utilization sensor
    FormaldehydeSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: This sensor is the main formaldehyde sensor.
          properties:
            'n':
              type: string
              example: f
              default: f
              description: Name of this formaldehyde sensor
            t:
              type: number
              format: float
              description: The gas is measured as floating point number.
            u:
              type: string
              example: ppb
              default: ppb
              enum:
                - ppb
              description: The gas is measured in parts per billion
            fe:
              type: boolean
              example: false
              default: false
              description: 'Not part of the device, will be in future.'
            ot:
              type: string
              example: Formaldehyde
              default: Formaldehyde
              description: This is a generic formaldehyde gas sensor
    Filter0PresenceSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: A sensor that detects if a filter 0 is present or not.
          properties:
            'n':
              type: string
              example: fp0
              default: fp0
              description: Name of this filter 0 presence sensor object.
            t:
              type: boolean
              description: The filter 0 is either injected (true) or not (false).
            ot:
              type: string
              example: FilterPresence
              default: FilterPresence
    Fan0SpeedSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: This sensor reports the current fanspeed on fan zero. The minimum and maximum speed is determined by the `FanSpeedActuator.steps` array. Where the last entry is maxspeed in percent and min speed is first entry.
          properties:
            'n':
              type: string
              example: fsp0
              default: fsp0
              description: Name of this fan object
            t:
              type: integer
              format: int32
              description: The fanspeed is expressend in integer %.
            ot:
              type: string
              example: Fanspeed
              default: Fanspeed
              description: This is a fanspeed sensor
    Filter0UsageSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: This sensor reports the current filter 0 usage in percent.
          properties:
            'n':
              type: string
              example: fu0
              default: fu0
              description: Name of this filter 0 usage sensor
            t:
              type: integer
              format: int32
              minimum: 0
              maximum: 100
              description: The value is 100% (unused) - 0% (saturated) of filter usage.
            u:
              type: string
              example: '%'
              default: '%'
              enum:
                - '%'
              description: The filter 0 usage is reported in 100 - 0% range.
            ot:
              type: string
              example: FU
              default: FU
              description: This is a filter usage sensor
    HumiditySensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: This sensor reports the humidity on main humidity sensor.
          properties:
            'n':
              type: string
              example: h
              default: h
              description: Name of this humidity sensor
            t:
              type: number
              format: float
              description: The humidity is repored using a floating point number.
            u:
              type: string
              example: '%RH'
              default: '%RH'
              enum:
                - '%RH'
              description: The humidity is measured in relative humidity percentage.
            ot:
              type: string
              example: Humidity
              default: Humidity
              description: This is a humidity sensor
    Heap0MemorySensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: The amount of free heap memory sensor.
          properties:
            'n':
              type: string
              example: hm0
              default: hm0
              description: Name of this heap memory sensor object.
            t:
              type: number
              format: float
              minimum: 0
              description: The free heap memory in kilo bytes
            u:
              type: string
              example: kb
              default: kb
              enum:
                - kb
              description: The the amount of free heap memory
            ot:
              type: string
              example: HeapMemory
              default: HeapMemory
              description: Denotes that this sensor is a free heap memory sensor
    Heap1MemorySensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: The amount of free heap memory sensor.
          properties:
            'n':
              type: string
              example: hm1
              default: hm1
              description: Name of this heap memory sensor object.
            t:
              type: number
              format: float
              minimum: 0
              description: The free heap memory in kilo bytes
            u:
              type: string
              example: kb
              default: kb
              enum:
                - kb
              description: The the amount of free heap memory
            ot:
              type: string
              example: HeapMemory
              default: HeapMemory
              description: Denotes that this sensor is a free heap memory sensor
    FrequencySensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: This sensor is the main frequency sensor.
          properties:
            'n':
              type: string
              example: hz
              default: hz
              description: Name of this frequency sensor
            t:
              type: number
              format: float
              description: The Hz is measured as floating point number.
            u:
              type: string
              example: Hz
              default: Hz
              enum:
                - Hz
              description: The current is measured in Hertz
            ot:
              type: string
              example: Frequenecy
              default: Frequenecy
              description: This is a main frequency sensor
    IonizerSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: This sensor reports if the ionizer is on or off.
          properties:
            'n':
              type: string
              example: is
              default: is
              description: Name of this ionizer state sensor
            t:
              type: boolean
              default: false
              description: It is either on (true) or off (false).
            ot:
              type: string
              example: IonizerState
              default: IonizerState
              description: This is a ionizer state sensor
    PowerConsumptionSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: This sensor is the main power consumption sensor.
          properties:
            'n':
              type: string
              example: p
              default: p
              description: Name of this power consumption sensor
            t:
              type: number
              format: float
              description: The W is measured as floating point number.
            u:
              type: string
              example: W
              default: W
              enum:
                - W
              description: The power consumption is measured in Watts
            ot:
              type: string
              example: PowerConsumption
              default: PowerConsumption
              description: This is a main power consumption sensor
    PM1MeasurementSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: A sensor that measures in air particles up to 1 micrometers.
          properties:
            'n':
              type: string
              example: pm1
              default: pm1
              description: Name of this pm1 sensor object.
            t:
              type: number
              format: float
              description: The PM value is expressed in a float.
            u:
              type: string
              example: ug/m3
              default: ug/m3
              enum:
                - ug/m3
              description: The PM concentration.
            ot:
              type: string
              example: PM1
              default: PM1
    PM25MeasurementSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: A sensor that measures in air particles in 2.5 micrometers.
          properties:
            'n':
              type: string
              example: pm10
              default: pm10
              description: Name of this pm10 sensor object.
            t:
              type: number
              format: float
              description: The PM value is expressed in a float.
            u:
              type: string
              example: ug/m3
              default: ug/m3
              enum:
                - ug/m3
              description: The PM concentration.
            aqith:
              example:
                good: 120
                moderate: 354
                sensitive-unhealthy: 554
                unhealthy: 1504
                very-unhealthy: 2504
                hazardous: 5004
              default:
                good: 120
                moderate: 354
                sensitive-unhealthy: 554
                unhealthy: 1504
                very-unhealthy: 2504
                hazardous: 5004
              type: object
              description: Specifies a AQI threshold configuration object that may be evaluated on a purifier device.
              properties:
                excellent:
                  type: integer
                  format: int32
                  example: 12
                  description: A unsigned integer 16 bit that specifies the threshold that the aggregated PM sensor value max can have in order to get the `Excellent` AQI value.The unit value is ug/m3.
                good:
                  type: integer
                  format: int32
                  example: 25
                  description: A unsigned integer 16 bit that specifies the threshold that the aggregated PM sensor value max can have in order to get the `Good` AQI value.The unit value is ug/m3.
                moderate:
                  type: integer
                  format: int32
                  example: 30
                  description: A unsigned integer 16 bit that specifies the threshold that the aggregated PM sensor value max can have in order to get the `Moderate` AQI value.The unit value is ug/m3.
                bad:
                  type: integer
                  format: int32
                  example: 40
                  description: A unsigned integer 16 bit that specifies the threshold that the aggregated PM sensor value max can have in order to get the `Bad` AQI value.The unit value is ug/m3.
                very-bad:
                  type: integer
                  format: int32
                  example: 60
                  description: A unsigned integer 16 bit that specifies the threshold that the aggregated PM sensor value max can have in order to get the `Very-Bad` AQI value.The unit value is ug/m3.
            ot:
              type: string
              example: PM2_5
              default: PM2_5
    PM10MeasurementSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: A sensor that measures in air particles up to 10 micrometers.
          properties:
            'n':
              type: string
              example: pm10
              default: pm10
              description: Name of this pm10 sensor object.
            t:
              type: number
              format: float
              description: The PM value is expressed in a float.
            u:
              type: string
              example: ug/m3
              default: ug/m3
              enum:
                - ug/m3
              description: The PM concentration.
            ot:
              type: string
              example: PM10
              default: PM10
    PM1CountSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: This sensor reports the pm1 sensor particle count.
          properties:
            'n':
              type: string
              example: pm1c
              default: pm1c
              description: Name of this pm1 particle count sensor
            t:
              type: integer
              format: int64
              minimum: 0
              description: The 64 count
            u:
              type: string
              example: count
              default: count
              enum:
                - count
              description: The particle count is a counter.
            ot:
              type: string
              example: PMParticleCount
              default: PMParticleCount
              description: This is a pm particle count sensor
    PM25CountSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: This sensor reports the pm2.5 sensor particle count.
          properties:
            'n':
              type: string
              example: pm2_5c
              default: pm2_5c
              description: Name of this pm2.5 particle count sensor
            t:
              type: integer
              format: int64
              minimum: 0
              description: The 64 count
            u:
              type: string
              example: count
              default: count
              enum:
                - count
              description: The particle count is a counter.
            ot:
              type: string
              example: PMParticleCount
              default: PMParticleCount
              description: This is a pm particle count sensor
    PM10CountSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: This sensor reports the pm10 sensor particle count.
          properties:
            'n':
              type: string
              example: pm10c
              default: pm10c
              description: Name of this pm10 particle count sensor
            t:
              type: integer
              format: int64
              minimum: 0
              description: The 64 count
            u:
              type: string
              example: count
              default: count
              enum:
                - count
              description: The particle count is a counter.
            ot:
              type: string
              example: PMParticleCount
              default: PMParticleCount
              description: This is a pm particle count sensor
    ProximitySensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: The proximity sensor of which reports true when someone is close to the device. This sensor cannot be reached without some serious claims. This is meant for testing in the factory.
          properties:
            'n':
              type: string
              example: px
              default: px
              description: Name of this proximity sensor object.
            t:
              type: boolean
              description: This is a boolean sensor type
            ot:
              type: string
              example: Proximity
              default: Proximity
              description: Denotes that this sensor is a proximity sensor
    Fan0RpmSpeedSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: This sensor reports the current fanspeed on fan zero in RPM.
          properties:
            'n':
              type: string
              example: rpm0
              default: rpm0
              description: Name of this fan rpm sensor.
            t:
              type: integer
              format: int32
              description: The fanspeed is expressend in RPM.
            u:
              type: string
              example: 1/min
              default: 1/min
              enum:
                - 1/min
              description: The fanspeed is in RPM.
            ot:
              type: string
              example: FanspeedRpm
              default: FanspeedRpm
              description: This is a fanspeed sensor in RPM
    RSSISensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: This sensor reports the current RSSI on the Wi-Fi chip.
          properties:
            'n':
              type: string
              example: rssi
              default: rssi
              description: Name of this rssi sensor
            t:
              $ref: '#/components/schemas/RSSI'
              description: The RSSI is expressed as dBM. See `PercievedRSSI` for levels.
            u:
              type: string
              example: dBm
              default: dBm
              enum:
                - dBm
              description: The filter usage is reported in 0 - 100% range.
            ot:
              type: string
              example: RSSI
              default: RSSI
              description: This is a rssi dBM sensor
    RealTime1SecondSensor:
      allOf:
        - $ref: '#/components/schemas/CompositeSensor'
        - type: object
          description: Aggregated sensor data updated every 1 seconds. This is used for debugging only.
          properties:
            'n':
              type: string
              example: rt1s
              default: rt1s
              description: This sensor name is 1s.
            sn:
              example:
                - pm1
                - pm2_5
                - pm10
                - t
                - h
                - tVOC
                - rssi
              default:
                - pm1
                - pm2_5
                - pm10
                - t
                - h
                - tVOC
                - rssi
            tn:
              example: d/9707d52a-a4a2-42e4-ba95-bcccf068b323/s/1s
              default: 'd/${did}/s/1s'
            ot:
              type: string
              example: RT1s
              default: RT1s
              description: Denotes that this sensor a 1 seconds realtime sensor.
    RealTime5MinuteSensor:
      allOf:
        - $ref: '#/components/schemas/CompositeSensor'
        - type: object
          description: Aggregated sensor data updated every 5 minutes.
          properties:
            'n':
              type: string
              example: rt5m
              default: rt5m
              description: This sensor name is rt5m.
            sn:
              example:
                - pm1
                - pm2_5
                - pm10
                - t
                - h
                - tVOC
              default:
                - pm1
                - pm2_5
                - pm10
                - t
                - h
                - tVOC
            tn:
              example: d/9707d52a-a4a2-42e4-ba95-bcccf068b323/s/5m
              default: 'd/${did}/s/5m'
            ot:
              type: string
              example: RT5m
              default: RT5m
              description: Denotes that this sensor a 5 minute realtime sensor
    RealTime5SecondSensor:
      allOf:
        - $ref: '#/components/schemas/CompositeSensor'
        - type: object
          description: Aggregated sensor data updated every 5 seconds.
          properties:
            'n':
              type: string
              example: rt5s
              default: rt5s
              description: This sensor name is 5s.
            sn:
              example:
                - pm1
                - pm2_5
                - pm10
                - t
                - h
                - tVOC
              default:
                - pm1
                - pm2_5
                - pm10
                - t
                - h
                - tVOC
            tn:
              example: d/9707d52a-a4a2-42e4-ba95-bcccf068b323/s/5s
              default: 'd/${did}/s/5s'
            ot:
              type: string
              example: RT5s
              default: RT5s
              description: Denotes that this sensor a 5 seconds realtime sensor
    Stack0MemorySensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: The amount of free stack memory sensor.
          properties:
            'n':
              type: string
              example: sm0
              default: sm0
              description: Name of this stack memory sensor object.
            t:
              type: number
              format: float
              minimum: 0
              description: The free stack memory in kilo bytes
            u:
              type: string
              example: kb
              default: kb
              enum:
                - kb
              description: The the amount of free stack memory
            ot:
              type: string
              example: StackMemory
              default: StackMemory
              description: Denotes that this sensor is a free stack memory sensor
    Stack1MemorySensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: The amount of free stack memory sensor.
          properties:
            'n':
              type: string
              example: sm1
              default: sm1
              description: Name of this stack memory sensor object.
            t:
              type: number
              format: float
              minimum: 0
              description: The free stack memory in kilo bytes
            u:
              type: string
              example: kb
              default: kb
              enum:
                - kb
              description: The the amount of free stack memory
            ot:
              type: string
              example: StackMemory
              default: StackMemory
              description: Denotes that this sensor is a free stack memory sensor
    SensorBoxPresenceSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: A sensor that detects if a sensor-box is present or not.
          properties:
            'n':
              type: string
              example: sp
              default: sp
              description: Name of this sensor-box presence sensor object.
            t:
              type: boolean
              description: The sensor-box is either injected (true) or not (false).
            ot:
              type: string
              example: SensorBoxPresense
              default: SensorBoxPresense
    SafetySwitch0Sensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: A sensor that detects if the safety switch 0 is on or off.
          properties:
            'n':
              type: string
              example: ss0
              default: ss0
              description: Name of this safety switch sensor 0 object.
            t:
              type: boolean
              description: The safety switch is either on (true) or off (false).
            ot:
              type: string
              example: SafetySwitch
              default: SafetySwitch
    TempratureSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: This sensor reports the temperature on main temperature sensor.
          properties:
            'n':
              type: string
              example: t
              default: t
              description: Name of this temperature sensor
            t:
              type: number
              format: float
              description: The temperature is repored using a floating point number.
            u:
              type: string
              example: Cel
              default: Cel
              enum:
                - Cel
              description: The temperature is measured in Celcius
            ot:
              type: string
              example: Temperature
              default: Temperature
              description: This is a temperature sensor
    TvocSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: 'This sensor is the main generic (Total Volatile Organic Compounds) sensor, which are the total amount of any emitted gases coming from toxins and chemicals.'
          properties:
            'n':
              type: string
              example: tVOC
              default: tVOC
              description: Name of this gas sensor
            t:
              type: number
              format: float
              description: The gas is measured as floating point number.
            u:
              type: string
              example: ppb
              default: ppb
              enum:
                - ppb
              description: The tvoc is measured in parts per billion
            ot:
              type: string
              example: TVOC
              default: TVOC
              description: This is a generic tvoc gas sensor
    UptimeSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: This sensor reports the current uptime for the communication device when last rebooted.
          properties:
            'n':
              type: string
              example: upt
              default: upt
              description: Name of this uptime sensor
            t:
              type: integer
              format: int64
              description: The 64 bit Unix time
            u:
              type: string
              example: ms
              default: ms
              enum:
                - ms
              description: The uptime is measured in milliseconds since unix epoch.
            ot:
              type: string
              example: Uptime
              default: Uptime
              description: This is a uptime sensor
    VoltageSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: This sensor is the main voltage sensor.
          properties:
            'n':
              type: string
              example: v
              default: v
              description: Name of this voltage sensor
            t:
              type: number
              format: float
              description: The V is measured as floating point number.
            u:
              type: string
              example: V
              default: V
              enum:
                - V
              description: The current is measured in Volt
            ot:
              type: string
              example: Voltage
              default: Voltage
              description: This is a main voltage sensor
    LedBrightnessSensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: A led brightness sensor measuring the light in the led.
          properties:
            'n':
              type: string
              example: ledb
              default: ledb
              description: Name of this led brightness sensor.
            t:
              type: integer
              format: int32
              description: A value between 0 - 100%.
            u:
              type: string
              example: '%'
              default: '%'
              enum:
                - '%'
              description: The brighness between 0 and 100%
            ot:
              type: string
              example: LedBrightness
              default: LedBrightness
              description: This is a led sensor
    Led0Sensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: 'A led sensor is either a RGB or non RGB. If the sensor is not RGB it is indicated in the property `is-rgb` and the RGB value are latched to 0,0,0 and 255,255,255.'
          properties:
            'n':
              type: string
              example: led0
              default: led0
              description: Name of this led 0 sensor
            t:
              type: string
              pattern: '(?:#)([a-fA-F0-9]{6})'
              description: 'RGB is constituted by 6 characters is hex encoded [RGB](https://www.rapidtables.com/web/color/RGB_Color.html) values.'
            is-rgb:
              type: boolean
              example: true
              default: true
              description: If it is a RGB color or just white.
            ot:
              type: string
              example: Led
              default: Led
              description: This is a led sensor
    Led1Sensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: 'A led sensor is either a RGB or non RGB. If the sensor is not RGB it is indicated in the property `is-rgb` and the RGB value are latched to 0,0,0 and 255,255,255.'
          properties:
            'n':
              type: string
              example: led1
              default: led1
              description: Name of this led 1 sensor
            t:
              type: string
              pattern: '(?:#)([a-fA-F0-9]{6})'
              description: 'RGB is constituted by 6 characters is hex encoded [RGB](https://www.rapidtables.com/web/color/RGB_Color.html) values.'
            is-rgb:
              type: boolean
              example: true
              default: true
              description: If it is a RGB color or just white.
            ot:
              type: string
              example: Led
              default: Led
              description: This is a led sensor
    Led2Sensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: 'A led sensor is either a RGB or non RGB. If the sensor is not RGB it is indicated in the property `is-rgb` and the RGB value are latched to 0,0,0 and 255,255,255.'
          properties:
            'n':
              type: string
              example: led2
              default: led2
              description: Name of this led 2 sensor
            t:
              type: string
              pattern: '(?:#)([a-fA-F0-9]{6})'
              description: 'RGB is constituted by 6 characters is hex encoded [RGB](https://www.rapidtables.com/web/color/RGB_Color.html) values.'
            is-rgb:
              type: boolean
              example: true
              default: true
              description: If it is a RGB color or just white.
            ot:
              type: string
              example: Led
              default: Led
              description: This is a led sensor
    Led3Sensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: 'A led sensor is either a RGB or non RGB. If the sensor is not RGB it is indicated in the property `is-rgb` and the RGB value are latched to 0,0,0 and 255,255,255.'
          properties:
            'n':
              type: string
              example: led3
              default: led3
              description: Name of this led 3 sensor
            t:
              type: string
              pattern: '(?:#)([a-fA-F0-9]{6})'
              description: 'RGB is constituted by 6 characters is hex encoded [RGB](https://www.rapidtables.com/web/color/RGB_Color.html) values.'
            is-rgb:
              type: boolean
              example: true
              default: true
              description: If it is a RGB color or just white.
            ot:
              type: string
              example: Led
              default: Led
              description: This is a led sensor
    Led4Sensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: 'A led sensor is either a RGB or non RGB. If the sensor is not RGB it is indicated in the property `is-rgb` and the RGB value are latched to 0,0,0 and 255,255,255.'
          properties:
            'n':
              type: string
              example: led4
              default: led4
              description: Name of this led 4 sensor
            t:
              type: string
              pattern: '(?:#)([a-fA-F0-9]{6})'
              description: 'RGB is constituted by 6 characters is hex encoded [RGB](https://www.rapidtables.com/web/color/RGB_Color.html) values.'
            is-rgb:
              type: boolean
              example: true
              default: true
              description: If it is a RGB color or just white.
            ot:
              type: string
              example: Led
              default: Led
              description: This is a led sensor
    Led5Sensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: 'A led sensor is either a RGB or non RGB. If the sensor is not RGB it is indicated in the property `is-rgb` and the RGB value are latched to 0,0,0 and 255,255,255.'
          properties:
            'n':
              type: string
              example: led5
              default: led5
              description: Name of this led 5 sensor
            t:
              type: string
              pattern: '(?:#)([a-fA-F0-9]{6})'
              description: 'RGB is constituted by 6 characters is hex encoded [RGB](https://www.rapidtables.com/web/color/RGB_Color.html) values.'
            is-rgb:
              type: boolean
              example: true
              default: true
              description: If it is a RGB color or just white.
            ot:
              type: string
              example: Led
              default: Led
              description: This is a led sensor
    Led6Sensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: 'A led sensor is either a RGB or non RGB. If the sensor is not RGB it is indicated in the property `is-rgb` and the RGB value are latched to 0,0,0 and 255,255,255.'
          properties:
            'n':
              type: string
              example: led6
              default: led6
              description: Name of this led 6 sensor
            t:
              type: string
              pattern: '(?:#)([a-fA-F0-9]{6})'
              description: 'RGB is constituted by 6 characters is hex encoded [RGB](https://www.rapidtables.com/web/color/RGB_Color.html) values.'
            is-rgb:
              type: boolean
              example: true
              default: true
              description: If it is a RGB color or just white.
            ot:
              type: string
              example: Led
              default: Led
              description: This is a led sensor
    Led7Sensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: 'A led sensor is either a RGB or non RGB. If the sensor is not RGB it is indicated in the property `is-rgb` and the RGB value are latched to 0,0,0 and 255,255,255.'
          properties:
            'n':
              type: string
              example: led7
              default: led7
              description: Name of this led 7 sensor
            t:
              type: string
              pattern: '(?:#)([a-fA-F0-9]{6})'
              description: 'RGB is constituted by 6 characters is hex encoded [RGB](https://www.rapidtables.com/web/color/RGB_Color.html) values.'
            is-rgb:
              type: boolean
              example: true
              default: true
              description: If it is a RGB color or just white.
            ot:
              type: string
              example: Led
              default: Led
              description: This is a led sensor
    Led8Sensor:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: 'A led sensor is either a RGB or non RGB. If the sensor is not RGB it is indicated in the property `is-rgb` and the RGB value are latched to 0,0,0 and 255,255,255.'
          properties:
            'n':
              type: string
              example: led8
              default: led8
              description: Name of this led 8 sensor
            t:
              type: string
              pattern: '(?:#)([a-fA-F0-9]{6})'
              description: 'RGB is constituted by 6 characters is hex encoded [RGB](https://www.rapidtables.com/web/color/RGB_Color.html) values.'
            is-rgb:
              type: boolean
              example: true
              default: true
              description: If it is a RGB color or just white.
            ot:
              type: string
              example: Led
              default: Led
              description: This is a led sensor
    Filter:
      type: object
      description: This filter object describes which algorithm and parameters it has to it's disposal. Derived object may include more parameters.
      properties:
        alg:
          type: string
          enum:
            - FilterAlg1
            - FilterAlg2
          description: This is the filter algorithm used to calculate the usage
        ot:
          type: string
          example: Filter
          default: Filter
          description: 'This is a object type, where subclasses **SHALL** override.'
      required:
        - alg
        - ot
    G4Filter:
      allOf:
        - $ref: '#/components/schemas/Filter'
        - type: object
          description: This is the G4 standard generic filter.
          properties:
            alg:
              example: FilterAlg1
              default: FilterAlg1
            a:
              type: number
              format: float
              example: 77
              default: 77
              description: This is the parameter one
            ot:
              type: string
              example: G4Filter
              default: G4Filter
              description: This is G4 geneic filter.
          required:
            - a
    G4Actuators:
      type: object
      description: The supported actuators in a generic g4 device.
      properties:
        fsp0:
          $ref: '#/components/schemas/Fans0SpeedActuator'
        chl:
          $ref: '#/components/schemas/ChildLockActuator'
        am:
          $ref: '#/components/schemas/AutoModeActuator'
        pmc:
          $ref: '#/components/schemas/ResetParicleCountActuator'
        is:
          $ref: '#/components/schemas/IonizerActuator'
        rpm0:
          $ref: '#/components/schemas/Fan0RpmSpeedActuator'
        ledb:
          $ref: '#/components/schemas/LedBrightnessActuator'
        led0:
          $ref: '#/components/schemas/Led0Actuator'
        led1:
          $ref: '#/components/schemas/Led1Actuator'
        led2:
          $ref: '#/components/schemas/Led2Actuator'
        led3:
          $ref: '#/components/schemas/Led3Actuator'
        led4:
          $ref: '#/components/schemas/Led4Actuator'
        led5:
          $ref: '#/components/schemas/Led5Actuator'
        led6:
          $ref: '#/components/schemas/Led6Actuator'
        led7:
          $ref: '#/components/schemas/Led7Actuator'
        led8:
          $ref: '#/components/schemas/Led8Actuator'
    G4Baseline:
      type: object
      description: 'This object contains configuration for the device to allow it to communicate and handle its identity. This object is seldom, if never, updated and is not exposed from the device to the cloud (if not forced to). This is due to the fact that it contains several secrets that should not be exposed in the open.'
      properties:
        did:
          type: string
          format: uuid
          description: The device UUID
          example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
          default: '${did}'
        o-cid:
          type: string
          example: badevice
          description: The OAuth client id for the device OAuth client.
        o-cs:
          type: string
          example: 1289rekojdmklfhiu12h932
          description: The OAuth client secret (password) for the device OAuth client.
        c-cli:
          type: string
          format: base64
          description: The client certificate when TLS1.2 Client auth. This is used when e.g. mutual TLS in MQTT authentication. In addition it serves as a local TLS 1.2 server certificate for this device.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${client-cert}'
        c-d:
          type: string
          format: base64
          description: The OTA signing PEM encoded X509 certificate with public key to verify and authenticate a OTA signature
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${ota-cert}'
        c-f:
          type: string
          format: base64
          description: The PEM encoded X509 certificate with public key to verify and authenticate a RDFID based filter
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${filter-cert}'
        psk:
          type: string
          description: The pre shared key of which the device will use when authenticating itself with id of the contents of `did` and thís key.
          default: '${pre-shared-key}'
        c-i:
          type: string
          format: base64
          description: The IdP endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the IdP.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert}'
        c-r:
          type: string
          format: base64
          description: 'The cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. Some cloud vendors demands an additional certificate to authenticate with the API / Broker, even if `api-cert` is provided.'
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert}'
        c-b:
          type: string
          format: base64
          description: The API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert}'
        k-jwt:
          type: string
          format: base64
          description: The certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key}'
        u-jwks:
          type: string
          format: uri
          example: 'https://idp.device.blueair.io/1.0.0/c/jwks'
          default: '${device-jwks-url}'
          description: An optional JWKS endpoint to download JWT verification certificates.
        k-jwt2:
          type: string
          format: base64
          description: The backup certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key2}'
        c-i2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the IdP if the first one is compromised
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert2}'
        c-r2:
          type: string
          format: base64
          description: The backup cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. This may be used if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert2}'
        c-b2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the API / Broker if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert2}'
      required:
        - did
        - c-cli
        - c-d
        - c-f
        - psk
        - c-i
        - c-b
        - k-jwt
        - k-jwt2
        - c-i2
        - c-b2
    G4DynamicConfig:
      type: object
      description: |-
        Dynamic config. This may be extended therefore it allows for custom attributes to be added. The attribute value must however always be of type `DynamicConfig`. The max amount of dynamic config entires are 50.
        There is a `BUG in OpenAPI` that do not reflect the defaults if there is default for a whole JSON object. It is emitted correctly in the JSON schema but the default documentation compltely ignores it. Therefore a table on each dyanmic config object is outlined and asked to ignore the individual examples. Instead the outlined table is the actual truth.
      properties:
        fanspeed:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          default:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          description: The dynamic configration for main fan. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>fanspeed</td> <td>integer</td> <td>fsp0</td> <td>fsp0</td> <td></td> <td>20</td> <td>1s</td> </tr> </table>
        childlock:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          default:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          description: The dynamic configration for child lock. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>childlock</td> <td>boolean</td> <td>chl</td> <td>chl</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        automode:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          default:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          description: The dynamic configration for auto mode. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>automode</td> <td>boolean</td> <td>am</td> <td>am</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        ofv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          default:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          description: The dynamic configration (static) for overall firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>ofv</td> <td>string</td> <td></td> <td></td> <td>i.ofv</td> <td>0.0.0</td> <td></td> </tr> </table>
        mfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          default:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          description: The dynamic configration (static) for mcu chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>mfv</td> <td>string</td> <td></td> <td></td> <td>i.mfv</td> <td>0.0.0</td> <td></td> </tr> </table>
        cfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          default:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          description: The dynamic configration (static) for communication chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>cfv</td> <td>string</td> <td></td> <td></td> <td>i.cfv</td> <td>0.0.0</td> <td></td> </tr> </table>
    G4DeviceConfiguration:
      allOf:
        - $ref: '#/components/schemas/CmConfig'
        - type: object
          description: This is the generic configuration for a G4 device.
          properties:
            di:
              $ref: '#/components/schemas/G4InfoBlock'
            db:
              $ref: '#/components/schemas/G4Baseline'
            ds:
              $ref: '#/components/schemas/G4Sensors'
            da:
              $ref: '#/components/schemas/G4Actuators'
            dc:
              $ref: '#/components/schemas/G4DynamicConfig'
            df:
              $ref: '#/components/schemas/G4Filter'
            fc:
              $ref: '#/components/schemas/Factory'
            _ot:
              type: string
              example: G4DeviceConfiguration
          xml:
            name: g4-device-config
    G4InfoBlock:
      type: object
      description: Info block that contains e.g. firmware versions and other descriptive information about the device and it's hardware.
      properties:
        ofv:
          $ref: '#/components/schemas/Version'
          example: 2.0.0
          description: 'The main version as specified in the `pmeta` object. The main version is a semantic version that includes several sub-versions. If individual entities has been upgraded after it will not reflect that. This is expressed as [SemVer](https://semver.org) scheme.'
        mfv:
          $ref: '#/components/schemas/Version'
          example: 1.2.1
          description: 'The MCU firmware version expressed as [Semver](https://semver.org) scheme.'
        cfv:
          $ref: '#/components/schemas/Version'
          example: 3.0.0
          description: 'The communication chip firmware version expressed as [Semver](https://semver.org) scheme.'
        cma:
          type: string
          pattern: '^([[:xdigit:]]{2}[:.-]?){5}[[:xdigit:]]{2}$'
          example: '3D:F2:C9:A6:B3:4F'
          description: The mac address of the communication chip.
        ds:
          $ref: '#/components/schemas/Serial'
          description: 'The device serial number. It is based on. It is based on. Item Number (3), Revision (3), Manufacturer (3), Manufacturer Plant (1), Production Line (2), Station (1), Running Number (7)'
        sku:
          $ref: '#/components/schemas/SKU'
          description: The device / PCB SKU.
    G4Sensors:
      type: object
      description: The supported sensors in a generic g4 device.
      properties:
        fsp0:
          $ref: '#/components/schemas/Fan0SpeedSensor'
        chl:
          $ref: '#/components/schemas/ChildLockSensor'
        am:
          $ref: '#/components/schemas/AutoModeSensor'
        pm1:
          $ref: '#/components/schemas/PM1MeasurementSensor'
        pm2_5:
          $ref: '#/components/schemas/PM25MeasurementSensor'
        pm10:
          $ref: '#/components/schemas/PM10MeasurementSensor'
        rssi:
          $ref: '#/components/schemas/RSSISensor'
        fu0:
          $ref: '#/components/schemas/Filter0UsageSensor'
        upt:
          $ref: '#/components/schemas/UptimeSensor'
        h:
          $ref: '#/components/schemas/HumiditySensor'
        t:
          $ref: '#/components/schemas/TempratureSensor'
        tVOC:
          $ref: '#/components/schemas/TvocSensor'
        f:
          $ref: '#/components/schemas/FormaldehydeSensor'
        aml:
          $ref: '#/components/schemas/AmbientLightSensor'
        fp0:
          $ref: '#/components/schemas/Filter0PresenceSensor'
        co2:
          $ref: '#/components/schemas/Co2Sensor'
        ss0:
          $ref: '#/components/schemas/SafetySwitch0Sensor'
        px:
          $ref: '#/components/schemas/ProximitySensor'
        pm1c:
          $ref: '#/components/schemas/PM1CountSensor'
        pm2_5c:
          $ref: '#/components/schemas/PM25CountSensor'
        pm10c:
          $ref: '#/components/schemas/PM10CountSensor'
        rpm0:
          $ref: '#/components/schemas/Fan0RpmSpeedSensor'
        sp:
          $ref: '#/components/schemas/SensorBoxPresenceSensor'
        is:
          $ref: '#/components/schemas/IonizerSensor'
        p:
          $ref: '#/components/schemas/PowerConsumptionSensor'
        c:
          $ref: '#/components/schemas/CurrentSensor'
        hz:
          $ref: '#/components/schemas/FrequencySensor'
        v:
          $ref: '#/components/schemas/VoltageSensor'
        cpu0:
          $ref: '#/components/schemas/Cpu0Sensor'
        cpu1:
          $ref: '#/components/schemas/Cpu1Sensor'
        sm0:
          $ref: '#/components/schemas/Stack0MemorySensor'
        sm1:
          $ref: '#/components/schemas/Stack1MemorySensor'
        hm0:
          $ref: '#/components/schemas/Heap0MemorySensor'
        hm1:
          $ref: '#/components/schemas/Heap1MemorySensor'
        rt1s:
          $ref: '#/components/schemas/RealTime1SecondSensor'
        rt5s:
          $ref: '#/components/schemas/RealTime5SecondSensor'
        rt5m:
          $ref: '#/components/schemas/RealTime5MinuteSensor'
        b5m:
          $ref: '#/components/schemas/Batch5MinSensor'
        ledb:
          $ref: '#/components/schemas/LedBrightnessSensor'
        led0:
          $ref: '#/components/schemas/Led0Sensor'
        led1:
          $ref: '#/components/schemas/Led1Sensor'
        led2:
          $ref: '#/components/schemas/Led2Sensor'
        led3:
          $ref: '#/components/schemas/Led3Sensor'
        led4:
          $ref: '#/components/schemas/Led4Sensor'
        led5:
          $ref: '#/components/schemas/Led5Sensor'
        led6:
          $ref: '#/components/schemas/Led6Sensor'
        led7:
          $ref: '#/components/schemas/Led7Sensor'
        led8:
          $ref: '#/components/schemas/Led8Sensor'
    SKU105011Actuators:
      type: object
      description: 'The supported actuators for the SKU 105011, CONTROL-747x/757x PCBA.'
      properties:
        fsp0:
          $ref: '#/components/schemas/Fans0SpeedActuator'
    SKU105011Baseline:
      type: object
      description: 'This object contains configuration for the device to allow it to communicate and handle its identity. This object is seldom, if never, updated and is not exposed from the device to the cloud (if not forced to). This is due to the fact that it contains several secrets that should not be exposed in the open.'
      properties:
        did:
          type: string
          format: uuid
          description: The device UUID
          example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
          default: '${did}'
        o-cid:
          type: string
          example: badevice
          description: The OAuth client id for the device OAuth client.
        o-cs:
          type: string
          example: 1289rekojdmklfhiu12h932
          description: The OAuth client secret (password) for the device OAuth client.
        c-cli:
          type: string
          format: base64
          description: The client certificate when TLS1.2 Client auth. This is used when e.g. mutual TLS in MQTT authentication. In addition it serves as a local TLS 1.2 server certificate for this device.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${client-cert}'
        c-d:
          type: string
          format: base64
          description: The OTA signing PEM encoded X509 certificate with public key to verify and authenticate a OTA signature
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${ota-cert}'
        c-f:
          type: string
          format: base64
          description: The PEM encoded X509 certificate with public key to verify and authenticate a RDFID based filter
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${filter-cert}'
        psk:
          type: string
          description: The pre shared key of which the device will use when authenticating itself with id of the contents of `did` and thís key.
          default: '${pre-shared-key}'
        c-i:
          type: string
          format: base64
          description: The IdP endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the IdP.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert}'
        c-r:
          type: string
          format: base64
          description: 'The cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. Some cloud vendors demands an additional certificate to authenticate with the API / Broker, even if `api-cert` is provided.'
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert}'
        c-b:
          type: string
          format: base64
          description: The API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert}'
        k-jwt:
          type: string
          format: base64
          description: The certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key}'
        u-jwks:
          type: string
          format: uri
          example: 'https://idp.device.blueair.io/1.0.0/c/jwks'
          default: '${device-jwks-url}'
          description: An optional JWKS endpoint to download JWT verification certificates.
        k-jwt2:
          type: string
          format: base64
          description: The backup certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key2}'
        c-i2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the IdP if the first one is compromised
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert2}'
        c-r2:
          type: string
          format: base64
          description: The backup cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. This may be used if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert2}'
        c-b2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the API / Broker if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert2}'
      required:
        - did
        - c-cli
        - c-d
        - c-f
        - psk
        - c-i
        - c-b
        - k-jwt
        - k-jwt2
        - c-i2
        - c-b2
    SKU105011DynamicConfig:
      type: object
      description: |-
        Dynamic config. This may be extended therefore it allows for custom attributes to be added. The attribute value must however always be of type `DynamicConfig`. The max amount of dynamic config entires are 50.
        There is a `BUG in OpenAPI` that do not reflect the defaults if there is default for a whole JSON object. It is emitted correctly in the JSON schema but the default documentation compltely ignores it. Therefore a table on each dyanmic config object is outlined and asked to ignore the individual examples. Instead the outlined table is the actual truth.
      properties:
        fanspeed:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          default:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          description: The dynamic configration for main fan. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>fanspeed</td> <td>integer</td> <td>fsp0</td> <td>fsp0</td> <td></td> <td>20</td> <td>1s</td> </tr> </table>
        childlock:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          default:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          description: The dynamic configration for child lock. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>childlock</td> <td>boolean</td> <td>chl</td> <td>chl</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        automode:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          default:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          description: The dynamic configration for auto mode. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>automode</td> <td>boolean</td> <td>am</td> <td>am</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        ofv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          default:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          description: The dynamic configration (static) for overall firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>ofv</td> <td>string</td> <td></td> <td></td> <td>i.ofv</td> <td>0.0.0</td> <td></td> </tr> </table>
        mfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          default:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          description: The dynamic configration (static) for mcu chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>mfv</td> <td>string</td> <td></td> <td></td> <td>i.mfv</td> <td>0.0.0</td> <td></td> </tr> </table>
        cfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          default:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          description: The dynamic configration (static) for communication chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>cfv</td> <td>string</td> <td></td> <td></td> <td>i.cfv</td> <td>0.0.0</td> <td></td> </tr> </table>
    SKU105011Configuration:
      allOf:
        - $ref: '#/components/schemas/CmConfig'
        - type: object
          description: 'This is the configuration for the SKU 105011, CONTROL-747x/757x PCBA.'
          properties:
            di:
              $ref: '#/components/schemas/SKU105011InfoBlock'
            db:
              $ref: '#/components/schemas/SKU105011Baseline'
            ds:
              $ref: '#/components/schemas/SKU105011Sensors'
            da:
              $ref: '#/components/schemas/SKU105011Actuators'
            dc:
              $ref: '#/components/schemas/SKU105011DynamicConfig'
            df:
              $ref: '#/components/schemas/G4Filter'
            fc:
              $ref: '#/components/schemas/Factory'
            _ot:
              type: string
              example: 105011
          xml:
            name: 105011-config
    SKU105011InfoBlock:
      type: object
      description: Info block that contains e.g. firmware versions and other descriptive information about the device and it's hardware.
      properties:
        ofv:
          $ref: '#/components/schemas/Version'
          example: 2.0.0
          description: 'The main version as specified in the `pmeta` object. The main version is a semantic version that includes several sub-versions. If individual entities has been upgraded after it will not reflect that. This is expressed as [SemVer](https://semver.org) scheme.'
        mfv:
          $ref: '#/components/schemas/Version'
          example: 1.2.1
          description: 'The MCU firmware version expressed as [Semver](https://semver.org) scheme.'
        cfv:
          $ref: '#/components/schemas/Version'
          example: 3.0.0
          description: 'The communication chip firmware version expressed as [Semver](https://semver.org) scheme.'
        cma:
          type: string
          pattern: '^([[:xdigit:]]{2}[:.-]?){5}[[:xdigit:]]{2}$'
          example: '3D:F2:C9:A6:B3:4F'
          description: The mac address of the communication chip.
        ds:
          $ref: '#/components/schemas/Serial'
          description: 'The device serial number. It is based on. It is based on. Item Number (3), Revision (3), Manufacturer (3), Manufacturer Plant (1), Production Line (2), Station (1), Running Number (7)'
        sku:
          $ref: '#/components/schemas/SKU'
          example: '105011'
          default: '105011'
          description: The device / PCB SKU.
    SKU105011Sensors:
      type: object
      description: 'The supported sensors for the SKU 105011, CONTROL-747x/757x PCBA.'
      properties:
        fsp0:
          $ref: '#/components/schemas/Fan0SpeedSensor'
        pm2_5:
          $ref: '#/components/schemas/PM25MeasurementSensor'
        rt5s:
          $ref: '#/components/schemas/RealTime5SecondSensor'
        b5m:
          $ref: '#/components/schemas/Batch5MinSensor'
    SKU104859Actuators:
      type: object
      description: The supported actuators for the SKU 104859
      properties:
        fsp0:
          $ref: '#/components/schemas/Fans0SpeedActuator'
    SKU104859Baseline:
      type: object
      description: 'This object contains configuration for the device to allow it to communicate and handle its identity. This object is seldom, if never, updated and is not exposed from the device to the cloud (if not forced to). This is due to the fact that it contains several secrets that should not be exposed in the open.'
      properties:
        did:
          type: string
          format: uuid
          description: The device UUID
          example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
          default: '${did}'
        o-cid:
          type: string
          example: badevice
          description: The OAuth client id for the device OAuth client.
        o-cs:
          type: string
          example: 1289rekojdmklfhiu12h932
          description: The OAuth client secret (password) for the device OAuth client.
        c-cli:
          type: string
          format: base64
          description: The client certificate when TLS1.2 Client auth. This is used when e.g. mutual TLS in MQTT authentication. In addition it serves as a local TLS 1.2 server certificate for this device.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${client-cert}'
        c-d:
          type: string
          format: base64
          description: The OTA signing PEM encoded X509 certificate with public key to verify and authenticate a OTA signature
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${ota-cert}'
        c-f:
          type: string
          format: base64
          description: The PEM encoded X509 certificate with public key to verify and authenticate a RDFID based filter
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${filter-cert}'
        psk:
          type: string
          description: The pre shared key of which the device will use when authenticating itself with id of the contents of `did` and thís key.
          default: '${pre-shared-key}'
        c-i:
          type: string
          format: base64
          description: The IdP endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the IdP.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert}'
        c-r:
          type: string
          format: base64
          description: 'The cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. Some cloud vendors demands an additional certificate to authenticate with the API / Broker, even if `api-cert` is provided.'
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert}'
        c-b:
          type: string
          format: base64
          description: The API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert}'
        k-jwt:
          type: string
          format: base64
          description: The certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key}'
        u-jwks:
          type: string
          format: uri
          example: 'https://idp.device.blueair.io/1.0.0/c/jwks'
          default: '${device-jwks-url}'
          description: An optional JWKS endpoint to download JWT verification certificates.
        k-jwt2:
          type: string
          format: base64
          description: The backup certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key2}'
        c-i2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the IdP if the first one is compromised
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert2}'
        c-r2:
          type: string
          format: base64
          description: The backup cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. This may be used if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert2}'
        c-b2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the API / Broker if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert2}'
      required:
        - did
        - c-cli
        - c-d
        - c-f
        - psk
        - c-i
        - c-b
        - k-jwt
        - k-jwt2
        - c-i2
        - c-b2
    SKU104859DynamicConfig:
      type: object
      description: |-
        Dynamic config. This may be extended therefore it allows for custom attributes to be added. The attribute value must however always be of type `DynamicConfig`. The max amount of dynamic config entires are 50.
        There is a `BUG in OpenAPI` that do not reflect the defaults if there is default for a whole JSON object. It is emitted correctly in the JSON schema but the default documentation compltely ignores it. Therefore a table on each dyanmic config object is outlined and asked to ignore the individual examples. Instead the outlined table is the actual truth.
      properties:
        fanspeed:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          default:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          description: The dynamic configration for main fan. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>fanspeed</td> <td>integer</td> <td>fsp0</td> <td>fsp0</td> <td></td> <td>20</td> <td>1s</td> </tr> </table>
        childlock:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          default:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          description: The dynamic configration for child lock. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>childlock</td> <td>boolean</td> <td>chl</td> <td>chl</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        automode:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          default:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          description: The dynamic configration for auto mode. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>automode</td> <td>boolean</td> <td>am</td> <td>am</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        ofv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          default:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          description: The dynamic configration (static) for overall firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>ofv</td> <td>string</td> <td></td> <td></td> <td>i.ofv</td> <td>0.0.0</td> <td></td> </tr> </table>
        mfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          default:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          description: The dynamic configration (static) for mcu chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>mfv</td> <td>string</td> <td></td> <td></td> <td>i.mfv</td> <td>0.0.0</td> <td></td> </tr> </table>
        cfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          default:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          description: The dynamic configration (static) for communication chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>cfv</td> <td>string</td> <td></td> <td></td> <td>i.cfv</td> <td>0.0.0</td> <td></td> </tr> </table>
    SKU104859Configuration:
      allOf:
        - $ref: '#/components/schemas/CmConfig'
        - type: object
          description: This is the configuration for the SKU 104859
          properties:
            di:
              $ref: '#/components/schemas/SKU104859InfoBlock'
            db:
              $ref: '#/components/schemas/SKU104859Baseline'
            ds:
              $ref: '#/components/schemas/SKU104859Sensors'
            da:
              $ref: '#/components/schemas/SKU104859Actuators'
            dc:
              $ref: '#/components/schemas/SKU104859DynamicConfig'
            df:
              $ref: '#/components/schemas/G4Filter'
            fc:
              $ref: '#/components/schemas/Factory'
            _ot:
              type: string
              example: 104859
          xml:
            name: 104859-config
    SKU104859InfoBlock:
      type: object
      description: Info block that contains e.g. firmware versions and other descriptive information about the device and it's hardware.
      properties:
        ofv:
          $ref: '#/components/schemas/Version'
          example: 2.0.0
          description: 'The main version as specified in the `pmeta` object. The main version is a semantic version that includes several sub-versions. If individual entities has been upgraded after it will not reflect that. This is expressed as [SemVer](https://semver.org) scheme.'
        mfv:
          $ref: '#/components/schemas/Version'
          example: 1.2.1
          description: 'The MCU firmware version expressed as [Semver](https://semver.org) scheme.'
        cfv:
          $ref: '#/components/schemas/Version'
          example: 3.0.0
          description: 'The communication chip firmware version expressed as [Semver](https://semver.org) scheme.'
        cma:
          type: string
          pattern: '^([[:xdigit:]]{2}[:.-]?){5}[[:xdigit:]]{2}$'
          example: '3D:F2:C9:A6:B3:4F'
          description: The mac address of the communication chip.
        ds:
          $ref: '#/components/schemas/Serial'
          description: 'The device serial number. It is based on. It is based on. Item Number (3), Revision (3), Manufacturer (3), Manufacturer Plant (1), Production Line (2), Station (1), Running Number (7)'
        sku:
          $ref: '#/components/schemas/SKU'
          example: '105011'
          default: '105011'
          description: The device / PCB SKU.
    SKU104859Sensors:
      type: object
      description: The supported sensors for the SKU 104859
      properties:
        fsp0:
          $ref: '#/components/schemas/Fan0SpeedSensor'
        pm2_5:
          $ref: '#/components/schemas/PM25MeasurementSensor'
        rt5s:
          $ref: '#/components/schemas/RealTime5SecondSensor'
        b5m:
          $ref: '#/components/schemas/Batch5MinSensor'
    SKU104861Actuators:
      type: object
      description: The supported actuators for the SKU 104861
      properties:
        fsp0:
          $ref: '#/components/schemas/Fans0SpeedActuator'
    SKU104861Baseline:
      type: object
      description: 'This object contains configuration for the device to allow it to communicate and handle its identity. This object is seldom, if never, updated and is not exposed from the device to the cloud (if not forced to). This is due to the fact that it contains several secrets that should not be exposed in the open.'
      properties:
        did:
          type: string
          format: uuid
          description: The device UUID
          example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
          default: '${did}'
        o-cid:
          type: string
          example: badevice
          description: The OAuth client id for the device OAuth client.
        o-cs:
          type: string
          example: 1289rekojdmklfhiu12h932
          description: The OAuth client secret (password) for the device OAuth client.
        c-cli:
          type: string
          format: base64
          description: The client certificate when TLS1.2 Client auth. This is used when e.g. mutual TLS in MQTT authentication. In addition it serves as a local TLS 1.2 server certificate for this device.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${client-cert}'
        c-d:
          type: string
          format: base64
          description: The OTA signing PEM encoded X509 certificate with public key to verify and authenticate a OTA signature
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${ota-cert}'
        c-f:
          type: string
          format: base64
          description: The PEM encoded X509 certificate with public key to verify and authenticate a RDFID based filter
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${filter-cert}'
        psk:
          type: string
          description: The pre shared key of which the device will use when authenticating itself with id of the contents of `did` and thís key.
          default: '${pre-shared-key}'
        c-i:
          type: string
          format: base64
          description: The IdP endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the IdP.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert}'
        c-r:
          type: string
          format: base64
          description: 'The cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. Some cloud vendors demands an additional certificate to authenticate with the API / Broker, even if `api-cert` is provided.'
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert}'
        c-b:
          type: string
          format: base64
          description: The API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert}'
        k-jwt:
          type: string
          format: base64
          description: The certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key}'
        u-jwks:
          type: string
          format: uri
          example: 'https://idp.device.blueair.io/1.0.0/c/jwks'
          default: '${device-jwks-url}'
          description: An optional JWKS endpoint to download JWT verification certificates.
        k-jwt2:
          type: string
          format: base64
          description: The backup certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key2}'
        c-i2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the IdP if the first one is compromised
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert2}'
        c-r2:
          type: string
          format: base64
          description: The backup cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. This may be used if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert2}'
        c-b2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the API / Broker if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert2}'
      required:
        - did
        - c-cli
        - c-d
        - c-f
        - psk
        - c-i
        - c-b
        - k-jwt
        - k-jwt2
        - c-i2
        - c-b2
    SKU104861DynamicConfig:
      type: object
      description: |-
        Dynamic config. This may be extended therefore it allows for custom attributes to be added. The attribute value must however always be of type `DynamicConfig`. The max amount of dynamic config entires are 50.
        There is a `BUG in OpenAPI` that do not reflect the defaults if there is default for a whole JSON object. It is emitted correctly in the JSON schema but the default documentation compltely ignores it. Therefore a table on each dyanmic config object is outlined and asked to ignore the individual examples. Instead the outlined table is the actual truth.
      properties:
        fanspeed:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          default:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          description: The dynamic configration for main fan. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>fanspeed</td> <td>integer</td> <td>fsp0</td> <td>fsp0</td> <td></td> <td>20</td> <td>1s</td> </tr> </table>
        childlock:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          default:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          description: The dynamic configration for child lock. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>childlock</td> <td>boolean</td> <td>chl</td> <td>chl</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        automode:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          default:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          description: The dynamic configration for auto mode. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>automode</td> <td>boolean</td> <td>am</td> <td>am</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        ofv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          default:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          description: The dynamic configration (static) for overall firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>ofv</td> <td>string</td> <td></td> <td></td> <td>i.ofv</td> <td>0.0.0</td> <td></td> </tr> </table>
        mfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          default:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          description: The dynamic configration (static) for mcu chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>mfv</td> <td>string</td> <td></td> <td></td> <td>i.mfv</td> <td>0.0.0</td> <td></td> </tr> </table>
        cfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          default:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          description: The dynamic configration (static) for communication chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>cfv</td> <td>string</td> <td></td> <td></td> <td>i.cfv</td> <td>0.0.0</td> <td></td> </tr> </table>
    SKU104861Configuration:
      allOf:
        - $ref: '#/components/schemas/CmConfig'
        - type: object
          description: This is the configuration for the SKU 104861
          properties:
            di:
              $ref: '#/components/schemas/SKU104861InfoBlock'
            db:
              $ref: '#/components/schemas/SKU104861Baseline'
            ds:
              $ref: '#/components/schemas/SKU104861Sensors'
            da:
              $ref: '#/components/schemas/SKU104861Actuators'
            dc:
              $ref: '#/components/schemas/SKU104861DynamicConfig'
            df:
              $ref: '#/components/schemas/G4Filter'
            fc:
              $ref: '#/components/schemas/Factory'
            _ot:
              type: string
              example: 104861
          xml:
            name: 104861-config
    SKU104861InfoBlock:
      type: object
      description: Info block that contains e.g. firmware versions and other descriptive information about the device and it's hardware.
      properties:
        ofv:
          $ref: '#/components/schemas/Version'
          example: 2.0.0
          description: 'The main version as specified in the `pmeta` object. The main version is a semantic version that includes several sub-versions. If individual entities has been upgraded after it will not reflect that. This is expressed as [SemVer](https://semver.org) scheme.'
        mfv:
          $ref: '#/components/schemas/Version'
          example: 1.2.1
          description: 'The MCU firmware version expressed as [Semver](https://semver.org) scheme.'
        cfv:
          $ref: '#/components/schemas/Version'
          example: 3.0.0
          description: 'The communication chip firmware version expressed as [Semver](https://semver.org) scheme.'
        cma:
          type: string
          pattern: '^([[:xdigit:]]{2}[:.-]?){5}[[:xdigit:]]{2}$'
          example: '3D:F2:C9:A6:B3:4F'
          description: The mac address of the communication chip.
        ds:
          $ref: '#/components/schemas/Serial'
          description: 'The device serial number. It is based on. It is based on. Item Number (3), Revision (3), Manufacturer (3), Manufacturer Plant (1), Production Line (2), Station (1), Running Number (7)'
        sku:
          $ref: '#/components/schemas/SKU'
          example: '105011'
          default: '105011'
          description: The device / PCB SKU.
    SKU104861Sensors:
      type: object
      description: The supported sensors for the SKU 104861
      properties:
        fsp0:
          $ref: '#/components/schemas/Fan0SpeedSensor'
        pm2_5:
          $ref: '#/components/schemas/PM25MeasurementSensor'
        rt5s:
          $ref: '#/components/schemas/RealTime5SecondSensor'
        b5m:
          $ref: '#/components/schemas/Batch5MinSensor'
    SKU104863Actuators:
      type: object
      description: The supported actuators for the SKU 104863
      properties:
        fsp0:
          $ref: '#/components/schemas/Fans0SpeedActuator'
    SKU104863Baseline:
      type: object
      description: 'This object contains configuration for the device to allow it to communicate and handle its identity. This object is seldom, if never, updated and is not exposed from the device to the cloud (if not forced to). This is due to the fact that it contains several secrets that should not be exposed in the open.'
      properties:
        did:
          type: string
          format: uuid
          description: The device UUID
          example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
          default: '${did}'
        o-cid:
          type: string
          example: badevice
          description: The OAuth client id for the device OAuth client.
        o-cs:
          type: string
          example: 1289rekojdmklfhiu12h932
          description: The OAuth client secret (password) for the device OAuth client.
        c-cli:
          type: string
          format: base64
          description: The client certificate when TLS1.2 Client auth. This is used when e.g. mutual TLS in MQTT authentication. In addition it serves as a local TLS 1.2 server certificate for this device.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${client-cert}'
        c-d:
          type: string
          format: base64
          description: The OTA signing PEM encoded X509 certificate with public key to verify and authenticate a OTA signature
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${ota-cert}'
        c-f:
          type: string
          format: base64
          description: The PEM encoded X509 certificate with public key to verify and authenticate a RDFID based filter
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${filter-cert}'
        psk:
          type: string
          description: The pre shared key of which the device will use when authenticating itself with id of the contents of `did` and thís key.
          default: '${pre-shared-key}'
        c-i:
          type: string
          format: base64
          description: The IdP endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the IdP.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert}'
        c-r:
          type: string
          format: base64
          description: 'The cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. Some cloud vendors demands an additional certificate to authenticate with the API / Broker, even if `api-cert` is provided.'
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert}'
        c-b:
          type: string
          format: base64
          description: The API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert}'
        k-jwt:
          type: string
          format: base64
          description: The certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key}'
        u-jwks:
          type: string
          format: uri
          example: 'https://idp.device.blueair.io/1.0.0/c/jwks'
          default: '${device-jwks-url}'
          description: An optional JWKS endpoint to download JWT verification certificates.
        k-jwt2:
          type: string
          format: base64
          description: The backup certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key2}'
        c-i2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the IdP if the first one is compromised
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert2}'
        c-r2:
          type: string
          format: base64
          description: The backup cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. This may be used if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert2}'
        c-b2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the API / Broker if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert2}'
      required:
        - did
        - c-cli
        - c-d
        - c-f
        - psk
        - c-i
        - c-b
        - k-jwt
        - k-jwt2
        - c-i2
        - c-b2
    SKU104863DynamicConfig:
      type: object
      description: |-
        Dynamic config. This may be extended therefore it allows for custom attributes to be added. The attribute value must however always be of type `DynamicConfig`. The max amount of dynamic config entires are 50.
        There is a `BUG in OpenAPI` that do not reflect the defaults if there is default for a whole JSON object. It is emitted correctly in the JSON schema but the default documentation compltely ignores it. Therefore a table on each dyanmic config object is outlined and asked to ignore the individual examples. Instead the outlined table is the actual truth.
      properties:
        fanspeed:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          default:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          description: The dynamic configration for main fan. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>fanspeed</td> <td>integer</td> <td>fsp0</td> <td>fsp0</td> <td></td> <td>20</td> <td>1s</td> </tr> </table>
        childlock:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          default:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          description: The dynamic configration for child lock. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>childlock</td> <td>boolean</td> <td>chl</td> <td>chl</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        automode:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          default:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          description: The dynamic configration for auto mode. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>automode</td> <td>boolean</td> <td>am</td> <td>am</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        ofv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          default:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          description: The dynamic configration (static) for overall firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>ofv</td> <td>string</td> <td></td> <td></td> <td>i.ofv</td> <td>0.0.0</td> <td></td> </tr> </table>
        mfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          default:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          description: The dynamic configration (static) for mcu chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>mfv</td> <td>string</td> <td></td> <td></td> <td>i.mfv</td> <td>0.0.0</td> <td></td> </tr> </table>
        cfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          default:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          description: The dynamic configration (static) for communication chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>cfv</td> <td>string</td> <td></td> <td></td> <td>i.cfv</td> <td>0.0.0</td> <td></td> </tr> </table>
    SKU104863Configuration:
      allOf:
        - $ref: '#/components/schemas/CmConfig'
        - type: object
          description: This is the configuration for the SKU 104863
          properties:
            di:
              $ref: '#/components/schemas/SKU104863InfoBlock'
            db:
              $ref: '#/components/schemas/SKU104863Baseline'
            ds:
              $ref: '#/components/schemas/SKU104863Sensors'
            da:
              $ref: '#/components/schemas/SKU104863Actuators'
            dc:
              $ref: '#/components/schemas/SKU104863DynamicConfig'
            df:
              $ref: '#/components/schemas/G4Filter'
            fc:
              $ref: '#/components/schemas/Factory'
            _ot:
              type: string
              example: 104863
          xml:
            name: 104863-config
    SKU104863InfoBlock:
      type: object
      description: Info block that contains e.g. firmware versions and other descriptive information about the device and it's hardware.
      properties:
        ofv:
          $ref: '#/components/schemas/Version'
          example: 2.0.0
          description: 'The main version as specified in the `pmeta` object. The main version is a semantic version that includes several sub-versions. If individual entities has been upgraded after it will not reflect that. This is expressed as [SemVer](https://semver.org) scheme.'
        mfv:
          $ref: '#/components/schemas/Version'
          example: 1.2.1
          description: 'The MCU firmware version expressed as [Semver](https://semver.org) scheme.'
        cfv:
          $ref: '#/components/schemas/Version'
          example: 3.0.0
          description: 'The communication chip firmware version expressed as [Semver](https://semver.org) scheme.'
        cma:
          type: string
          pattern: '^([[:xdigit:]]{2}[:.-]?){5}[[:xdigit:]]{2}$'
          example: '3D:F2:C9:A6:B3:4F'
          description: The mac address of the communication chip.
        ds:
          $ref: '#/components/schemas/Serial'
          description: 'The device serial number. It is based on. It is based on. Item Number (3), Revision (3), Manufacturer (3), Manufacturer Plant (1), Production Line (2), Station (1), Running Number (7)'
        sku:
          $ref: '#/components/schemas/SKU'
          example: '105011'
          default: '105011'
          description: The device / PCB SKU.
    SKU104863Sensors:
      type: object
      description: The supported sensors for the SKU 104863
      properties:
        fsp0:
          $ref: '#/components/schemas/Fan0SpeedSensor'
        pm2_5:
          $ref: '#/components/schemas/PM25MeasurementSensor'
        rt5s:
          $ref: '#/components/schemas/RealTime5SecondSensor'
        b5m:
          $ref: '#/components/schemas/Batch5MinSensor'
    SKU105013Actuators:
      type: object
      description: 'The supported actuators for the SKU 105013, CONTROL-744x/754x PCBA.'
      properties:
        fsp0:
          $ref: '#/components/schemas/Fans0SpeedActuator'
    SKU105013Baseline:
      type: object
      description: 'This object contains configuration for the device to allow it to communicate and handle its identity. This object is seldom, if never, updated and is not exposed from the device to the cloud (if not forced to). This is due to the fact that it contains several secrets that should not be exposed in the open.'
      properties:
        did:
          type: string
          format: uuid
          description: The device UUID
          example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
          default: '${did}'
        o-cid:
          type: string
          example: badevice
          description: The OAuth client id for the device OAuth client.
        o-cs:
          type: string
          example: 1289rekojdmklfhiu12h932
          description: The OAuth client secret (password) for the device OAuth client.
        c-cli:
          type: string
          format: base64
          description: The client certificate when TLS1.2 Client auth. This is used when e.g. mutual TLS in MQTT authentication. In addition it serves as a local TLS 1.2 server certificate for this device.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${client-cert}'
        c-d:
          type: string
          format: base64
          description: The OTA signing PEM encoded X509 certificate with public key to verify and authenticate a OTA signature
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${ota-cert}'
        c-f:
          type: string
          format: base64
          description: The PEM encoded X509 certificate with public key to verify and authenticate a RDFID based filter
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${filter-cert}'
        psk:
          type: string
          description: The pre shared key of which the device will use when authenticating itself with id of the contents of `did` and thís key.
          default: '${pre-shared-key}'
        c-i:
          type: string
          format: base64
          description: The IdP endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the IdP.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert}'
        c-r:
          type: string
          format: base64
          description: 'The cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. Some cloud vendors demands an additional certificate to authenticate with the API / Broker, even if `api-cert` is provided.'
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert}'
        c-b:
          type: string
          format: base64
          description: The API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert}'
        k-jwt:
          type: string
          format: base64
          description: The certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key}'
        u-jwks:
          type: string
          format: uri
          example: 'https://idp.device.blueair.io/1.0.0/c/jwks'
          default: '${device-jwks-url}'
          description: An optional JWKS endpoint to download JWT verification certificates.
        k-jwt2:
          type: string
          format: base64
          description: The backup certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key2}'
        c-i2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the IdP if the first one is compromised
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert2}'
        c-r2:
          type: string
          format: base64
          description: The backup cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. This may be used if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert2}'
        c-b2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the API / Broker if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert2}'
      required:
        - did
        - c-cli
        - c-d
        - c-f
        - psk
        - c-i
        - c-b
        - k-jwt
        - k-jwt2
        - c-i2
        - c-b2
    SKU105013DynamicConfig:
      type: object
      description: |-
        Dynamic config. This may be extended therefore it allows for custom attributes to be added. The attribute value must however always be of type `DynamicConfig`. The max amount of dynamic config entires are 50.
        There is a `BUG in OpenAPI` that do not reflect the defaults if there is default for a whole JSON object. It is emitted correctly in the JSON schema but the default documentation compltely ignores it. Therefore a table on each dyanmic config object is outlined and asked to ignore the individual examples. Instead the outlined table is the actual truth.
      properties:
        fanspeed:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          default:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          description: The dynamic configration for main fan. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>fanspeed</td> <td>integer</td> <td>fsp0</td> <td>fsp0</td> <td></td> <td>20</td> <td>1s</td> </tr> </table>
        childlock:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          default:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          description: The dynamic configration for child lock. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>childlock</td> <td>boolean</td> <td>chl</td> <td>chl</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        automode:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          default:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          description: The dynamic configration for auto mode. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>automode</td> <td>boolean</td> <td>am</td> <td>am</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        ofv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          default:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          description: The dynamic configration (static) for overall firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>ofv</td> <td>string</td> <td></td> <td></td> <td>i.ofv</td> <td>0.0.0</td> <td></td> </tr> </table>
        mfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          default:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          description: The dynamic configration (static) for mcu chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>mfv</td> <td>string</td> <td></td> <td></td> <td>i.mfv</td> <td>0.0.0</td> <td></td> </tr> </table>
        cfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          default:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          description: The dynamic configration (static) for communication chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>cfv</td> <td>string</td> <td></td> <td></td> <td>i.cfv</td> <td>0.0.0</td> <td></td> </tr> </table>
    SKU105013Configuration:
      allOf:
        - $ref: '#/components/schemas/CmConfig'
        - type: object
          description: 'The supported actuators for the SKU 105013, CONTROL-741x/751x PCBA.'
          properties:
            di:
              $ref: '#/components/schemas/SKU105013InfoBlock'
            db:
              $ref: '#/components/schemas/SKU105013Baseline'
            ds:
              $ref: '#/components/schemas/SKU105013Sensors'
            da:
              $ref: '#/components/schemas/SKU105013Actuators'
            dc:
              $ref: '#/components/schemas/SKU105013DynamicConfig'
            df:
              $ref: '#/components/schemas/G4Filter'
            fc:
              $ref: '#/components/schemas/Factory'
            _ot:
              type: string
              example: 105013
          xml:
            name: 105013-config
    SKU105013InfoBlock:
      type: object
      description: Info block that contains e.g. firmware versions and other descriptive information about the device and it's hardware.
      properties:
        ofv:
          $ref: '#/components/schemas/Version'
          example: 2.0.0
          description: 'The main version as specified in the `pmeta` object. The main version is a semantic version that includes several sub-versions. If individual entities has been upgraded after it will not reflect that. This is expressed as [SemVer](https://semver.org) scheme.'
        mfv:
          $ref: '#/components/schemas/Version'
          example: 1.2.1
          description: 'The MCU firmware version expressed as [Semver](https://semver.org) scheme.'
        cfv:
          $ref: '#/components/schemas/Version'
          example: 3.0.0
          description: 'The communication chip firmware version expressed as [Semver](https://semver.org) scheme.'
        cma:
          type: string
          pattern: '^([[:xdigit:]]{2}[:.-]?){5}[[:xdigit:]]{2}$'
          example: '3D:F2:C9:A6:B3:4F'
          description: The mac address of the communication chip.
        ds:
          $ref: '#/components/schemas/Serial'
          description: 'The device serial number. It is based on. It is based on. Item Number (3), Revision (3), Manufacturer (3), Manufacturer Plant (1), Production Line (2), Station (1), Running Number (7)'
        sku:
          $ref: '#/components/schemas/SKU'
          example: '105011'
          default: '105011'
          description: The device / PCB SKU.
    SKU105013Sensors:
      type: object
      description: 'The supported actuators for the SKU 105013, CONTROL-741x/751x PCBA.'
      properties:
        fsp0:
          $ref: '#/components/schemas/Fan0SpeedSensor'
        pm2_5:
          $ref: '#/components/schemas/PM25MeasurementSensor'
        rt5s:
          $ref: '#/components/schemas/RealTime5SecondSensor'
        b5m:
          $ref: '#/components/schemas/Batch5MinSensor'
    SKU105012Actuators:
      type: object
      description: The supported actuators for the SKU 105012
      properties:
        fsp0:
          $ref: '#/components/schemas/Fans0SpeedActuator'
    SKU105012Baseline:
      type: object
      description: 'This object contains configuration for the device to allow it to communicate and handle its identity. This object is seldom, if never, updated and is not exposed from the device to the cloud (if not forced to). This is due to the fact that it contains several secrets that should not be exposed in the open.'
      properties:
        did:
          type: string
          format: uuid
          description: The device UUID
          example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
          default: '${did}'
        o-cid:
          type: string
          example: badevice
          description: The OAuth client id for the device OAuth client.
        o-cs:
          type: string
          example: 1289rekojdmklfhiu12h932
          description: The OAuth client secret (password) for the device OAuth client.
        c-cli:
          type: string
          format: base64
          description: The client certificate when TLS1.2 Client auth. This is used when e.g. mutual TLS in MQTT authentication. In addition it serves as a local TLS 1.2 server certificate for this device.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${client-cert}'
        c-d:
          type: string
          format: base64
          description: The OTA signing PEM encoded X509 certificate with public key to verify and authenticate a OTA signature
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${ota-cert}'
        c-f:
          type: string
          format: base64
          description: The PEM encoded X509 certificate with public key to verify and authenticate a RDFID based filter
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${filter-cert}'
        psk:
          type: string
          description: The pre shared key of which the device will use when authenticating itself with id of the contents of `did` and thís key.
          default: '${pre-shared-key}'
        c-i:
          type: string
          format: base64
          description: The IdP endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the IdP.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert}'
        c-r:
          type: string
          format: base64
          description: 'The cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. Some cloud vendors demands an additional certificate to authenticate with the API / Broker, even if `api-cert` is provided.'
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert}'
        c-b:
          type: string
          format: base64
          description: The API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert}'
        k-jwt:
          type: string
          format: base64
          description: The certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key}'
        u-jwks:
          type: string
          format: uri
          example: 'https://idp.device.blueair.io/1.0.0/c/jwks'
          default: '${device-jwks-url}'
          description: An optional JWKS endpoint to download JWT verification certificates.
        k-jwt2:
          type: string
          format: base64
          description: The backup certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key2}'
        c-i2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the IdP if the first one is compromised
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert2}'
        c-r2:
          type: string
          format: base64
          description: The backup cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. This may be used if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert2}'
        c-b2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the API / Broker if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert2}'
      required:
        - did
        - c-cli
        - c-d
        - c-f
        - psk
        - c-i
        - c-b
        - k-jwt
        - k-jwt2
        - c-i2
        - c-b2
    SKU105012DynamicConfig:
      type: object
      description: |-
        Dynamic config. This may be extended therefore it allows for custom attributes to be added. The attribute value must however always be of type `DynamicConfig`. The max amount of dynamic config entires are 50.
        There is a `BUG in OpenAPI` that do not reflect the defaults if there is default for a whole JSON object. It is emitted correctly in the JSON schema but the default documentation compltely ignores it. Therefore a table on each dyanmic config object is outlined and asked to ignore the individual examples. Instead the outlined table is the actual truth.
      properties:
        fanspeed:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          default:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          description: The dynamic configration for main fan. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>fanspeed</td> <td>integer</td> <td>fsp0</td> <td>fsp0</td> <td></td> <td>20</td> <td>1s</td> </tr> </table>
        childlock:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          default:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          description: The dynamic configration for child lock. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>childlock</td> <td>boolean</td> <td>chl</td> <td>chl</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        automode:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          default:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          description: The dynamic configration for auto mode. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>automode</td> <td>boolean</td> <td>am</td> <td>am</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        ofv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          default:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          description: The dynamic configration (static) for overall firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>ofv</td> <td>string</td> <td></td> <td></td> <td>i.ofv</td> <td>0.0.0</td> <td></td> </tr> </table>
        mfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          default:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          description: The dynamic configration (static) for mcu chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>mfv</td> <td>string</td> <td></td> <td></td> <td>i.mfv</td> <td>0.0.0</td> <td></td> </tr> </table>
        cfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          default:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          description: The dynamic configration (static) for communication chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>cfv</td> <td>string</td> <td></td> <td></td> <td>i.cfv</td> <td>0.0.0</td> <td></td> </tr> </table>
    SKU105012Configuration:
      allOf:
        - $ref: '#/components/schemas/CmConfig'
        - type: object
          description: 'The supported actuators for the SKU 105012, CONTROL-744x/754x PCBA.'
          properties:
            di:
              $ref: '#/components/schemas/SKU105012InfoBlock'
            db:
              $ref: '#/components/schemas/SKU105012Baseline'
            ds:
              $ref: '#/components/schemas/SKU105012Sensors'
            da:
              $ref: '#/components/schemas/SKU105012Actuators'
            dc:
              $ref: '#/components/schemas/SKU105012DynamicConfig'
            df:
              $ref: '#/components/schemas/G4Filter'
            fc:
              $ref: '#/components/schemas/Factory'
            _ot:
              type: string
              example: 105012
          xml:
            name: 105012-config
    SKU105012InfoBlock:
      type: object
      description: Info block that contains e.g. firmware versions and other descriptive information about the device and it's hardware.
      properties:
        ofv:
          $ref: '#/components/schemas/Version'
          example: 2.0.0
          description: 'The main version as specified in the `pmeta` object. The main version is a semantic version that includes several sub-versions. If individual entities has been upgraded after it will not reflect that. This is expressed as [SemVer](https://semver.org) scheme.'
        mfv:
          $ref: '#/components/schemas/Version'
          example: 1.2.1
          description: 'The MCU firmware version expressed as [Semver](https://semver.org) scheme.'
        cfv:
          $ref: '#/components/schemas/Version'
          example: 3.0.0
          description: 'The communication chip firmware version expressed as [Semver](https://semver.org) scheme.'
        cma:
          type: string
          pattern: '^([[:xdigit:]]{2}[:.-]?){5}[[:xdigit:]]{2}$'
          example: '3D:F2:C9:A6:B3:4F'
          description: The mac address of the communication chip.
        ds:
          $ref: '#/components/schemas/Serial'
          description: 'The device serial number. It is based on. It is based on. Item Number (3), Revision (3), Manufacturer (3), Manufacturer Plant (1), Production Line (2), Station (1), Running Number (7)'
        sku:
          $ref: '#/components/schemas/SKU'
          example: '105011'
          default: '105011'
          description: The device / PCB SKU.
    SKU105012Sensors:
      type: object
      description: The supported actuators for the SKU 105012
      properties:
        fsp0:
          $ref: '#/components/schemas/Fan0SpeedSensor'
        pm2_5:
          $ref: '#/components/schemas/PM25MeasurementSensor'
        rt5s:
          $ref: '#/components/schemas/RealTime5SecondSensor'
        b5m:
          $ref: '#/components/schemas/Batch5MinSensor'
    SKU104867Actuators:
      type: object
      description: The supported actuators for the SKU 104867
      properties:
        fsp0:
          $ref: '#/components/schemas/Fans0SpeedActuator'
    SKU104867Baseline:
      type: object
      description: 'This object contains configuration for the device to allow it to communicate and handle its identity. This object is seldom, if never, updated and is not exposed from the device to the cloud (if not forced to). This is due to the fact that it contains several secrets that should not be exposed in the open.'
      properties:
        did:
          type: string
          format: uuid
          description: The device UUID
          example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
          default: '${did}'
        o-cid:
          type: string
          example: badevice
          description: The OAuth client id for the device OAuth client.
        o-cs:
          type: string
          example: 1289rekojdmklfhiu12h932
          description: The OAuth client secret (password) for the device OAuth client.
        c-cli:
          type: string
          format: base64
          description: The client certificate when TLS1.2 Client auth. This is used when e.g. mutual TLS in MQTT authentication. In addition it serves as a local TLS 1.2 server certificate for this device.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${client-cert}'
        c-d:
          type: string
          format: base64
          description: The OTA signing PEM encoded X509 certificate with public key to verify and authenticate a OTA signature
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${ota-cert}'
        c-f:
          type: string
          format: base64
          description: The PEM encoded X509 certificate with public key to verify and authenticate a RDFID based filter
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${filter-cert}'
        psk:
          type: string
          description: The pre shared key of which the device will use when authenticating itself with id of the contents of `did` and thís key.
          default: '${pre-shared-key}'
        c-i:
          type: string
          format: base64
          description: The IdP endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the IdP.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert}'
        c-r:
          type: string
          format: base64
          description: 'The cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. Some cloud vendors demands an additional certificate to authenticate with the API / Broker, even if `api-cert` is provided.'
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert}'
        c-b:
          type: string
          format: base64
          description: The API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert}'
        k-jwt:
          type: string
          format: base64
          description: The certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key}'
        u-jwks:
          type: string
          format: uri
          example: 'https://idp.device.blueair.io/1.0.0/c/jwks'
          default: '${device-jwks-url}'
          description: An optional JWKS endpoint to download JWT verification certificates.
        k-jwt2:
          type: string
          format: base64
          description: The backup certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key2}'
        c-i2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the IdP if the first one is compromised
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert2}'
        c-r2:
          type: string
          format: base64
          description: The backup cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. This may be used if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert2}'
        c-b2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the API / Broker if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert2}'
      required:
        - did
        - c-cli
        - c-d
        - c-f
        - psk
        - c-i
        - c-b
        - k-jwt
        - k-jwt2
        - c-i2
        - c-b2
    SKU104867DynamicConfig:
      type: object
      description: |-
        Dynamic config. This may be extended therefore it allows for custom attributes to be added. The attribute value must however always be of type `DynamicConfig`. The max amount of dynamic config entires are 50.
        There is a `BUG in OpenAPI` that do not reflect the defaults if there is default for a whole JSON object. It is emitted correctly in the JSON schema but the default documentation compltely ignores it. Therefore a table on each dyanmic config object is outlined and asked to ignore the individual examples. Instead the outlined table is the actual truth.
      properties:
        fanspeed:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          default:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          description: The dynamic configration for main fan. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>fanspeed</td> <td>integer</td> <td>fsp0</td> <td>fsp0</td> <td></td> <td>20</td> <td>1s</td> </tr> </table>
        childlock:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          default:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          description: The dynamic configration for child lock. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>childlock</td> <td>boolean</td> <td>chl</td> <td>chl</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        automode:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          default:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          description: The dynamic configration for auto mode. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>automode</td> <td>boolean</td> <td>am</td> <td>am</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        ofv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          default:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          description: The dynamic configration (static) for overall firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>ofv</td> <td>string</td> <td></td> <td></td> <td>i.ofv</td> <td>0.0.0</td> <td></td> </tr> </table>
        mfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          default:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          description: The dynamic configration (static) for mcu chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>mfv</td> <td>string</td> <td></td> <td></td> <td>i.mfv</td> <td>0.0.0</td> <td></td> </tr> </table>
        cfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          default:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          description: The dynamic configration (static) for communication chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>cfv</td> <td>string</td> <td></td> <td></td> <td>i.cfv</td> <td>0.0.0</td> <td></td> </tr> </table>
    SKU104867Configuration:
      allOf:
        - $ref: '#/components/schemas/CmConfig'
        - type: object
          description: 'This is the configuration for the SKU 104867, Blueair 7440i, 220-240v.'
          properties:
            di:
              $ref: '#/components/schemas/SKU104867InfoBlock'
            db:
              $ref: '#/components/schemas/SKU104867Baseline'
            ds:
              $ref: '#/components/schemas/SKU104867Sensors'
            da:
              $ref: '#/components/schemas/SKU104867Actuators'
            dc:
              $ref: '#/components/schemas/SKU104867DynamicConfig'
            df:
              $ref: '#/components/schemas/G4Filter'
            fc:
              $ref: '#/components/schemas/Factory'
            _ot:
              type: string
              example: 104867
          xml:
            name: 104867-config
    SKU104867InfoBlock:
      type: object
      description: Info block that contains e.g. firmware versions and other descriptive information about the device and it's hardware.
      properties:
        ofv:
          $ref: '#/components/schemas/Version'
          example: 2.0.0
          description: 'The main version as specified in the `pmeta` object. The main version is a semantic version that includes several sub-versions. If individual entities has been upgraded after it will not reflect that. This is expressed as [SemVer](https://semver.org) scheme.'
        mfv:
          $ref: '#/components/schemas/Version'
          example: 1.2.1
          description: 'The MCU firmware version expressed as [Semver](https://semver.org) scheme.'
        cfv:
          $ref: '#/components/schemas/Version'
          example: 3.0.0
          description: 'The communication chip firmware version expressed as [Semver](https://semver.org) scheme.'
        cma:
          type: string
          pattern: '^([[:xdigit:]]{2}[:.-]?){5}[[:xdigit:]]{2}$'
          example: '3D:F2:C9:A6:B3:4F'
          description: The mac address of the communication chip.
        ds:
          $ref: '#/components/schemas/Serial'
          description: 'The device serial number. It is based on. It is based on. Item Number (3), Revision (3), Manufacturer (3), Manufacturer Plant (1), Production Line (2), Station (1), Running Number (7)'
        sku:
          $ref: '#/components/schemas/SKU'
          example: '105011'
          default: '105011'
          description: The device / PCB SKU.
    SKU104867Sensors:
      type: object
      description: The supported sensors for the SKU 104867
      properties:
        fsp0:
          $ref: '#/components/schemas/Fan0SpeedSensor'
        pm2_5:
          $ref: '#/components/schemas/PM25MeasurementSensor'
        rt5s:
          $ref: '#/components/schemas/RealTime5SecondSensor'
        b5m:
          $ref: '#/components/schemas/Batch5MinSensor'
    SKU104869Actuators:
      type: object
      description: The supported actuators for the SKU 104869
      properties:
        fsp0:
          $ref: '#/components/schemas/Fans0SpeedActuator'
    SKU104869Baseline:
      type: object
      description: 'This object contains configuration for the device to allow it to communicate and handle its identity. This object is seldom, if never, updated and is not exposed from the device to the cloud (if not forced to). This is due to the fact that it contains several secrets that should not be exposed in the open.'
      properties:
        did:
          type: string
          format: uuid
          description: The device UUID
          example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
          default: '${did}'
        o-cid:
          type: string
          example: badevice
          description: The OAuth client id for the device OAuth client.
        o-cs:
          type: string
          example: 1289rekojdmklfhiu12h932
          description: The OAuth client secret (password) for the device OAuth client.
        c-cli:
          type: string
          format: base64
          description: The client certificate when TLS1.2 Client auth. This is used when e.g. mutual TLS in MQTT authentication. In addition it serves as a local TLS 1.2 server certificate for this device.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${client-cert}'
        c-d:
          type: string
          format: base64
          description: The OTA signing PEM encoded X509 certificate with public key to verify and authenticate a OTA signature
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${ota-cert}'
        c-f:
          type: string
          format: base64
          description: The PEM encoded X509 certificate with public key to verify and authenticate a RDFID based filter
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${filter-cert}'
        psk:
          type: string
          description: The pre shared key of which the device will use when authenticating itself with id of the contents of `did` and thís key.
          default: '${pre-shared-key}'
        c-i:
          type: string
          format: base64
          description: The IdP endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the IdP.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert}'
        c-r:
          type: string
          format: base64
          description: 'The cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. Some cloud vendors demands an additional certificate to authenticate with the API / Broker, even if `api-cert` is provided.'
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert}'
        c-b:
          type: string
          format: base64
          description: The API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert}'
        k-jwt:
          type: string
          format: base64
          description: The certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key}'
        u-jwks:
          type: string
          format: uri
          example: 'https://idp.device.blueair.io/1.0.0/c/jwks'
          default: '${device-jwks-url}'
          description: An optional JWKS endpoint to download JWT verification certificates.
        k-jwt2:
          type: string
          format: base64
          description: The backup certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key2}'
        c-i2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the IdP if the first one is compromised
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert2}'
        c-r2:
          type: string
          format: base64
          description: The backup cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. This may be used if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert2}'
        c-b2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the API / Broker if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert2}'
      required:
        - did
        - c-cli
        - c-d
        - c-f
        - psk
        - c-i
        - c-b
        - k-jwt
        - k-jwt2
        - c-i2
        - c-b2
    SKU104869DynamicConfig:
      type: object
      description: |-
        Dynamic config. This may be extended therefore it allows for custom attributes to be added. The attribute value must however always be of type `DynamicConfig`. The max amount of dynamic config entires are 50.
        There is a `BUG in OpenAPI` that do not reflect the defaults if there is default for a whole JSON object. It is emitted correctly in the JSON schema but the default documentation compltely ignores it. Therefore a table on each dyanmic config object is outlined and asked to ignore the individual examples. Instead the outlined table is the actual truth.
      properties:
        fanspeed:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          default:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          description: The dynamic configration for main fan. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>fanspeed</td> <td>integer</td> <td>fsp0</td> <td>fsp0</td> <td></td> <td>20</td> <td>1s</td> </tr> </table>
        childlock:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          default:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          description: The dynamic configration for child lock. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>childlock</td> <td>boolean</td> <td>chl</td> <td>chl</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        automode:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          default:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          description: The dynamic configration for auto mode. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>automode</td> <td>boolean</td> <td>am</td> <td>am</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        ofv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          default:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          description: The dynamic configration (static) for overall firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>ofv</td> <td>string</td> <td></td> <td></td> <td>i.ofv</td> <td>0.0.0</td> <td></td> </tr> </table>
        mfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          default:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          description: The dynamic configration (static) for mcu chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>mfv</td> <td>string</td> <td></td> <td></td> <td>i.mfv</td> <td>0.0.0</td> <td></td> </tr> </table>
        cfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          default:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          description: The dynamic configration (static) for communication chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>cfv</td> <td>string</td> <td></td> <td></td> <td>i.cfv</td> <td>0.0.0</td> <td></td> </tr> </table>
    SKU104869Configuration:
      allOf:
        - $ref: '#/components/schemas/CmConfig'
        - type: object
          description: This is the configuration for the SKU 104869
          properties:
            di:
              $ref: '#/components/schemas/SKU104869InfoBlock'
            db:
              $ref: '#/components/schemas/SKU104869Baseline'
            ds:
              $ref: '#/components/schemas/SKU104869Sensors'
            da:
              $ref: '#/components/schemas/SKU104869Actuators'
            dc:
              $ref: '#/components/schemas/SKU104869DynamicConfig'
            df:
              $ref: '#/components/schemas/G4Filter'
            fc:
              $ref: '#/components/schemas/Factory'
            _ot:
              type: string
              example: 104869
          xml:
            name: 104869-config
    SKU104869InfoBlock:
      type: object
      description: Info block that contains e.g. firmware versions and other descriptive information about the device and it's hardware.
      properties:
        ofv:
          $ref: '#/components/schemas/Version'
          example: 2.0.0
          description: 'The main version as specified in the `pmeta` object. The main version is a semantic version that includes several sub-versions. If individual entities has been upgraded after it will not reflect that. This is expressed as [SemVer](https://semver.org) scheme.'
        mfv:
          $ref: '#/components/schemas/Version'
          example: 1.2.1
          description: 'The MCU firmware version expressed as [Semver](https://semver.org) scheme.'
        cfv:
          $ref: '#/components/schemas/Version'
          example: 3.0.0
          description: 'The communication chip firmware version expressed as [Semver](https://semver.org) scheme.'
        cma:
          type: string
          pattern: '^([[:xdigit:]]{2}[:.-]?){5}[[:xdigit:]]{2}$'
          example: '3D:F2:C9:A6:B3:4F'
          description: The mac address of the communication chip.
        ds:
          $ref: '#/components/schemas/Serial'
          description: 'The device serial number. It is based on. It is based on. Item Number (3), Revision (3), Manufacturer (3), Manufacturer Plant (1), Production Line (2), Station (1), Running Number (7)'
        sku:
          $ref: '#/components/schemas/SKU'
          example: '105011'
          default: '105011'
          description: The device / PCB SKU.
    SKU104869Sensors:
      type: object
      description: The supported sensors for the SKU 104871
      properties:
        fsp0:
          $ref: '#/components/schemas/Fan0SpeedSensor'
        pm2_5:
          $ref: '#/components/schemas/PM25MeasurementSensor'
        rt5s:
          $ref: '#/components/schemas/RealTime5SecondSensor'
        b5m:
          $ref: '#/components/schemas/Batch5MinSensor'
    SKU104871Actuators:
      type: object
      description: The supported actuators for the SKU 104871
      properties:
        fsp0:
          $ref: '#/components/schemas/Fans0SpeedActuator'
    SKU104871Baseline:
      type: object
      description: 'This object contains configuration for the device to allow it to communicate and handle its identity. This object is seldom, if never, updated and is not exposed from the device to the cloud (if not forced to). This is due to the fact that it contains several secrets that should not be exposed in the open.'
      properties:
        did:
          type: string
          format: uuid
          description: The device UUID
          example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
          default: '${did}'
        o-cid:
          type: string
          example: badevice
          description: The OAuth client id for the device OAuth client.
        o-cs:
          type: string
          example: 1289rekojdmklfhiu12h932
          description: The OAuth client secret (password) for the device OAuth client.
        c-cli:
          type: string
          format: base64
          description: The client certificate when TLS1.2 Client auth. This is used when e.g. mutual TLS in MQTT authentication. In addition it serves as a local TLS 1.2 server certificate for this device.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${client-cert}'
        c-d:
          type: string
          format: base64
          description: The OTA signing PEM encoded X509 certificate with public key to verify and authenticate a OTA signature
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${ota-cert}'
        c-f:
          type: string
          format: base64
          description: The PEM encoded X509 certificate with public key to verify and authenticate a RDFID based filter
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${filter-cert}'
        psk:
          type: string
          description: The pre shared key of which the device will use when authenticating itself with id of the contents of `did` and thís key.
          default: '${pre-shared-key}'
        c-i:
          type: string
          format: base64
          description: The IdP endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the IdP.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert}'
        c-r:
          type: string
          format: base64
          description: 'The cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. Some cloud vendors demands an additional certificate to authenticate with the API / Broker, even if `api-cert` is provided.'
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert}'
        c-b:
          type: string
          format: base64
          description: The API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert}'
        k-jwt:
          type: string
          format: base64
          description: The certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key}'
        u-jwks:
          type: string
          format: uri
          example: 'https://idp.device.blueair.io/1.0.0/c/jwks'
          default: '${device-jwks-url}'
          description: An optional JWKS endpoint to download JWT verification certificates.
        k-jwt2:
          type: string
          format: base64
          description: The backup certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key2}'
        c-i2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the IdP if the first one is compromised
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert2}'
        c-r2:
          type: string
          format: base64
          description: The backup cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. This may be used if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert2}'
        c-b2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the API / Broker if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert2}'
      required:
        - did
        - c-cli
        - c-d
        - c-f
        - psk
        - c-i
        - c-b
        - k-jwt
        - k-jwt2
        - c-i2
        - c-b2
    SKU104871DynamicConfig:
      type: object
      description: |-
        Dynamic config. This may be extended therefore it allows for custom attributes to be added. The attribute value must however always be of type `DynamicConfig`. The max amount of dynamic config entires are 50.
        There is a `BUG in OpenAPI` that do not reflect the defaults if there is default for a whole JSON object. It is emitted correctly in the JSON schema but the default documentation compltely ignores it. Therefore a table on each dyanmic config object is outlined and asked to ignore the individual examples. Instead the outlined table is the actual truth.
      properties:
        fanspeed:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          default:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          description: The dynamic configration for main fan. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>fanspeed</td> <td>integer</td> <td>fsp0</td> <td>fsp0</td> <td></td> <td>20</td> <td>1s</td> </tr> </table>
        childlock:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          default:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          description: The dynamic configration for child lock. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>childlock</td> <td>boolean</td> <td>chl</td> <td>chl</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        automode:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          default:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          description: The dynamic configration for auto mode. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>automode</td> <td>boolean</td> <td>am</td> <td>am</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        ofv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          default:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          description: The dynamic configration (static) for overall firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>ofv</td> <td>string</td> <td></td> <td></td> <td>i.ofv</td> <td>0.0.0</td> <td></td> </tr> </table>
        mfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          default:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          description: The dynamic configration (static) for mcu chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>mfv</td> <td>string</td> <td></td> <td></td> <td>i.mfv</td> <td>0.0.0</td> <td></td> </tr> </table>
        cfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          default:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          description: The dynamic configration (static) for communication chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>cfv</td> <td>string</td> <td></td> <td></td> <td>i.cfv</td> <td>0.0.0</td> <td></td> </tr> </table>
    SKU104871Configuration:
      allOf:
        - $ref: '#/components/schemas/CmConfig'
        - type: object
          description: This is the configuration for the SKU 104871
          properties:
            di:
              $ref: '#/components/schemas/SKU104871InfoBlock'
            db:
              $ref: '#/components/schemas/SKU104871Baseline'
            ds:
              $ref: '#/components/schemas/SKU104871Sensors'
            da:
              $ref: '#/components/schemas/SKU104871Actuators'
            dc:
              $ref: '#/components/schemas/SKU104871DynamicConfig'
            df:
              $ref: '#/components/schemas/G4Filter'
            fc:
              $ref: '#/components/schemas/Factory'
            _ot:
              type: string
              example: 104871
          xml:
            name: 104871-config
    SKU104871InfoBlock:
      type: object
      description: Info block that contains e.g. firmware versions and other descriptive information about the device and it's hardware.
      properties:
        ofv:
          $ref: '#/components/schemas/Version'
          example: 2.0.0
          description: 'The main version as specified in the `pmeta` object. The main version is a semantic version that includes several sub-versions. If individual entities has been upgraded after it will not reflect that. This is expressed as [SemVer](https://semver.org) scheme.'
        mfv:
          $ref: '#/components/schemas/Version'
          example: 1.2.1
          description: 'The MCU firmware version expressed as [Semver](https://semver.org) scheme.'
        cfv:
          $ref: '#/components/schemas/Version'
          example: 3.0.0
          description: 'The communication chip firmware version expressed as [Semver](https://semver.org) scheme.'
        cma:
          type: string
          pattern: '^([[:xdigit:]]{2}[:.-]?){5}[[:xdigit:]]{2}$'
          example: '3D:F2:C9:A6:B3:4F'
          description: The mac address of the communication chip.
        ds:
          $ref: '#/components/schemas/Serial'
          description: 'The device serial number. It is based on. It is based on. Item Number (3), Revision (3), Manufacturer (3), Manufacturer Plant (1), Production Line (2), Station (1), Running Number (7)'
        sku:
          $ref: '#/components/schemas/SKU'
          example: '105011'
          default: '105011'
          description: The device / PCB SKU.
    SKU104871Sensors:
      type: object
      description: The supported sensors for the SKU 104871
      properties:
        fsp0:
          $ref: '#/components/schemas/Fan0SpeedSensor'
        pm2_5:
          $ref: '#/components/schemas/PM25MeasurementSensor'
        rt5s:
          $ref: '#/components/schemas/RealTime5SecondSensor'
        b5m:
          $ref: '#/components/schemas/Batch5MinSensor'
    SKU105054Actuators:
      type: object
      description: The supported actuators for the SKU 105054
      properties:
        fsp0:
          $ref: '#/components/schemas/Fans0SpeedActuator'
    SKU105054Baseline:
      type: object
      description: 'This object contains configuration for the device to allow it to communicate and handle its identity. This object is seldom, if never, updated and is not exposed from the device to the cloud (if not forced to). This is due to the fact that it contains several secrets that should not be exposed in the open.'
      properties:
        did:
          type: string
          format: uuid
          description: The device UUID
          example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
          default: '${did}'
        o-cid:
          type: string
          example: badevice
          description: The OAuth client id for the device OAuth client.
        o-cs:
          type: string
          example: 1289rekojdmklfhiu12h932
          description: The OAuth client secret (password) for the device OAuth client.
        c-cli:
          type: string
          format: base64
          description: The client certificate when TLS1.2 Client auth. This is used when e.g. mutual TLS in MQTT authentication. In addition it serves as a local TLS 1.2 server certificate for this device.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${client-cert}'
        c-d:
          type: string
          format: base64
          description: The OTA signing PEM encoded X509 certificate with public key to verify and authenticate a OTA signature
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${ota-cert}'
        c-f:
          type: string
          format: base64
          description: The PEM encoded X509 certificate with public key to verify and authenticate a RDFID based filter
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${filter-cert}'
        psk:
          type: string
          description: The pre shared key of which the device will use when authenticating itself with id of the contents of `did` and thís key.
          default: '${pre-shared-key}'
        c-i:
          type: string
          format: base64
          description: The IdP endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the IdP.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert}'
        c-r:
          type: string
          format: base64
          description: 'The cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. Some cloud vendors demands an additional certificate to authenticate with the API / Broker, even if `api-cert` is provided.'
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert}'
        c-b:
          type: string
          format: base64
          description: The API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert}'
        k-jwt:
          type: string
          format: base64
          description: The certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key}'
        u-jwks:
          type: string
          format: uri
          example: 'https://idp.device.blueair.io/1.0.0/c/jwks'
          default: '${device-jwks-url}'
          description: An optional JWKS endpoint to download JWT verification certificates.
        k-jwt2:
          type: string
          format: base64
          description: The backup certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key2}'
        c-i2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the IdP if the first one is compromised
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert2}'
        c-r2:
          type: string
          format: base64
          description: The backup cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. This may be used if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert2}'
        c-b2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the API / Broker if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert2}'
      required:
        - did
        - c-cli
        - c-d
        - c-f
        - psk
        - c-i
        - c-b
        - k-jwt
        - k-jwt2
        - c-i2
        - c-b2
    SKU105054DynamicConfig:
      type: object
      description: |-
        Dynamic config. This may be extended therefore it allows for custom attributes to be added. The attribute value must however always be of type `DynamicConfig`. The max amount of dynamic config entires are 50.
        There is a `BUG in OpenAPI` that do not reflect the defaults if there is default for a whole JSON object. It is emitted correctly in the JSON schema but the default documentation compltely ignores it. Therefore a table on each dyanmic config object is outlined and asked to ignore the individual examples. Instead the outlined table is the actual truth.
      properties:
        fanspeed:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          default:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          description: The dynamic configration for main fan. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>fanspeed</td> <td>integer</td> <td>fsp0</td> <td>fsp0</td> <td></td> <td>20</td> <td>1s</td> </tr> </table>
        childlock:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          default:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          description: The dynamic configration for child lock. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>childlock</td> <td>boolean</td> <td>chl</td> <td>chl</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        automode:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          default:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          description: The dynamic configration for auto mode. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>automode</td> <td>boolean</td> <td>am</td> <td>am</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        ofv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          default:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          description: The dynamic configration (static) for overall firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>ofv</td> <td>string</td> <td></td> <td></td> <td>i.ofv</td> <td>0.0.0</td> <td></td> </tr> </table>
        mfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          default:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          description: The dynamic configration (static) for mcu chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>mfv</td> <td>string</td> <td></td> <td></td> <td>i.mfv</td> <td>0.0.0</td> <td></td> </tr> </table>
        cfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          default:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          description: The dynamic configration (static) for communication chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>cfv</td> <td>string</td> <td></td> <td></td> <td>i.cfv</td> <td>0.0.0</td> <td></td> </tr> </table>
    SKU105054Configuration:
      allOf:
        - $ref: '#/components/schemas/CmConfig'
        - type: object
          description: The supported actuators for the SKU 105054
          properties:
            di:
              $ref: '#/components/schemas/SKU105054InfoBlock'
            db:
              $ref: '#/components/schemas/SKU105054Baseline'
            ds:
              $ref: '#/components/schemas/SKU105054Sensors'
            da:
              $ref: '#/components/schemas/SKU105054Actuators'
            dc:
              $ref: '#/components/schemas/SKU105054DynamicConfig'
            df:
              $ref: '#/components/schemas/G4Filter'
            fc:
              $ref: '#/components/schemas/Factory'
            _ot:
              type: string
              example: 105054
          xml:
            name: 105054-config
    SKU105054InfoBlock:
      type: object
      description: Info block that contains e.g. firmware versions and other descriptive information about the device and it's hardware.
      properties:
        ofv:
          $ref: '#/components/schemas/Version'
          example: 2.0.0
          description: 'The main version as specified in the `pmeta` object. The main version is a semantic version that includes several sub-versions. If individual entities has been upgraded after it will not reflect that. This is expressed as [SemVer](https://semver.org) scheme.'
        mfv:
          $ref: '#/components/schemas/Version'
          example: 1.2.1
          description: 'The MCU firmware version expressed as [Semver](https://semver.org) scheme.'
        cfv:
          $ref: '#/components/schemas/Version'
          example: 3.0.0
          description: 'The communication chip firmware version expressed as [Semver](https://semver.org) scheme.'
        cma:
          type: string
          pattern: '^([[:xdigit:]]{2}[:.-]?){5}[[:xdigit:]]{2}$'
          example: '3D:F2:C9:A6:B3:4F'
          description: The mac address of the communication chip.
        ds:
          $ref: '#/components/schemas/Serial'
          description: 'The device serial number. It is based on. It is based on. Item Number (3), Revision (3), Manufacturer (3), Manufacturer Plant (1), Production Line (2), Station (1), Running Number (7)'
        sku:
          $ref: '#/components/schemas/SKU'
          example: '105011'
          default: '105011'
          description: The device / PCB SKU.
    SKU105054Sensors:
      type: object
      description: The supported actuators for the SKU 105054
      properties:
        fsp0:
          $ref: '#/components/schemas/Fan0SpeedSensor'
        pm2_5:
          $ref: '#/components/schemas/PM25MeasurementSensor'
        rt5s:
          $ref: '#/components/schemas/RealTime5SecondSensor'
        b5m:
          $ref: '#/components/schemas/Batch5MinSensor'
    SKU105055Actuators:
      type: object
      description: The supported actuators for the SKU 105055
      properties:
        fsp0:
          $ref: '#/components/schemas/Fans0SpeedActuator'
    SKU105055Baseline:
      type: object
      description: 'This object contains configuration for the device to allow it to communicate and handle its identity. This object is seldom, if never, updated and is not exposed from the device to the cloud (if not forced to). This is due to the fact that it contains several secrets that should not be exposed in the open.'
      properties:
        did:
          type: string
          format: uuid
          description: The device UUID
          example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
          default: '${did}'
        o-cid:
          type: string
          example: badevice
          description: The OAuth client id for the device OAuth client.
        o-cs:
          type: string
          example: 1289rekojdmklfhiu12h932
          description: The OAuth client secret (password) for the device OAuth client.
        c-cli:
          type: string
          format: base64
          description: The client certificate when TLS1.2 Client auth. This is used when e.g. mutual TLS in MQTT authentication. In addition it serves as a local TLS 1.2 server certificate for this device.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${client-cert}'
        c-d:
          type: string
          format: base64
          description: The OTA signing PEM encoded X509 certificate with public key to verify and authenticate a OTA signature
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${ota-cert}'
        c-f:
          type: string
          format: base64
          description: The PEM encoded X509 certificate with public key to verify and authenticate a RDFID based filter
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${filter-cert}'
        psk:
          type: string
          description: The pre shared key of which the device will use when authenticating itself with id of the contents of `did` and thís key.
          default: '${pre-shared-key}'
        c-i:
          type: string
          format: base64
          description: The IdP endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the IdP.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert}'
        c-r:
          type: string
          format: base64
          description: 'The cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. Some cloud vendors demands an additional certificate to authenticate with the API / Broker, even if `api-cert` is provided.'
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert}'
        c-b:
          type: string
          format: base64
          description: The API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert}'
        k-jwt:
          type: string
          format: base64
          description: The certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key}'
        u-jwks:
          type: string
          format: uri
          example: 'https://idp.device.blueair.io/1.0.0/c/jwks'
          default: '${device-jwks-url}'
          description: An optional JWKS endpoint to download JWT verification certificates.
        k-jwt2:
          type: string
          format: base64
          description: The backup certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key2}'
        c-i2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the IdP if the first one is compromised
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert2}'
        c-r2:
          type: string
          format: base64
          description: The backup cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. This may be used if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert2}'
        c-b2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the API / Broker if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert2}'
      required:
        - did
        - c-cli
        - c-d
        - c-f
        - psk
        - c-i
        - c-b
        - k-jwt
        - k-jwt2
        - c-i2
        - c-b2
    SKU105055DynamicConfig:
      type: object
      description: |-
        Dynamic config. This may be extended therefore it allows for custom attributes to be added. The attribute value must however always be of type `DynamicConfig`. The max amount of dynamic config entires are 50.
        There is a `BUG in OpenAPI` that do not reflect the defaults if there is default for a whole JSON object. It is emitted correctly in the JSON schema but the default documentation compltely ignores it. Therefore a table on each dyanmic config object is outlined and asked to ignore the individual examples. Instead the outlined table is the actual truth.
      properties:
        fanspeed:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          default:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          description: The dynamic configration for main fan. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>fanspeed</td> <td>integer</td> <td>fsp0</td> <td>fsp0</td> <td></td> <td>20</td> <td>1s</td> </tr> </table>
        childlock:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          default:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          description: The dynamic configration for child lock. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>childlock</td> <td>boolean</td> <td>chl</td> <td>chl</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        automode:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          default:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          description: The dynamic configration for auto mode. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>automode</td> <td>boolean</td> <td>am</td> <td>am</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        ofv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          default:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          description: The dynamic configration (static) for overall firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>ofv</td> <td>string</td> <td></td> <td></td> <td>i.ofv</td> <td>0.0.0</td> <td></td> </tr> </table>
        mfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          default:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          description: The dynamic configration (static) for mcu chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>mfv</td> <td>string</td> <td></td> <td></td> <td>i.mfv</td> <td>0.0.0</td> <td></td> </tr> </table>
        cfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          default:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          description: The dynamic configration (static) for communication chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>cfv</td> <td>string</td> <td></td> <td></td> <td>i.cfv</td> <td>0.0.0</td> <td></td> </tr> </table>
    SKU105055Configuration:
      allOf:
        - $ref: '#/components/schemas/CmConfig'
        - type: object
          description: The supported actuators for the SKU 105055
          properties:
            di:
              $ref: '#/components/schemas/SKU105055InfoBlock'
            db:
              $ref: '#/components/schemas/SKU105055Baseline'
            ds:
              $ref: '#/components/schemas/SKU105055Sensors'
            da:
              $ref: '#/components/schemas/SKU105055Actuators'
            dc:
              $ref: '#/components/schemas/SKU105055DynamicConfig'
            df:
              $ref: '#/components/schemas/G4Filter'
            fc:
              $ref: '#/components/schemas/Factory'
            _ot:
              type: string
              example: 105055
          xml:
            name: 105055-config
    SKU105055InfoBlock:
      type: object
      description: Info block that contains e.g. firmware versions and other descriptive information about the device and it's hardware.
      properties:
        ofv:
          $ref: '#/components/schemas/Version'
          example: 2.0.0
          description: 'The main version as specified in the `pmeta` object. The main version is a semantic version that includes several sub-versions. If individual entities has been upgraded after it will not reflect that. This is expressed as [SemVer](https://semver.org) scheme.'
        mfv:
          $ref: '#/components/schemas/Version'
          example: 1.2.1
          description: 'The MCU firmware version expressed as [Semver](https://semver.org) scheme.'
        cfv:
          $ref: '#/components/schemas/Version'
          example: 3.0.0
          description: 'The communication chip firmware version expressed as [Semver](https://semver.org) scheme.'
        cma:
          type: string
          pattern: '^([[:xdigit:]]{2}[:.-]?){5}[[:xdigit:]]{2}$'
          example: '3D:F2:C9:A6:B3:4F'
          description: The mac address of the communication chip.
        ds:
          $ref: '#/components/schemas/Serial'
          description: 'The device serial number. It is based on. It is based on. Item Number (3), Revision (3), Manufacturer (3), Manufacturer Plant (1), Production Line (2), Station (1), Running Number (7)'
        sku:
          $ref: '#/components/schemas/SKU'
          example: '105011'
          default: '105011'
          description: The device / PCB SKU.
    SKU105055Sensors:
      type: object
      description: The supported actuators for the SKU 105055
      properties:
        fsp0:
          $ref: '#/components/schemas/Fan0SpeedSensor'
        pm2_5:
          $ref: '#/components/schemas/PM25MeasurementSensor'
        rt5s:
          $ref: '#/components/schemas/RealTime5SecondSensor'
        b5m:
          $ref: '#/components/schemas/Batch5MinSensor'
    SKU105056Actuators:
      type: object
      description: The supported actuators for the SKU 105056
      properties:
        fsp0:
          $ref: '#/components/schemas/Fans0SpeedActuator'
    SKU105056Baseline:
      type: object
      description: 'This object contains configuration for the device to allow it to communicate and handle its identity. This object is seldom, if never, updated and is not exposed from the device to the cloud (if not forced to). This is due to the fact that it contains several secrets that should not be exposed in the open.'
      properties:
        did:
          type: string
          format: uuid
          description: The device UUID
          example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
          default: '${did}'
        o-cid:
          type: string
          example: badevice
          description: The OAuth client id for the device OAuth client.
        o-cs:
          type: string
          example: 1289rekojdmklfhiu12h932
          description: The OAuth client secret (password) for the device OAuth client.
        c-cli:
          type: string
          format: base64
          description: The client certificate when TLS1.2 Client auth. This is used when e.g. mutual TLS in MQTT authentication. In addition it serves as a local TLS 1.2 server certificate for this device.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${client-cert}'
        c-d:
          type: string
          format: base64
          description: The OTA signing PEM encoded X509 certificate with public key to verify and authenticate a OTA signature
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${ota-cert}'
        c-f:
          type: string
          format: base64
          description: The PEM encoded X509 certificate with public key to verify and authenticate a RDFID based filter
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${filter-cert}'
        psk:
          type: string
          description: The pre shared key of which the device will use when authenticating itself with id of the contents of `did` and thís key.
          default: '${pre-shared-key}'
        c-i:
          type: string
          format: base64
          description: The IdP endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the IdP.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert}'
        c-r:
          type: string
          format: base64
          description: 'The cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. Some cloud vendors demands an additional certificate to authenticate with the API / Broker, even if `api-cert` is provided.'
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert}'
        c-b:
          type: string
          format: base64
          description: The API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert}'
        k-jwt:
          type: string
          format: base64
          description: The certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key}'
        u-jwks:
          type: string
          format: uri
          example: 'https://idp.device.blueair.io/1.0.0/c/jwks'
          default: '${device-jwks-url}'
          description: An optional JWKS endpoint to download JWT verification certificates.
        k-jwt2:
          type: string
          format: base64
          description: The backup certificate or public key (denoted in the PEM format CERTIFIFICATE or PUBLIC KEY) to verify the open id connect JWT sent in request towards the device (either from cloud or from local REST interface).
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${device-jwt-key2}'
        c-i2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the IdP if the first one is compromised
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${idp-cert2}'
        c-r2:
          type: string
          format: base64
          description: The backup cloud API / Broker endpoint PEM encoded X509 certificate with public key certificate for authenticating on TLS 1.2 towards the API / Broker. This may be used if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${cloud-api-cert2}'
        c-b2:
          type: string
          format: base64
          description: Secondary PEM encoded X509 certificate for the API / Broker if the first one is compromised.
          example: '-----BEGIN CERTIFICATE-----....'
          default: '${api-cert2}'
      required:
        - did
        - c-cli
        - c-d
        - c-f
        - psk
        - c-i
        - c-b
        - k-jwt
        - k-jwt2
        - c-i2
        - c-b2
    SKU105056DynamicConfig:
      type: object
      description: |-
        Dynamic config. This may be extended therefore it allows for custom attributes to be added. The attribute value must however always be of type `DynamicConfig`. The max amount of dynamic config entires are 50.
        There is a `BUG in OpenAPI` that do not reflect the defaults if there is default for a whole JSON object. It is emitted correctly in the JSON schema but the default documentation compltely ignores it. Therefore a table on each dyanmic config object is outlined and asked to ignore the individual examples. Instead the outlined table is the actual truth.
      properties:
        fanspeed:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          default:
            'n': fanspeed
            t: integer
            v: '20'
            a: fsp0
            s: fsp0
          description: The dynamic configration for main fan. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>fanspeed</td> <td>integer</td> <td>fsp0</td> <td>fsp0</td> <td></td> <td>20</td> <td>1s</td> </tr> </table>
        childlock:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          default:
            'n': childlock
            t: boolean
            v: 'false'
            a: chl
            s: chl
          description: The dynamic configration for child lock. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>childlock</td> <td>boolean</td> <td>chl</td> <td>chl</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        automode:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          default:
            'n': automode
            t: boolean
            v: 'false'
            a: am
            s: am
          description: The dynamic configration for auto mode. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>automode</td> <td>boolean</td> <td>am</td> <td>am</td> <td></td> <td>false</td> <td>1s</td> </tr> </table>
        ofv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          default:
            'n': ofv
            t: string
            v: 0.0.0
            d: i.ofv
          description: The dynamic configration (static) for overall firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>ofv</td> <td>string</td> <td></td> <td></td> <td>i.ofv</td> <td>0.0.0</td> <td></td> </tr> </table>
        mfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          default:
            'n': mfv
            t: string
            v: 0.0.0
            d: i.mfv
          description: The dynamic configration (static) for mcu chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>mfv</td> <td>string</td> <td></td> <td></td> <td>i.mfv</td> <td>0.0.0</td> <td></td> </tr> </table>
        cfv:
          $ref: '#/components/schemas/DynamicConfig'
          example:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          default:
            'n': cfv
            t: string
            v: 0.0.0
            d: i.cfv
          description: The dynamic configration (static) for communication chip firmware version. The configuration for this object is as follows (`and not the examples described on individual properties`). <table> <tr> <td>Name (n)</td> <td>Type (t)</td> <td>Sensor (s)</td> <td>Actuator (a)</td> <td>Directed (d)</td> <td>Default Value (v)</td> <td>Threshold (th)</td> </tr> <tr> <td>cfv</td> <td>string</td> <td></td> <td></td> <td>i.cfv</td> <td>0.0.0</td> <td></td> </tr> </table>
    SKU105056Configuration:
      allOf:
        - $ref: '#/components/schemas/CmConfig'
        - type: object
          description: The supported actuators for the SKU 105056
          properties:
            di:
              $ref: '#/components/schemas/SKU105056InfoBlock'
            db:
              $ref: '#/components/schemas/SKU105056Baseline'
            ds:
              $ref: '#/components/schemas/SKU105056Sensors'
            da:
              $ref: '#/components/schemas/SKU105056Actuators'
            dc:
              $ref: '#/components/schemas/SKU105056DynamicConfig'
            df:
              $ref: '#/components/schemas/G4Filter'
            fc:
              $ref: '#/components/schemas/Factory'
            _ot:
              type: string
              example: 105056
          xml:
            name: 105056-config
    SKU105056InfoBlock:
      type: object
      description: Info block that contains e.g. firmware versions and other descriptive information about the device and it's hardware.
      properties:
        ofv:
          $ref: '#/components/schemas/Version'
          example: 2.0.0
          description: 'The main version as specified in the `pmeta` object. The main version is a semantic version that includes several sub-versions. If individual entities has been upgraded after it will not reflect that. This is expressed as [SemVer](https://semver.org) scheme.'
        mfv:
          $ref: '#/components/schemas/Version'
          example: 1.2.1
          description: 'The MCU firmware version expressed as [Semver](https://semver.org) scheme.'
        cfv:
          $ref: '#/components/schemas/Version'
          example: 3.0.0
          description: 'The communication chip firmware version expressed as [Semver](https://semver.org) scheme.'
        cma:
          type: string
          pattern: '^([[:xdigit:]]{2}[:.-]?){5}[[:xdigit:]]{2}$'
          example: '3D:F2:C9:A6:B3:4F'
          description: The mac address of the communication chip.
        ds:
          $ref: '#/components/schemas/Serial'
          description: 'The device serial number. It is based on. It is based on. Item Number (3), Revision (3), Manufacturer (3), Manufacturer Plant (1), Production Line (2), Station (1), Running Number (7)'
        sku:
          $ref: '#/components/schemas/SKU'
          example: '105011'
          default: '105011'
          description: The device / PCB SKU.
    SKU105056Sensors:
      type: object
      description: The supported actuators for the SKU 105056
      properties:
        fsp0:
          $ref: '#/components/schemas/Fan0SpeedSensor'
        pm2_5:
          $ref: '#/components/schemas/PM25MeasurementSensor'
        rt5s:
          $ref: '#/components/schemas/RealTime5SecondSensor'
        b5m:
          $ref: '#/components/schemas/Batch5MinSensor'
    BAFAppConfiguration:
      allOf:
        - $ref: '#/components/schemas/CmConfig'
        - type: object
          description: This is the configuration sample a BAF app.
          properties:
            baseline:
              type: object
              properties:
                appid:
                  type: string
                  format: uuid
                  description: The application UUID
                  example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
            _ot:
              type: string
              example: BAFAppConfiguration
          xml:
            name: baf-app-config
    CommonBAFAppConfiguration:
      allOf:
        - $ref: '#/components/schemas/CmConfig'
        - type: object
          description: This is the common configuration (sample) for all BAF app instances.
          properties:
            devices:
              type: array
              items:
                type: string
                format: uuid
                description: The device UUID
                example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
            _ot:
              type: string
              example: CommonBAFAppConfiguration
          xml:
            name: common-baf-app-config
    OneOfConfiguration:
      type: object
      oneOf:
        - $ref: '#/components/schemas/G4DeviceConfiguration'
        - $ref: '#/components/schemas/SKU105011Configuration'
        - $ref: '#/components/schemas/SKU104859Configuration'
        - $ref: '#/components/schemas/SKU104861Configuration'
        - $ref: '#/components/schemas/SKU104863Configuration'
        - $ref: '#/components/schemas/SKU105013Configuration'
        - $ref: '#/components/schemas/SKU105012Configuration'
        - $ref: '#/components/schemas/SKU104867Configuration'
        - $ref: '#/components/schemas/SKU104869Configuration'
        - $ref: '#/components/schemas/SKU104871Configuration'
        - $ref: '#/components/schemas/SKU105054Configuration'
        - $ref: '#/components/schemas/SKU105055Configuration'
        - $ref: '#/components/schemas/SKU105056Configuration'
      discriminator:
        propertyName: _ot
    HistoricalTelemetryDataResponse:
      type: array
      description: The response with requested historical sensor data.
      items:
        $ref: '#/components/schemas/TelemetryDataResponseItem'
    TelemetryDataResponseItem:
      type: object
      description: A single item containing the telemetry data queried for.
      properties:
        did:
          type: string
          format: uuid
          description: The device UUID
          example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
        start:
          type: integer
          format: int64
          description: A 64 bit Unix timestamp where the values starts.
        end:
          type: integer
          format: int64
          description: A 64 bit Unix timestamp where the values starts.
        sensors:
          type: array
          description: The sensor columns in the result-set
          example:
            - fsp
            - pm2.1
            - tvoc
          items:
            type: string
        datapoints:
          type: array
          description: An array of `TelemetryRecord`(s) with data columns specified ins the _sensors_ property.
          items:
            $ref: '#/components/schemas/TelemetryRecord'
    TelemetryRecord:
      type: array
      description: A single record with always a Unix 64 bit timestamp as first column. If value is missing it will emit nothing and therefore it may be a row where one or more sensor values are just omitted. However it will emit the number of columns (i.e. the number of commas in the array will stay the same).
      example:
        - - 1567594746
          - 36.46698
          - 0
          - 66.256
          - 450
          - 125
          - 33.1907
      items:
        type: number
    InitialDataResponse:
      type: object
      description: 'This object is the complete result from the initial api call. It contains both static, and operational data such as events, alarms sensor data, operational values of dynamic configuration.'
      properties:
        deviceinfo:
          type: array
          items:
            $ref: '#/components/schemas/DeviceInfo'
        appconfig:
          $ref: '#/components/schemas/BAFAppConfiguration'
        identityconfig:
          $ref: '#/components/schemas/CommonBAFAppConfiguration'
      xml:
        name: initial-data
    InitialDataRequest:
      type: object
      description: 'This object describes what data, configuration and subscription the initial call shall do.'
      properties:
        eventsubscription:
          $ref: '#/components/schemas/FullEventFilter'
          description: 'This object contains both the include and exclude filters. The exclude filters are applied before incude filtering. If this is omitted no events subscription is done. Otherwise, this is installed as the application subscription and the event dispatcher will start to dispatch events on the event channel for the application UUID.'
        alarmsubscription:
          $ref: '#/components/schemas/AlarmSubscription'
        datachannelsubscription:
          type: array
          items:
            $ref: '#/components/schemas/DataChannelSubscription'
        eventquery:
          $ref: '#/components/schemas/EventFilter'
          description: 'This works as a inclusion filter towards the cloud event service where it will query its stored events in the event database to deliver events in the  `DeviceInfo` object. Note that this filter is for all devices, the result is sorted per device.'
        sensordataquery:
          type: array
          items:
            $ref: '#/components/schemas/SensorDataQuery'
        appconfigquery:
          $ref: '#/components/schemas/CMReadRequest'
        identityquery:
          $ref: '#/components/schemas/CMReadRequest'
          description: Queries configuration that is shared across all configuration types (`_t`) of _BAFApp_. Internally it will use the _sub_ part in the claims to map this to a configuration.
        deviceconfigquery:
          type: array
          description: 'An array of read request for each device UUID that the configuration is wanted. If any error, the configuration is not returned in the `DeviceInfo` object. It will not emit any error codes. Instead a separate `CMReadRequest` should be supplied towards the blue CM API to see if it succeeds or if error, examine the error code.'
          items:
            $ref: '#/components/schemas/CMReadRequestsUUID'
        includealarms:
          type: boolean
          example: true
          description: If it shall return all active alarms for each device and the BAF application or not.
        includestates:
          type: boolean
          example: true
          description: If the `DeviceInfo` shall include state information such as fanspeed that is part of the dynamic configuration.
      xml:
        name: initial-data-request
    DeviceInfo:
      type: object
      description: 'The device sensor data, events, alarm and config, including dynamic configuration states.'
      properties:
        id:
          type: string
          format: uuid
          description: The device uuid
          example: 9707d52a-a4a2-42e4-ba95-bcccf068b323
        events:
          $ref: '#/components/schemas/OneOfEvent'
        alarms:
          $ref: '#/components/schemas/AlarmList'
        sensordata:
          $ref: '#/components/schemas/SenML'
        states:
          $ref: '#/components/schemas/SenML'
          description: '<p>This is the dynamic configuration states expressed as a set of SenML instructions. The name of the entry is the name of the property in the dynamic configuration. Nested properties are specified using namespacing in the `bn` property. For example if *speed* and *on* is under the object *fan* in the dynamic configuration the `bn` property is _urn:dev:ow:{device UUID}:fan_ and then two _SenML_ entries with `n` set to speed and `enabled` is provided. If no nested properties only _urn:dev:ow:{device UUID}:_ is supplied. An example of nested properties</p> <p> [{"bn": "urn:dev:ow:10e2073a0108001:fan", "n": "speed", "v":80.0},  {"n":"on", "vb": true}] </p>'
        configuration:
          $ref: '#/components/schemas/OneOfConfiguration'
      required:
        - id
      xml:
        name: device-info
    AlarmList:
      type: array
      items:
        $ref: '#/components/schemas/Alarm'
    AlarmSubscription:
      type: object
      description: A subscription object to be passed to the alarm subscribe API.
      properties:
        at:
          type: array
          description: An array of alarms type ids that the subscriber wishes to receive.
          items:
            $ref: '#/components/schemas/AlarmTypeId'
        ot:
          type: array
          description: An array of object types that the subscribers wishes to receive. This is less granular option than the alarm type and it will receive all event types within the object type group.
          items:
            type: string
            description: A object type to receive.
            example: CommunicationAlarm
    CMReadRequestsUUID:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The uuid of the configuration to target the (`r`)ead request to.
          example: 4172541c-36bc-4dee-8c46-ad6d3470dfd9
        r:
          $ref: '#/components/schemas/CMReadRequest'
      required:
        - id
        - r
      xml:
        name: cm-uuid-read-request
    DataChannelSubscription:
      type: object
      description: This object is a subscription for one or more datachannels for a specific UUID. It is also possible to use UUID wildcard.
      properties:
        id:
          type: string
          format: uuid
          example: 123c4b64-29cb-4357-8645-8fb1bc7a1feb
          description: The device UUID. If null or empty it will cover all devices that are present in the callers claims. This means that all devices that the caller has the rights to see sensor data from.
        channels:
          type: array
          description: Enables the named data channels such as 5s and 5m. Depending on claims this request enables zero or more datachannels (sensor SenML streams). No error is reported if it fails.
          items:
            type: string
            example: 5s
      required:
        - id
        - channels
      xml:
        name: data-channel-subscription
    SensorDataQuery:
      type: object
      description: A query for sensor data
      properties:
        id:
          type: string
          format: uuid
          example: 123c4b64-29cb-4357-8645-8fb1bc7a1feb
          description: The device UUID. If null or empty it will cover all devices that are present in the callers claims. This means that all devices that the caller has the rights to see sensor data from.
        time:
          type: integer
          format: int32
          example: 0
          description: 'Expresses a negative integer for how many milliseconds from `now()` and backwards in tim to query for sensor data in the telemetry service. If zero or positive, it will only return the last known entry for the supplied sensor names.'
        sensors:
          type: array
          description: 'An array of sensor names that this query targets. If left empty, it will get all sensor values in the telemetry service. Depending on claims, the caller may not recieve all types of sensor data. Thus, filtered out without any errors.'
          items:
            type: string
            example: Tvoc
      required:
        - id
        - time
        - sensor
      xml:
        name: sensor-data-query
  securitySchemes:
    cloudAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'This token is obtained by external IdP, such as Gigya, and federated, and claims agumented, by Bluair Cloud IdP service.'
